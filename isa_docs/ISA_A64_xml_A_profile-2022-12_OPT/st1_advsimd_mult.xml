<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2022 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->

<instructionsection id="ST1_advsimd_mult" title="ST1 (multiple structures) -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="advsimd" />
    <docvar key="isa" value="A64" />
    <docvar key="mnemonic" value="ST1" />
  </docvars>
  <heading>ST1 (multiple structures)</heading>
  <desc>
    <brief>
      <para>Store multiple single-element structures from one, two, three, or four registers</para>
    </brief>
    <authored>
      <para>Store multiple single-element structures from one, two, three, or four registers. This instruction stores elements to memory from one, two, three, or four SIMD&amp;FP registers, without interleaving. Every element of each register is stored.</para>
      <para>Depending on the settings in the <xref linkend="AArch64.cpacr_el1">CPACR_EL1</xref>, <xref linkend="AArch64.cptr_el2">CPTR_EL2</xref>, and <xref linkend="AArch64.cptr_el3">CPTR_EL3</xref> registers, and the current Security state and Exception level, an attempt to execute the instruction might be trapped.</para>
    </authored>
  </desc>
  <operationalnotes>
    <para>If PSTATE.DIT is 1, the timing of this instruction is insensitive to the value of the data being loaded or stored.</para>
  </operationalnotes>
  <alias_list howmany="0"></alias_list>
  <classes>
    <classesintro count="2">
      <txt>It has encodings from 2 classes:</txt>
      <a href="#iclass_as_no_post_index">No offset</a>
      <txt> and </txt>
      <a href="#iclass_as_post_index">Post-index</a>
    </classesintro>
    <iclass name="No offset" oneof="2" id="iclass_as_no_post_index" no_encodings="4" isa="A64">
      <docvars>
        <docvar key="as-structure-post-index" value="as-no-post-index" />
        <docvar key="instr-class" value="advsimd" />
        <docvar key="isa" value="A64" />
        <docvar key="mnemonic" value="ST1" />
      </docvars>
      <iclassintro count="4"></iclassintro>
      <regdiagram form="32" psname="aarch64/instrs/memory/vector/multiple/no-wb/ST1_asisdlse_R1_1v" tworows="1">
        <box hibit="31" settings="1">
          <c>0</c>
        </box>
        <box hibit="30" name="Q" usename="1">
          <c></c>
        </box>
        <box hibit="29" width="7" settings="7">
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="22" name="L" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="21" width="6" settings="6">
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="15" width="4" name="opcode" usename="1" settings="1" psbits="xxxx">
          <c>x</c>
          <c>x</c>
          <c>1</c>
          <c>x</c>
        </box>
        <box hibit="11" width="2" name="size" usename="1">
          <c colspan="2"></c>
        </box>
        <box hibit="9" width="5" name="Rn" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="4" width="5" name="Rt" usename="1">
          <c colspan="5"></c>
        </box>
      </regdiagram>
      <encoding name="ST1_asisdlse_R1_1v" oneofinclass="4" oneof="12" label="One register" bitdiffs="opcode == 0111">
        <docvars>
          <docvar key="as-structure-post-index" value="as-no-post-index" />
          <docvar key="instr-class" value="advsimd" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="ST1" />
          <docvar key="ststruct-regcount" value="from-1reg" />
        </docvars>
        <box hibit="15" width="4" name="opcode">
          <c>0</c>
          <c>1</c>
          <c></c>
          <c>1</c>
        </box>
        <asmtemplate><text>ST1  </text><text>{</text><text> </text><a link="sa_vt" hover="First or only SIMD&amp;FP register to be transferred (field &quot;Rt&quot;)">&lt;Vt&gt;</a><text>.</text><a link="sa_t" hover="Arrangement specifier (field &quot;size:Q&quot;) [1D,2D,2S,4H,4S,8B,8H,16B]">&lt;T&gt;</a><text> </text><text>}</text><text>, [</text><a link="sa_xn_sp" hover="64-bit general-purpose base register or SP (field &quot;Rn&quot;)">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <encoding name="ST1_asisdlse_R2_2v" oneofinclass="4" oneof="12" label="Two registers" bitdiffs="opcode == 1010">
        <docvars>
          <docvar key="as-structure-post-index" value="as-no-post-index" />
          <docvar key="instr-class" value="advsimd" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="ST1" />
          <docvar key="ststruct-regcount" value="from-2reg" />
        </docvars>
        <box hibit="15" width="4" name="opcode">
          <c>1</c>
          <c>0</c>
          <c></c>
          <c>0</c>
        </box>
        <asmtemplate><text>ST1  </text><text>{</text><text> </text><a link="sa_vt" hover="First or only SIMD&amp;FP register to be transferred (field &quot;Rt&quot;)">&lt;Vt&gt;</a><text>.</text><a link="sa_t" hover="Arrangement specifier (field &quot;size:Q&quot;) [1D,2D,2S,4H,4S,8B,8H,16B]">&lt;T&gt;</a><text>, </text><a link="sa_vt2" hover="Second SIMD&amp;FP register to be transferred (field Rt)">&lt;Vt2&gt;</a><text>.</text><a link="sa_t" hover="Arrangement specifier (field &quot;size:Q&quot;) [1D,2D,2S,4H,4S,8B,8H,16B]">&lt;T&gt;</a><text> </text><text>}</text><text>, [</text><a link="sa_xn_sp" hover="64-bit general-purpose base register or SP (field &quot;Rn&quot;)">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <encoding name="ST1_asisdlse_R3_3v" oneofinclass="4" oneof="12" label="Three registers" bitdiffs="opcode == 0110">
        <docvars>
          <docvar key="as-structure-post-index" value="as-no-post-index" />
          <docvar key="instr-class" value="advsimd" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="ST1" />
          <docvar key="ststruct-regcount" value="from-3reg" />
        </docvars>
        <box hibit="15" width="4" name="opcode">
          <c>0</c>
          <c>1</c>
          <c></c>
          <c>0</c>
        </box>
        <asmtemplate><text>ST1  </text><text>{</text><text> </text><a link="sa_vt" hover="First or only SIMD&amp;FP register to be transferred (field &quot;Rt&quot;)">&lt;Vt&gt;</a><text>.</text><a link="sa_t" hover="Arrangement specifier (field &quot;size:Q&quot;) [1D,2D,2S,4H,4S,8B,8H,16B]">&lt;T&gt;</a><text>, </text><a link="sa_vt2" hover="Second SIMD&amp;FP register to be transferred (field Rt)">&lt;Vt2&gt;</a><text>.</text><a link="sa_t" hover="Arrangement specifier (field &quot;size:Q&quot;) [1D,2D,2S,4H,4S,8B,8H,16B]">&lt;T&gt;</a><text>, </text><a link="sa_vt3" hover="Third SIMD&amp;FP register to be transferred (field Rt)">&lt;Vt3&gt;</a><text>.</text><a link="sa_t" hover="Arrangement specifier (field &quot;size:Q&quot;) [1D,2D,2S,4H,4S,8B,8H,16B]">&lt;T&gt;</a><text> </text><text>}</text><text>, [</text><a link="sa_xn_sp" hover="64-bit general-purpose base register or SP (field &quot;Rn&quot;)">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <encoding name="ST1_asisdlse_R4_4v" oneofinclass="4" oneof="12" label="Four registers" bitdiffs="opcode == 0010">
        <docvars>
          <docvar key="as-structure-post-index" value="as-no-post-index" />
          <docvar key="instr-class" value="advsimd" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="ST1" />
          <docvar key="ststruct-regcount" value="from-4reg" />
        </docvars>
        <box hibit="15" width="4" name="opcode">
          <c>0</c>
          <c>0</c>
          <c></c>
          <c>0</c>
        </box>
        <asmtemplate><text>ST1  </text><text>{</text><text> </text><a link="sa_vt" hover="First or only SIMD&amp;FP register to be transferred (field &quot;Rt&quot;)">&lt;Vt&gt;</a><text>.</text><a link="sa_t" hover="Arrangement specifier (field &quot;size:Q&quot;) [1D,2D,2S,4H,4S,8B,8H,16B]">&lt;T&gt;</a><text>, </text><a link="sa_vt2" hover="Second SIMD&amp;FP register to be transferred (field Rt)">&lt;Vt2&gt;</a><text>.</text><a link="sa_t" hover="Arrangement specifier (field &quot;size:Q&quot;) [1D,2D,2S,4H,4S,8B,8H,16B]">&lt;T&gt;</a><text>, </text><a link="sa_vt3" hover="Third SIMD&amp;FP register to be transferred (field Rt)">&lt;Vt3&gt;</a><text>.</text><a link="sa_t" hover="Arrangement specifier (field &quot;size:Q&quot;) [1D,2D,2S,4H,4S,8B,8H,16B]">&lt;T&gt;</a><text>, </text><a link="sa_vt4" hover="Fourth SIMD&amp;FP register to be transferred (field Rt)">&lt;Vt4&gt;</a><text>.</text><a link="sa_t" hover="Arrangement specifier (field &quot;size:Q&quot;) [1D,2D,2S,4H,4S,8B,8H,16B]">&lt;T&gt;</a><text> </text><text>}</text><text>, [</text><a link="sa_xn_sp" hover="64-bit general-purpose base register or SP (field &quot;Rn&quot;)">&lt;Xn|SP&gt;</a><text>]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="aarch64/instrs/memory/vector/multiple/no-wb/ST1_asisdlse_R1_1v" mylink="aarch64.instrs.memory.vector.multiple.no-wb.ST1_asisdlse_R1_1v" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">integer t = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rt);
integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rn);
integer m = integer UNKNOWN;
boolean wback = FALSE;
boolean nontemporal = FALSE;
boolean tagchecked = wback || n != 31;</pstext>
        </ps>
      </ps_section>
    </iclass>
    <iclass name="Post-index" oneof="2" id="iclass_as_post_index" no_encodings="8" isa="A64">
      <docvars>
        <docvar key="as-structure-post-index" value="as-post-index" />
        <docvar key="instr-class" value="advsimd" />
        <docvar key="isa" value="A64" />
        <docvar key="mnemonic" value="ST1" />
      </docvars>
      <iclassintro count="8"></iclassintro>
      <regdiagram form="32" psname="aarch64/instrs/memory/vector/multiple/post-inc/ST1_asisdlsep_I1_i1" tworows="1">
        <box hibit="31" settings="1">
          <c>0</c>
        </box>
        <box hibit="30" name="Q" usename="1">
          <c></c>
        </box>
        <box hibit="29" width="7" settings="7">
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="22" name="L" usename="1" settings="1" psbits="x">
          <c>0</c>
        </box>
        <box hibit="21" settings="1">
          <c>0</c>
        </box>
        <box hibit="20" width="5" name="Rm" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="15" width="4" name="opcode" usename="1" settings="1" psbits="xxxx">
          <c>x</c>
          <c>x</c>
          <c>1</c>
          <c>x</c>
        </box>
        <box hibit="11" width="2" name="size" usename="1">
          <c colspan="2"></c>
        </box>
        <box hibit="9" width="5" name="Rn" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="4" width="5" name="Rt" usename="1">
          <c colspan="5"></c>
        </box>
      </regdiagram>
      <encoding name="ST1_asisdlsep_I1_i1" oneofinclass="8" oneof="12" label="One register, immediate offset" bitdiffs="Rm == 11111 &amp;&amp; opcode == 0111">
        <docvars>
          <docvar key="as-structure-index-source" value="post-index-imm" />
          <docvar key="as-structure-post-index" value="as-post-index" />
          <docvar key="instr-class" value="advsimd" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="ST1" />
          <docvar key="sti-mult-labels" value="from-1reg-post-index-imm" />
          <docvar key="ststruct-regcount" value="from-1reg" />
        </docvars>
        <box hibit="20" width="5" name="Rm">
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="15" width="4" name="opcode">
          <c>0</c>
          <c>1</c>
          <c></c>
          <c>1</c>
        </box>
        <asmtemplate><text>ST1  </text><text>{</text><text> </text><a link="sa_vt" hover="First or only SIMD&amp;FP register to be transferred (field &quot;Rt&quot;)">&lt;Vt&gt;</a><text>.</text><a link="sa_t" hover="Arrangement specifier (field &quot;size:Q&quot;) [1D,2D,2S,4H,4S,8B,8H,16B]">&lt;T&gt;</a><text> </text><text>}</text><text>, [</text><a link="sa_xn_sp" hover="64-bit general-purpose base register or SP (field &quot;Rn&quot;)">&lt;Xn|SP&gt;</a><text>], </text><a link="sa_imm" hover="Post-index immediate offset (field &quot;Q&quot;) [#8,#16]">&lt;imm&gt;</a></asmtemplate>
      </encoding>
      <encoding name="ST1_asisdlsep_R1_r1" oneofinclass="8" oneof="12" label="One register, register offset" bitdiffs="Rm != 11111 &amp;&amp; opcode == 0111">
        <docvars>
          <docvar key="as-structure-index-source" value="post-index-reg" />
          <docvar key="as-structure-post-index" value="as-post-index" />
          <docvar key="instr-class" value="advsimd" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="ST1" />
          <docvar key="sti-mult-labels" value="from-1reg-post-index-reg" />
          <docvar key="ststruct-regcount" value="from-1reg" />
        </docvars>
        <box hibit="20" width="5" name="Rm">
          <c>N</c>
          <c>N</c>
          <c>N</c>
          <c>N</c>
          <c>N</c>
        </box>
        <box hibit="15" width="4" name="opcode">
          <c>0</c>
          <c>1</c>
          <c></c>
          <c>1</c>
        </box>
        <asmtemplate><text>ST1  </text><text>{</text><text> </text><a link="sa_vt" hover="First or only SIMD&amp;FP register to be transferred (field &quot;Rt&quot;)">&lt;Vt&gt;</a><text>.</text><a link="sa_t" hover="Arrangement specifier (field &quot;size:Q&quot;) [1D,2D,2S,4H,4S,8B,8H,16B]">&lt;T&gt;</a><text> </text><text>}</text><text>, [</text><a link="sa_xn_sp" hover="64-bit general-purpose base register or SP (field &quot;Rn&quot;)">&lt;Xn|SP&gt;</a><text>], </text><a link="sa_xm" hover="64-bit general-purpose post-index register, excluding XZR (field &quot;Rm&quot;)">&lt;Xm&gt;</a></asmtemplate>
      </encoding>
      <encoding name="ST1_asisdlsep_I2_i2" oneofinclass="8" oneof="12" label="Two registers, immediate offset" bitdiffs="Rm == 11111 &amp;&amp; opcode == 1010">
        <docvars>
          <docvar key="as-structure-index-source" value="post-index-imm" />
          <docvar key="as-structure-post-index" value="as-post-index" />
          <docvar key="instr-class" value="advsimd" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="ST1" />
          <docvar key="sti-mult-labels" value="from-2reg-post-index-imm" />
          <docvar key="ststruct-regcount" value="from-2reg" />
        </docvars>
        <box hibit="20" width="5" name="Rm">
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="15" width="4" name="opcode">
          <c>1</c>
          <c>0</c>
          <c></c>
          <c>0</c>
        </box>
        <asmtemplate><text>ST1  </text><text>{</text><text> </text><a link="sa_vt" hover="First or only SIMD&amp;FP register to be transferred (field &quot;Rt&quot;)">&lt;Vt&gt;</a><text>.</text><a link="sa_t" hover="Arrangement specifier (field &quot;size:Q&quot;) [1D,2D,2S,4H,4S,8B,8H,16B]">&lt;T&gt;</a><text>, </text><a link="sa_vt2" hover="Second SIMD&amp;FP register to be transferred (field Rt)">&lt;Vt2&gt;</a><text>.</text><a link="sa_t" hover="Arrangement specifier (field &quot;size:Q&quot;) [1D,2D,2S,4H,4S,8B,8H,16B]">&lt;T&gt;</a><text> </text><text>}</text><text>, [</text><a link="sa_xn_sp" hover="64-bit general-purpose base register or SP (field &quot;Rn&quot;)">&lt;Xn|SP&gt;</a><text>], </text><a link="sa_imm_1" hover="Post-index immediate offset (field &quot;Q&quot;) [#16,#32]">&lt;imm&gt;</a></asmtemplate>
      </encoding>
      <encoding name="ST1_asisdlsep_R2_r2" oneofinclass="8" oneof="12" label="Two registers, register offset" bitdiffs="Rm != 11111 &amp;&amp; opcode == 1010">
        <docvars>
          <docvar key="as-structure-index-source" value="post-index-reg" />
          <docvar key="as-structure-post-index" value="as-post-index" />
          <docvar key="instr-class" value="advsimd" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="ST1" />
          <docvar key="sti-mult-labels" value="from-2reg-post-index-reg" />
          <docvar key="ststruct-regcount" value="from-2reg" />
        </docvars>
        <box hibit="20" width="5" name="Rm">
          <c>N</c>
          <c>N</c>
          <c>N</c>
          <c>N</c>
          <c>N</c>
        </box>
        <box hibit="15" width="4" name="opcode">
          <c>1</c>
          <c>0</c>
          <c></c>
          <c>0</c>
        </box>
        <asmtemplate><text>ST1  </text><text>{</text><text> </text><a link="sa_vt" hover="First or only SIMD&amp;FP register to be transferred (field &quot;Rt&quot;)">&lt;Vt&gt;</a><text>.</text><a link="sa_t" hover="Arrangement specifier (field &quot;size:Q&quot;) [1D,2D,2S,4H,4S,8B,8H,16B]">&lt;T&gt;</a><text>, </text><a link="sa_vt2" hover="Second SIMD&amp;FP register to be transferred (field Rt)">&lt;Vt2&gt;</a><text>.</text><a link="sa_t" hover="Arrangement specifier (field &quot;size:Q&quot;) [1D,2D,2S,4H,4S,8B,8H,16B]">&lt;T&gt;</a><text> </text><text>}</text><text>, [</text><a link="sa_xn_sp" hover="64-bit general-purpose base register or SP (field &quot;Rn&quot;)">&lt;Xn|SP&gt;</a><text>], </text><a link="sa_xm" hover="64-bit general-purpose post-index register, excluding XZR (field &quot;Rm&quot;)">&lt;Xm&gt;</a></asmtemplate>
      </encoding>
      <encoding name="ST1_asisdlsep_I3_i3" oneofinclass="8" oneof="12" label="Three registers, immediate offset" bitdiffs="Rm == 11111 &amp;&amp; opcode == 0110">
        <docvars>
          <docvar key="as-structure-index-source" value="post-index-imm" />
          <docvar key="as-structure-post-index" value="as-post-index" />
          <docvar key="instr-class" value="advsimd" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="ST1" />
          <docvar key="sti-mult-labels" value="from-3reg-post-index-imm" />
          <docvar key="ststruct-regcount" value="from-3reg" />
        </docvars>
        <box hibit="20" width="5" name="Rm">
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="15" width="4" name="opcode">
          <c>0</c>
          <c>1</c>
          <c></c>
          <c>0</c>
        </box>
        <asmtemplate><text>ST1  </text><text>{</text><text> </text><a link="sa_vt" hover="First or only SIMD&amp;FP register to be transferred (field &quot;Rt&quot;)">&lt;Vt&gt;</a><text>.</text><a link="sa_t" hover="Arrangement specifier (field &quot;size:Q&quot;) [1D,2D,2S,4H,4S,8B,8H,16B]">&lt;T&gt;</a><text>, </text><a link="sa_vt2" hover="Second SIMD&amp;FP register to be transferred (field Rt)">&lt;Vt2&gt;</a><text>.</text><a link="sa_t" hover="Arrangement specifier (field &quot;size:Q&quot;) [1D,2D,2S,4H,4S,8B,8H,16B]">&lt;T&gt;</a><text>, </text><a link="sa_vt3" hover="Third SIMD&amp;FP register to be transferred (field Rt)">&lt;Vt3&gt;</a><text>.</text><a link="sa_t" hover="Arrangement specifier (field &quot;size:Q&quot;) [1D,2D,2S,4H,4S,8B,8H,16B]">&lt;T&gt;</a><text> </text><text>}</text><text>, [</text><a link="sa_xn_sp" hover="64-bit general-purpose base register or SP (field &quot;Rn&quot;)">&lt;Xn|SP&gt;</a><text>], </text><a link="sa_imm_2" hover="Post-index immediate offset (field &quot;Q&quot;) [#24,#48]">&lt;imm&gt;</a></asmtemplate>
      </encoding>
      <encoding name="ST1_asisdlsep_R3_r3" oneofinclass="8" oneof="12" label="Three registers, register offset" bitdiffs="Rm != 11111 &amp;&amp; opcode == 0110">
        <docvars>
          <docvar key="as-structure-index-source" value="post-index-reg" />
          <docvar key="as-structure-post-index" value="as-post-index" />
          <docvar key="instr-class" value="advsimd" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="ST1" />
          <docvar key="sti-mult-labels" value="from-3reg-post-index-reg" />
          <docvar key="ststruct-regcount" value="from-3reg" />
        </docvars>
        <box hibit="20" width="5" name="Rm">
          <c>N</c>
          <c>N</c>
          <c>N</c>
          <c>N</c>
          <c>N</c>
        </box>
        <box hibit="15" width="4" name="opcode">
          <c>0</c>
          <c>1</c>
          <c></c>
          <c>0</c>
        </box>
        <asmtemplate><text>ST1  </text><text>{</text><text> </text><a link="sa_vt" hover="First or only SIMD&amp;FP register to be transferred (field &quot;Rt&quot;)">&lt;Vt&gt;</a><text>.</text><a link="sa_t" hover="Arrangement specifier (field &quot;size:Q&quot;) [1D,2D,2S,4H,4S,8B,8H,16B]">&lt;T&gt;</a><text>, </text><a link="sa_vt2" hover="Second SIMD&amp;FP register to be transferred (field Rt)">&lt;Vt2&gt;</a><text>.</text><a link="sa_t" hover="Arrangement specifier (field &quot;size:Q&quot;) [1D,2D,2S,4H,4S,8B,8H,16B]">&lt;T&gt;</a><text>, </text><a link="sa_vt3" hover="Third SIMD&amp;FP register to be transferred (field Rt)">&lt;Vt3&gt;</a><text>.</text><a link="sa_t" hover="Arrangement specifier (field &quot;size:Q&quot;) [1D,2D,2S,4H,4S,8B,8H,16B]">&lt;T&gt;</a><text> </text><text>}</text><text>, [</text><a link="sa_xn_sp" hover="64-bit general-purpose base register or SP (field &quot;Rn&quot;)">&lt;Xn|SP&gt;</a><text>], </text><a link="sa_xm" hover="64-bit general-purpose post-index register, excluding XZR (field &quot;Rm&quot;)">&lt;Xm&gt;</a></asmtemplate>
      </encoding>
      <encoding name="ST1_asisdlsep_I4_i4" oneofinclass="8" oneof="12" label="Four registers, immediate offset" bitdiffs="Rm == 11111 &amp;&amp; opcode == 0010">
        <docvars>
          <docvar key="as-structure-index-source" value="post-index-imm" />
          <docvar key="as-structure-post-index" value="as-post-index" />
          <docvar key="instr-class" value="advsimd" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="ST1" />
          <docvar key="sti-mult-labels" value="from-4reg-post-index-imm" />
          <docvar key="ststruct-regcount" value="from-4reg" />
        </docvars>
        <box hibit="20" width="5" name="Rm">
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="15" width="4" name="opcode">
          <c>0</c>
          <c>0</c>
          <c></c>
          <c>0</c>
        </box>
        <asmtemplate><text>ST1  </text><text>{</text><text> </text><a link="sa_vt" hover="First or only SIMD&amp;FP register to be transferred (field &quot;Rt&quot;)">&lt;Vt&gt;</a><text>.</text><a link="sa_t" hover="Arrangement specifier (field &quot;size:Q&quot;) [1D,2D,2S,4H,4S,8B,8H,16B]">&lt;T&gt;</a><text>, </text><a link="sa_vt2" hover="Second SIMD&amp;FP register to be transferred (field Rt)">&lt;Vt2&gt;</a><text>.</text><a link="sa_t" hover="Arrangement specifier (field &quot;size:Q&quot;) [1D,2D,2S,4H,4S,8B,8H,16B]">&lt;T&gt;</a><text>, </text><a link="sa_vt3" hover="Third SIMD&amp;FP register to be transferred (field Rt)">&lt;Vt3&gt;</a><text>.</text><a link="sa_t" hover="Arrangement specifier (field &quot;size:Q&quot;) [1D,2D,2S,4H,4S,8B,8H,16B]">&lt;T&gt;</a><text>, </text><a link="sa_vt4" hover="Fourth SIMD&amp;FP register to be transferred (field Rt)">&lt;Vt4&gt;</a><text>.</text><a link="sa_t" hover="Arrangement specifier (field &quot;size:Q&quot;) [1D,2D,2S,4H,4S,8B,8H,16B]">&lt;T&gt;</a><text> </text><text>}</text><text>, [</text><a link="sa_xn_sp" hover="64-bit general-purpose base register or SP (field &quot;Rn&quot;)">&lt;Xn|SP&gt;</a><text>], </text><a link="sa_imm_3" hover="Post-index immediate offset (field &quot;Q&quot;) [#32,#64]">&lt;imm&gt;</a></asmtemplate>
      </encoding>
      <encoding name="ST1_asisdlsep_R4_r4" oneofinclass="8" oneof="12" label="Four registers, register offset" bitdiffs="Rm != 11111 &amp;&amp; opcode == 0010">
        <docvars>
          <docvar key="as-structure-index-source" value="post-index-reg" />
          <docvar key="as-structure-post-index" value="as-post-index" />
          <docvar key="instr-class" value="advsimd" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="ST1" />
          <docvar key="sti-mult-labels" value="from-4reg-post-index-reg" />
          <docvar key="ststruct-regcount" value="from-4reg" />
        </docvars>
        <box hibit="20" width="5" name="Rm">
          <c>N</c>
          <c>N</c>
          <c>N</c>
          <c>N</c>
          <c>N</c>
        </box>
        <box hibit="15" width="4" name="opcode">
          <c>0</c>
          <c>0</c>
          <c></c>
          <c>0</c>
        </box>
        <asmtemplate><text>ST1  </text><text>{</text><text> </text><a link="sa_vt" hover="First or only SIMD&amp;FP register to be transferred (field &quot;Rt&quot;)">&lt;Vt&gt;</a><text>.</text><a link="sa_t" hover="Arrangement specifier (field &quot;size:Q&quot;) [1D,2D,2S,4H,4S,8B,8H,16B]">&lt;T&gt;</a><text>, </text><a link="sa_vt2" hover="Second SIMD&amp;FP register to be transferred (field Rt)">&lt;Vt2&gt;</a><text>.</text><a link="sa_t" hover="Arrangement specifier (field &quot;size:Q&quot;) [1D,2D,2S,4H,4S,8B,8H,16B]">&lt;T&gt;</a><text>, </text><a link="sa_vt3" hover="Third SIMD&amp;FP register to be transferred (field Rt)">&lt;Vt3&gt;</a><text>.</text><a link="sa_t" hover="Arrangement specifier (field &quot;size:Q&quot;) [1D,2D,2S,4H,4S,8B,8H,16B]">&lt;T&gt;</a><text>, </text><a link="sa_vt4" hover="Fourth SIMD&amp;FP register to be transferred (field Rt)">&lt;Vt4&gt;</a><text>.</text><a link="sa_t" hover="Arrangement specifier (field &quot;size:Q&quot;) [1D,2D,2S,4H,4S,8B,8H,16B]">&lt;T&gt;</a><text> </text><text>}</text><text>, [</text><a link="sa_xn_sp" hover="64-bit general-purpose base register or SP (field &quot;Rn&quot;)">&lt;Xn|SP&gt;</a><text>], </text><a link="sa_xm" hover="64-bit general-purpose post-index register, excluding XZR (field &quot;Rm&quot;)">&lt;Xm&gt;</a></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="aarch64/instrs/memory/vector/multiple/post-inc/ST1_asisdlsep_I1_i1" mylink="aarch64.instrs.memory.vector.multiple.post-inc.ST1_asisdlsep_I1_i1" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">integer t = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rt);
integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rn);
integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rm);
boolean wback = TRUE;
boolean nontemporal = FALSE;
boolean tagchecked = wback || n != 31;</pstext>
        </ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="ST1_asisdlse_R1_1v, ST1_asisdlse_R2_2v, ST1_asisdlse_R3_3v, ST1_asisdlse_R4_4v, ST1_asisdlsep_I1_i1, ST1_asisdlsep_I2_i2, ST1_asisdlsep_I3_i3, ST1_asisdlsep_I4_i4, ST1_asisdlsep_R1_r1, ST1_asisdlsep_R2_r2, ST1_asisdlsep_R3_r3, ST1_asisdlsep_R4_r4" symboldefcount="1">
      <symbol link="sa_vt">&lt;Vt&gt;</symbol>
      <account encodedin="Rt">
        <intro>
          <para>Is the name of the first or only SIMD&amp;FP register to be transferred, encoded in the "Rt" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="ST1_asisdlse_R1_1v, ST1_asisdlse_R2_2v, ST1_asisdlse_R3_3v, ST1_asisdlse_R4_4v, ST1_asisdlsep_I1_i1, ST1_asisdlsep_I2_i2, ST1_asisdlsep_I3_i3, ST1_asisdlsep_I4_i4, ST1_asisdlsep_R1_r1, ST1_asisdlsep_R2_r2, ST1_asisdlsep_R3_r3, ST1_asisdlsep_R4_r4" symboldefcount="1">
      <symbol link="sa_t">&lt;T&gt;</symbol>
      <definition encodedin="size:Q">
        <intro>Is an arrangement specifier, </intro>
        <table class="valuetable">
          <tgroup cols="3">
            <thead>
              <row>
                <entry class="bitfield">size</entry>
                <entry class="bitfield">Q</entry>
                <entry class="symbol">&lt;T&gt;</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry class="bitfield">00</entry>
                <entry class="bitfield">0</entry>
                <entry class="symbol">8B</entry>
              </row>
              <row>
                <entry class="bitfield">00</entry>
                <entry class="bitfield">1</entry>
                <entry class="symbol">16B</entry>
              </row>
              <row>
                <entry class="bitfield">01</entry>
                <entry class="bitfield">0</entry>
                <entry class="symbol">4H</entry>
              </row>
              <row>
                <entry class="bitfield">01</entry>
                <entry class="bitfield">1</entry>
                <entry class="symbol">8H</entry>
              </row>
              <row>
                <entry class="bitfield">10</entry>
                <entry class="bitfield">0</entry>
                <entry class="symbol">2S</entry>
              </row>
              <row>
                <entry class="bitfield">10</entry>
                <entry class="bitfield">1</entry>
                <entry class="symbol">4S</entry>
              </row>
              <row>
                <entry class="bitfield">11</entry>
                <entry class="bitfield">0</entry>
                <entry class="symbol">1D</entry>
              </row>
              <row>
                <entry class="bitfield">11</entry>
                <entry class="bitfield">1</entry>
                <entry class="symbol">2D</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </definition>
    </explanation>
    <explanation enclist="ST1_asisdlse_R2_2v, ST1_asisdlse_R3_3v, ST1_asisdlse_R4_4v, ST1_asisdlsep_I2_i2, ST1_asisdlsep_I3_i3, ST1_asisdlsep_I4_i4, ST1_asisdlsep_R2_r2, ST1_asisdlsep_R3_r3, ST1_asisdlsep_R4_r4" symboldefcount="1">
      <symbol link="sa_vt2">&lt;Vt2&gt;</symbol>
      <account encodedin="Rt">
        <intro>
          <para>Is the name of the second SIMD&amp;FP register to be transferred, encoded as "Rt" plus 1 modulo 32.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="ST1_asisdlse_R3_3v, ST1_asisdlse_R4_4v, ST1_asisdlsep_I3_i3, ST1_asisdlsep_I4_i4, ST1_asisdlsep_R3_r3, ST1_asisdlsep_R4_r4" symboldefcount="1">
      <symbol link="sa_vt3">&lt;Vt3&gt;</symbol>
      <account encodedin="Rt">
        <intro>
          <para>Is the name of the third SIMD&amp;FP register to be transferred, encoded as "Rt" plus 2 modulo 32.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="ST1_asisdlse_R4_4v, ST1_asisdlsep_I4_i4, ST1_asisdlsep_R4_r4" symboldefcount="1">
      <symbol link="sa_vt4">&lt;Vt4&gt;</symbol>
      <account encodedin="Rt">
        <intro>
          <para>Is the name of the fourth SIMD&amp;FP register to be transferred, encoded as "Rt" plus 3 modulo 32.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="ST1_asisdlse_R1_1v, ST1_asisdlse_R2_2v, ST1_asisdlse_R3_3v, ST1_asisdlse_R4_4v, ST1_asisdlsep_I1_i1, ST1_asisdlsep_I2_i2, ST1_asisdlsep_I3_i3, ST1_asisdlsep_I4_i4, ST1_asisdlsep_R1_r1, ST1_asisdlsep_R2_r2, ST1_asisdlsep_R3_r3, ST1_asisdlsep_R4_r4" symboldefcount="1">
      <symbol link="sa_xn_sp">&lt;Xn|SP&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 64-bit name of the general-purpose base register or stack pointer, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="ST1_asisdlsep_I1_i1" symboldefcount="1">
      <symbol link="sa_imm">&lt;imm&gt;</symbol>
      <definition encodedin="Q">
        <intro>For the one register, immediate offset variant: is the post-index immediate offset, </intro>
        <table class="valuetable">
          <tgroup cols="2">
            <thead>
              <row>
                <entry class="bitfield">Q</entry>
                <entry class="symbol">&lt;imm&gt;</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry class="bitfield">0</entry>
                <entry class="symbol">#8</entry>
              </row>
              <row>
                <entry class="bitfield">1</entry>
                <entry class="symbol">#16</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </definition>
    </explanation>
    <explanation enclist="ST1_asisdlsep_I2_i2" symboldefcount="2">
      <symbol link="sa_imm_1">&lt;imm&gt;</symbol>
      <definition encodedin="Q">
        <intro>For the two registers, immediate offset variant: is the post-index immediate offset, </intro>
        <table class="valuetable">
          <tgroup cols="2">
            <thead>
              <row>
                <entry class="bitfield">Q</entry>
                <entry class="symbol">&lt;imm&gt;</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry class="bitfield">0</entry>
                <entry class="symbol">#16</entry>
              </row>
              <row>
                <entry class="bitfield">1</entry>
                <entry class="symbol">#32</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </definition>
    </explanation>
    <explanation enclist="ST1_asisdlsep_I3_i3" symboldefcount="3">
      <symbol link="sa_imm_2">&lt;imm&gt;</symbol>
      <definition encodedin="Q">
        <intro>For the three registers, immediate offset variant: is the post-index immediate offset, </intro>
        <table class="valuetable">
          <tgroup cols="2">
            <thead>
              <row>
                <entry class="bitfield">Q</entry>
                <entry class="symbol">&lt;imm&gt;</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry class="bitfield">0</entry>
                <entry class="symbol">#24</entry>
              </row>
              <row>
                <entry class="bitfield">1</entry>
                <entry class="symbol">#48</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </definition>
    </explanation>
    <explanation enclist="ST1_asisdlsep_I4_i4" symboldefcount="4">
      <symbol link="sa_imm_3">&lt;imm&gt;</symbol>
      <definition encodedin="Q">
        <intro>For the four registers, immediate offset variant: is the post-index immediate offset, </intro>
        <table class="valuetable">
          <tgroup cols="2">
            <thead>
              <row>
                <entry class="bitfield">Q</entry>
                <entry class="symbol">&lt;imm&gt;</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry class="bitfield">0</entry>
                <entry class="symbol">#32</entry>
              </row>
              <row>
                <entry class="bitfield">1</entry>
                <entry class="symbol">#64</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </definition>
    </explanation>
    <explanation enclist="ST1_asisdlsep_R1_r1, ST1_asisdlsep_R2_r2, ST1_asisdlsep_R3_r3, ST1_asisdlsep_R4_r4" symboldefcount="1">
      <symbol link="sa_xm">&lt;Xm&gt;</symbol>
      <account encodedin="Rm">
        <intro>
          <para>Is the 64-bit name of the general-purpose post-index register, excluding XZR, encoded in the "Rm" field.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="aarch64/instrs/memory/vector/multiple/no-wb/ST1_asisdlse_R1_1v" mylink="postdecode" enclabels="" sections="1" secttype="Shared Decode">
      <pstext mayhavelinks="1" section="Postdecode" rep_section="postdecode"><a link="MemOp" file="shared_pseudocode.xml" hover="enumeration MemOp {MemOp_LOAD, MemOp_STORE, MemOp_PREFETCH}">MemOp</a> memop = if L == '1' then <a link="MemOp_LOAD" file="shared_pseudocode.xml" hover="enumeration MemOp {MemOp_LOAD, MemOp_STORE, MemOp_PREFETCH}">MemOp_LOAD</a> else <a link="MemOp_STORE" file="shared_pseudocode.xml" hover="enumeration MemOp {MemOp_LOAD, MemOp_STORE, MemOp_PREFETCH}">MemOp_STORE</a>;
integer datasize = if Q == '1' then 128 else 64;
integer esize = 8 &lt;&lt; <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(size);
integer elements = datasize DIV esize;

integer rpt;    // number of iterations
integer selem;    // structure elements

case opcode of
    when '0000' rpt = 1; selem = 4;    // LD/ST4 (4 registers)
    when '0010' rpt = 4; selem = 1;    // LD/ST1 (4 registers)
    when '0100' rpt = 1; selem = 3;    // LD/ST3 (3 registers)
    when '0110' rpt = 3; selem = 1;    // LD/ST1 (3 registers)
    when '0111' rpt = 1; selem = 1;    // LD/ST1 (1 register)
    when '1000' rpt = 1; selem = 2;    // LD/ST2 (2 registers)
    when '1010' rpt = 2; selem = 1;    // LD/ST1 (2 registers)
    otherwise UNDEFINED;

// .1D format only permitted with LD1 &amp; ST1
if size:Q == '110' &amp;&amp; selem != 1 then UNDEFINED;</pstext>
    </ps>
  </ps_section>
  <ps_section howmany="1">
    <ps name="aarch64/instrs/memory/vector/multiple/no-wb/ST1_asisdlse_R1_1v" mylink="execute" enclabels="" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute"><a link="impl-aarch64.CheckFPAdvSIMDEnabled64.0" file="shared_pseudocode.xml" hover="function: CheckFPAdvSIMDEnabled64()">CheckFPAdvSIMDEnabled64</a>();

bits(64) address;
bits(64) offs;
bits(datasize) rval;
integer tt;
constant integer ebytes = esize DIV 8;

<a link="AccessDescriptor" file="shared_pseudocode.xml" hover="type AccessDescriptor is ( AccessType acctype, bits(2) el, SecurityState ss, boolean acqsc, boolean acqpc, boolean relsc, boolean limitedordered, boolean exclusive, boolean atomicop, MemAtomicOp modop, boolean nontemporal, boolean read, boolean write, CacheOp cacheop, CacheOpScope opscope, CacheType cachetype, boolean pan, boolean transactional, boolean nonfault, boolean firstfault, boolean first, boolean contiguous, boolean streamingsve, boolean ls64, boolean mops, boolean rcw, boolean rcws, boolean toplevel, VARange varange, boolean a32lsmd, boolean tagchecked, boolean tagaccess, MPAMinfo mpam )">AccessDescriptor</a> accdesc = <a link="impl-shared.CreateAccDescASIMD.3" file="shared_pseudocode.xml" hover="function: AccessDescriptor CreateAccDescASIMD(MemOp memop, boolean nontemporal, boolean tagchecked)">CreateAccDescASIMD</a>(memop, nontemporal, tagchecked);
if n == 31 then
    <a link="impl-aarch64.CheckSPAlignment.0" file="shared_pseudocode.xml" hover="function: CheckSPAlignment()">CheckSPAlignment</a>();
    address = <a link="impl-aarch64.SP.read.0" file="shared_pseudocode.xml" hover="accessor: bits(64) SP[]">SP</a>[];
else
    address = <a link="impl-aarch64.X.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n, integer width]">X</a>[n, 64];

offs = <a link="impl-shared.Zeros.1" file="shared_pseudocode.xml" hover="function: bits(N) Zeros(integer N)">Zeros</a>(64);
for r = 0 to rpt-1
    for e = 0 to elements-1
        tt = (t + r) MOD 32;
        for s = 0 to selem-1
            rval = <a link="impl-aarch64.V.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) V[integer n, integer width]">V</a>[tt, datasize];
            if memop == <a link="MemOp_LOAD" file="shared_pseudocode.xml" hover="enumeration MemOp {MemOp_LOAD, MemOp_STORE, MemOp_PREFETCH}">MemOp_LOAD</a> then
                <a link="impl-shared.Elem.write.3" file="shared_pseudocode.xml" hover="accessor: Elem[bits(N) &amp;vector, integer e, integer size] = bits(size) value">Elem</a>[rval, e, esize] = <a link="impl-aarch64.Mem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size*8) Mem[bits(64) address, integer size, AccessDescriptor accdesc]">Mem</a>[address+offs, ebytes, accdesc];
                <a link="impl-aarch64.V.write.2" file="shared_pseudocode.xml" hover="accessor: V[integer n, integer width] = bits(width) value">V</a>[tt, datasize] = rval;
            else // memop == MemOp_STORE
                Mem[address+offs, ebytes, accdesc] = <a link="impl-shared.Elem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size) Elem[bits(N) vector, integer e, integer size]">Elem</a>[rval, e, esize];
            offs = offs + ebytes;
            tt = (tt + 1) MOD 32;

if wback then
    if m != 31 then
        offs = <a link="impl-aarch64.X.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n, integer width]">X</a>[m, 64];
    if n == 31 then
        <a link="impl-aarch64.SP.write.0" file="shared_pseudocode.xml" hover="accessor: SP[] = bits(64) value">SP</a>[] = address + offs;
    else
        <a link="impl-aarch64.X.write.2" file="shared_pseudocode.xml" hover="accessor: X[integer n, integer width] = bits(width) value">X</a>[n, 64] = address + offs;</pstext>
    </ps>
  </ps_section>
</instructionsection>
