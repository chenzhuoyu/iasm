<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2022 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->

<instructionsection id="LDRSB_reg" title="LDRSB (register) -- A64" type="instruction">
  <docvars>
    <docvar key="instr-class" value="general" />
    <docvar key="isa" value="A64" />
    <docvar key="mnemonic" value="LDRSB" />
    <docvar key="offset-type" value="off-reg" />
  </docvars>
  <heading>LDRSB (register)</heading>
  <desc>
    <brief>
      <para>Load Register Signed Byte (register)</para>
    </brief>
    <authored>
      <para>Load Register Signed Byte (register) calculates an address from a base register value and an offset register value, loads a byte from memory, sign-extends it, and writes it to a register. For information about memory accesses, see <xref linkend="CHDIIIBB">Load/Store addressing modes</xref>.</para>
    </authored>
  </desc>
  <operationalnotes>
    <para>If PSTATE.DIT is 1, the timing of this instruction is insensitive to the value of the data being loaded or stored.</para>
  </operationalnotes>
  <alias_list howmany="0"></alias_list>
  <classes>
    <iclass name="Integer" oneof="1" id="iclass_general" no_encodings="4" isa="A64">
      <docvars>
        <docvar key="instr-class" value="general" />
        <docvar key="isa" value="A64" />
        <docvar key="mnemonic" value="LDRSB" />
        <docvar key="offset-type" value="off-reg" />
      </docvars>
      <iclassintro count="4"></iclassintro>
      <regdiagram form="32" psname="aarch64/instrs/memory/single/general/register/LDRSB_32B_ldst_regoff" tworows="1">
        <box hibit="31" width="2" name="size" usename="1" settings="2" psbits="xx">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="29" width="3" settings="3">
          <c>1</c>
          <c>1</c>
          <c>1</c>
        </box>
        <box hibit="26" name="V" settings="1">
          <c>0</c>
        </box>
        <box hibit="25" width="2" settings="2">
          <c>0</c>
          <c>0</c>
        </box>
        <box hibit="23" width="2" name="opc" usename="1" settings="1" psbits="xx">
          <c>1</c>
          <c>x</c>
        </box>
        <box hibit="21" settings="1">
          <c>1</c>
        </box>
        <box hibit="20" width="5" name="Rm" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="15" width="3" name="option" usename="1">
          <c colspan="3"></c>
        </box>
        <box hibit="12" name="S" usename="1">
          <c></c>
        </box>
        <box hibit="11" width="2" settings="2">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="9" width="5" name="Rn" usename="1">
          <c colspan="5"></c>
        </box>
        <box hibit="4" width="5" name="Rt" usename="1">
          <c colspan="5"></c>
        </box>
      </regdiagram>
      <encoding name="LDRSB_32B_ldst_regoff" oneofinclass="4" oneof="4" label="32-bit with extended register offset" bitdiffs="opc == 11 &amp;&amp; option != 011">
        <docvars>
          <docvar key="datatype" value="32" />
          <docvar key="datatype-reguse" value="32-ext-reg" />
          <docvar key="instr-class" value="general" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="LDRSB" />
          <docvar key="offset-type" value="off-reg" />
          <docvar key="reguse" value="ext-reg" />
        </docvars>
        <box hibit="23" width="2" name="opc">
          <c></c>
          <c>1</c>
        </box>
        <box hibit="15" width="3" name="option">
          <c>Z</c>
          <c>N</c>
          <c>N</c>
        </box>
        <asmtemplate><text>LDRSB  </text><a link="sa_wt" hover="32-bit general-purpose register to be transferred (field &quot;Rt&quot;)">&lt;Wt&gt;</a><text>, [</text><a link="sa_xn_sp" hover="64-bit general-purpose base register or SP (field &quot;Rn&quot;)">&lt;Xn|SP&gt;</a><text>, (</text><a link="sa_wm" hover="When {field{option&lt;0&gt;}} is set to {binarynumber{0}} (field &quot;Rm&quot;)">&lt;Wm&gt;</a><text>|</text><a link="sa_xm" hover="When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)">&lt;Xm&gt;</a><text>), </text><a link="sa_extend" hover="Index extend specifier (field &quot;option&quot;) [SXTW,SXTX,UXTW]">&lt;extend&gt;</a><text> </text><text>{</text><a link="sa_amount" hover="Index shift amount, it must be {value{#0}} (field &quot;S&quot;)">&lt;amount&gt;</a><text>}</text><text>]</text></asmtemplate>
      </encoding>
      <encoding name="LDRSB_32BL_ldst_regoff" oneofinclass="4" oneof="4" label="32-bit with shifted register offset" bitdiffs="opc == 11 &amp;&amp; option == 011">
        <docvars>
          <docvar key="datatype" value="32" />
          <docvar key="datatype-reguse" value="32-shifted-reg" />
          <docvar key="instr-class" value="general" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="LDRSB" />
          <docvar key="offset-type" value="off-reg" />
          <docvar key="reguse" value="shifted-reg" />
        </docvars>
        <box hibit="23" width="2" name="opc">
          <c></c>
          <c>1</c>
        </box>
        <box hibit="15" width="3" name="option">
          <c>0</c>
          <c>1</c>
          <c>1</c>
        </box>
        <asmtemplate><text>LDRSB  </text><a link="sa_wt" hover="32-bit general-purpose register to be transferred (field &quot;Rt&quot;)">&lt;Wt&gt;</a><text>, [</text><a link="sa_xn_sp" hover="64-bit general-purpose base register or SP (field &quot;Rn&quot;)">&lt;Xn|SP&gt;</a><text>, </text><a link="sa_xm" hover="When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)">&lt;Xm&gt;</a><text>{</text><text>, LSL </text><a link="sa_amount" hover="Index shift amount, it must be {value{#0}} (field &quot;S&quot;)">&lt;amount&gt;</a><text>}</text><text>]</text></asmtemplate>
      </encoding>
      <encoding name="LDRSB_64B_ldst_regoff" oneofinclass="4" oneof="4" label="64-bit with extended register offset" bitdiffs="opc == 10 &amp;&amp; option != 011">
        <docvars>
          <docvar key="datatype" value="64" />
          <docvar key="datatype-reguse" value="64-ext-reg" />
          <docvar key="instr-class" value="general" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="LDRSB" />
          <docvar key="offset-type" value="off-reg" />
          <docvar key="reguse" value="ext-reg" />
        </docvars>
        <box hibit="23" width="2" name="opc">
          <c></c>
          <c>0</c>
        </box>
        <box hibit="15" width="3" name="option">
          <c>Z</c>
          <c>N</c>
          <c>N</c>
        </box>
        <asmtemplate><text>LDRSB  </text><a link="sa_xt" hover="64-bit general-purpose register to be transferred (field &quot;Rt&quot;)">&lt;Xt&gt;</a><text>, [</text><a link="sa_xn_sp" hover="64-bit general-purpose base register or SP (field &quot;Rn&quot;)">&lt;Xn|SP&gt;</a><text>, (</text><a link="sa_wm" hover="When {field{option&lt;0&gt;}} is set to {binarynumber{0}} (field &quot;Rm&quot;)">&lt;Wm&gt;</a><text>|</text><a link="sa_xm" hover="When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)">&lt;Xm&gt;</a><text>), </text><a link="sa_extend" hover="Index extend specifier (field &quot;option&quot;) [SXTW,SXTX,UXTW]">&lt;extend&gt;</a><text> </text><text>{</text><a link="sa_amount" hover="Index shift amount, it must be {value{#0}} (field &quot;S&quot;)">&lt;amount&gt;</a><text>}</text><text>]</text></asmtemplate>
      </encoding>
      <encoding name="LDRSB_64BL_ldst_regoff" oneofinclass="4" oneof="4" label="64-bit with shifted register offset" bitdiffs="opc == 10 &amp;&amp; option == 011">
        <docvars>
          <docvar key="datatype" value="64" />
          <docvar key="datatype-reguse" value="64-shifted-reg" />
          <docvar key="instr-class" value="general" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="LDRSB" />
          <docvar key="offset-type" value="off-reg" />
          <docvar key="reguse" value="shifted-reg" />
        </docvars>
        <box hibit="23" width="2" name="opc">
          <c></c>
          <c>0</c>
        </box>
        <box hibit="15" width="3" name="option">
          <c>0</c>
          <c>1</c>
          <c>1</c>
        </box>
        <asmtemplate><text>LDRSB  </text><a link="sa_xt" hover="64-bit general-purpose register to be transferred (field &quot;Rt&quot;)">&lt;Xt&gt;</a><text>, [</text><a link="sa_xn_sp" hover="64-bit general-purpose base register or SP (field &quot;Rn&quot;)">&lt;Xn|SP&gt;</a><text>, </text><a link="sa_xm" hover="When {field{option&lt;0&gt;}} is set to {binarynumber{1}} (field &quot;Rm&quot;)">&lt;Xm&gt;</a><text>{</text><text>, LSL </text><a link="sa_amount" hover="Index shift amount, it must be {value{#0}} (field &quot;S&quot;)">&lt;amount&gt;</a><text>}</text><text>]</text></asmtemplate>
      </encoding>
      <ps_section howmany="1">
        <ps name="aarch64/instrs/memory/single/general/register/LDRSB_32B_ldst_regoff" mylink="aarch64.instrs.memory.single.general.register.LDRSB_32B_ldst_regoff" enclabels="" sections="1" secttype="noheading">
          <pstext mayhavelinks="1" section="Decode" rep_section="decode">if option&lt;1&gt; == '0' then UNDEFINED;    // sub-word index
<a link="ExtendType" file="shared_pseudocode.xml" hover="enumeration ExtendType  {ExtendType_SXTB, ExtendType_SXTH, ExtendType_SXTW, ExtendType_SXTX, ExtendType_UXTB, ExtendType_UXTH, ExtendType_UXTW, ExtendType_UXTX}">ExtendType</a> extend_type = <a link="impl-aarch64.DecodeRegExtend.1" file="shared_pseudocode.xml" hover="function: ExtendType DecodeRegExtend(bits(3) op)">DecodeRegExtend</a>(option);</pstext>
        </ps>
      </ps_section>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="LDRSB_32B_ldst_regoff, LDRSB_32BL_ldst_regoff" symboldefcount="1">
      <symbol link="sa_wt">&lt;Wt&gt;</symbol>
      <account encodedin="Rt">
        <intro>
          <para>Is the 32-bit name of the general-purpose register to be transferred, encoded in the "Rt" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="LDRSB_64B_ldst_regoff, LDRSB_64BL_ldst_regoff" symboldefcount="1">
      <symbol link="sa_xt">&lt;Xt&gt;</symbol>
      <account encodedin="Rt">
        <intro>
          <para>Is the 64-bit name of the general-purpose register to be transferred, encoded in the "Rt" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="LDRSB_32B_ldst_regoff, LDRSB_32BL_ldst_regoff, LDRSB_64B_ldst_regoff, LDRSB_64BL_ldst_regoff" symboldefcount="1">
      <symbol link="sa_xn_sp">&lt;Xn|SP&gt;</symbol>
      <account encodedin="Rn">
        <intro>
          <para>Is the 64-bit name of the general-purpose base register or stack pointer, encoded in the "Rn" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="LDRSB_32B_ldst_regoff, LDRSB_64B_ldst_regoff" symboldefcount="1">
      <symbol link="sa_wm">&lt;Wm&gt;</symbol>
      <account encodedin="Rm">
        <intro>
          <para>When <field>option&lt;0&gt;</field> is set to <binarynumber>0</binarynumber>, is the 32-bit name of the general-purpose index register, encoded in the "Rm" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="LDRSB_32B_ldst_regoff, LDRSB_32BL_ldst_regoff, LDRSB_64B_ldst_regoff, LDRSB_64BL_ldst_regoff" symboldefcount="1">
      <symbol link="sa_xm">&lt;Xm&gt;</symbol>
      <account encodedin="Rm">
        <intro>
          <para>When <field>option&lt;0&gt;</field> is set to <binarynumber>1</binarynumber>, is the 64-bit name of the general-purpose index register, encoded in the "Rm" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="LDRSB_32B_ldst_regoff, LDRSB_64B_ldst_regoff" symboldefcount="1">
      <symbol link="sa_extend">&lt;extend&gt;</symbol>
      <definition encodedin="option">
        <intro>Is the index extend specifier, </intro>
        <table class="valuetable">
          <tgroup cols="2">
            <thead>
              <row>
                <entry class="bitfield">option</entry>
                <entry class="symbol">&lt;extend&gt;</entry>
              </row>
            </thead>
            <tbody>
              <row>
                <entry class="bitfield">010</entry>
                <entry class="symbol">UXTW</entry>
              </row>
              <row>
                <entry class="bitfield">110</entry>
                <entry class="symbol">SXTW</entry>
              </row>
              <row>
                <entry class="bitfield">111</entry>
                <entry class="symbol">SXTX</entry>
              </row>
            </tbody>
          </tgroup>
        </table>
      </definition>
    </explanation>
    <explanation enclist="LDRSB_32B_ldst_regoff, LDRSB_32BL_ldst_regoff, LDRSB_64B_ldst_regoff, LDRSB_64BL_ldst_regoff" symboldefcount="1">
      <symbol link="sa_amount">&lt;amount&gt;</symbol>
      <account encodedin="S">
        <intro>
          <para>Is the index shift amount, it must be <value>#0</value>, encoded in "S" as <binarynumber>0</binarynumber> if omitted, or as <binarynumber>1</binarynumber> if present.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
  <ps_section howmany="1">
    <ps name="aarch64/instrs/memory/single/general/register/LDRSB_32B_ldst_regoff" mylink="postdecode" enclabels="" sections="1" secttype="Shared Decode">
      <pstext mayhavelinks="1" section="Postdecode" rep_section="postdecode">integer n = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rn);
integer t = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rt);
integer m = <a link="impl-shared.UInt.1" file="shared_pseudocode.xml" hover="function: integer UInt(bits(N) x)">UInt</a>(Rm);
boolean privileged = PSTATE.EL != <a link="EL0" file="shared_pseudocode.xml" hover="constant bits(2) EL0 = '00'">EL0</a>;
<a link="MemOp" file="shared_pseudocode.xml" hover="enumeration MemOp {MemOp_LOAD, MemOp_STORE, MemOp_PREFETCH}">MemOp</a> memop;
boolean signed;
integer regsize;

if opc&lt;1&gt; == '0' then
    // store or zero-extending load
    memop = if opc&lt;0&gt; == '1' then <a link="MemOp_LOAD" file="shared_pseudocode.xml" hover="enumeration MemOp {MemOp_LOAD, MemOp_STORE, MemOp_PREFETCH}">MemOp_LOAD</a> else <a link="MemOp_STORE" file="shared_pseudocode.xml" hover="enumeration MemOp {MemOp_LOAD, MemOp_STORE, MemOp_PREFETCH}">MemOp_STORE</a>;
    regsize = 32;
    signed = FALSE;
else
    // sign-extending load
    memop = <a link="MemOp_LOAD" file="shared_pseudocode.xml" hover="enumeration MemOp {MemOp_LOAD, MemOp_STORE, MemOp_PREFETCH}">MemOp_LOAD</a>;
    regsize = if opc&lt;0&gt; == '1' then 32 else 64;
    signed = TRUE;

boolean tagchecked = memop != <a link="MemOp_PREFETCH" file="shared_pseudocode.xml" hover="enumeration MemOp {MemOp_LOAD, MemOp_STORE, MemOp_PREFETCH}">MemOp_PREFETCH</a>;</pstext>
    </ps>
  </ps_section>
  <ps_section howmany="1">
    <ps name="aarch64/instrs/memory/single/general/register/LDRSB_32B_ldst_regoff" mylink="execute" enclabels="" sections="1" secttype="Operation">
      <pstext mayhavelinks="1" section="Execute" rep_section="execute">bits(64) offset = <a link="impl-aarch64.ExtendReg.4" file="shared_pseudocode.xml" hover="function: bits(N) ExtendReg(integer reg, ExtendType exttype, integer shift, integer N)">ExtendReg</a>(m, extend_type, 0, 64);
bits(64) address;
bits(8) data;

<a link="AccessDescriptor" file="shared_pseudocode.xml" hover="type AccessDescriptor is ( AccessType acctype, bits(2) el, SecurityState ss, boolean acqsc, boolean acqpc, boolean relsc, boolean limitedordered, boolean exclusive, boolean atomicop, MemAtomicOp modop, boolean nontemporal, boolean read, boolean write, CacheOp cacheop, CacheOpScope opscope, CacheType cachetype, boolean pan, boolean transactional, boolean nonfault, boolean firstfault, boolean first, boolean contiguous, boolean streamingsve, boolean ls64, boolean mops, boolean rcw, boolean rcws, boolean toplevel, VARange varange, boolean a32lsmd, boolean tagchecked, boolean tagaccess, MPAMinfo mpam )">AccessDescriptor</a> accdesc = <a link="impl-shared.CreateAccDescGPR.4" file="shared_pseudocode.xml" hover="function: AccessDescriptor CreateAccDescGPR(MemOp memop, boolean nontemporal, boolean privileged, boolean tagchecked)">CreateAccDescGPR</a>(memop, FALSE, privileged, tagchecked);

if n == 31 then
    if memop != <a link="MemOp_PREFETCH" file="shared_pseudocode.xml" hover="enumeration MemOp {MemOp_LOAD, MemOp_STORE, MemOp_PREFETCH}">MemOp_PREFETCH</a> then <a link="impl-aarch64.CheckSPAlignment.0" file="shared_pseudocode.xml" hover="function: CheckSPAlignment()">CheckSPAlignment</a>();
    address = <a link="impl-aarch64.SP.read.0" file="shared_pseudocode.xml" hover="accessor: bits(64) SP[]">SP</a>[];
else
    address = <a link="impl-aarch64.X.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n, integer width]">X</a>[n, 64];

address = address + offset;

case memop of
    when <a link="MemOp_STORE" file="shared_pseudocode.xml" hover="enumeration MemOp {MemOp_LOAD, MemOp_STORE, MemOp_PREFETCH}">MemOp_STORE</a>
        data = <a link="impl-aarch64.X.read.2" file="shared_pseudocode.xml" hover="accessor: bits(width) X[integer n, integer width]">X</a>[t, 8];
        Mem[address, 1, accdesc] = data;

    when <a link="MemOp_LOAD" file="shared_pseudocode.xml" hover="enumeration MemOp {MemOp_LOAD, MemOp_STORE, MemOp_PREFETCH}">MemOp_LOAD</a>
        data = <a link="impl-aarch64.Mem.read.3" file="shared_pseudocode.xml" hover="accessor: bits(size*8) Mem[bits(64) address, integer size, AccessDescriptor accdesc]">Mem</a>[address, 1, accdesc];
        if signed then
            <a link="impl-aarch64.X.write.2" file="shared_pseudocode.xml" hover="accessor: X[integer n, integer width] = bits(width) value">X</a>[t, regsize] = <a link="impl-shared.SignExtend.2" file="shared_pseudocode.xml" hover="function: bits(N) SignExtend(bits(M) x, integer N)">SignExtend</a>(data, regsize);
        else
            <a link="impl-aarch64.X.write.2" file="shared_pseudocode.xml" hover="accessor: X[integer n, integer width] = bits(width) value">X</a>[t, regsize] = <a link="impl-shared.ZeroExtend.2" file="shared_pseudocode.xml" hover="function: bits(N) ZeroExtend(bits(M) x, integer N)">ZeroExtend</a>(data, regsize);

    when <a link="MemOp_PREFETCH" file="shared_pseudocode.xml" hover="enumeration MemOp {MemOp_LOAD, MemOp_STORE, MemOp_PREFETCH}">MemOp_PREFETCH</a>
        <a link="impl-aarch64.Prefetch.2" file="shared_pseudocode.xml" hover="function: Prefetch(bits(64) address, bits(5) prfop)">Prefetch</a>(address, t&lt;4:0&gt;);</pstext>
    </ps>
  </ps_section>
</instructionsection>
