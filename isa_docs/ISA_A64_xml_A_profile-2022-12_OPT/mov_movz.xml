<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" encoding="UTF-8" href="iform.xsl" version="1.0"?>
<!DOCTYPE instructionsection PUBLIC "-//ARM//DTD instructionsection //EN" "iform-p.dtd">
<!-- Copyright (c) 2010-2022 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->

<instructionsection id="MOV_MOVZ" title="MOV (wide immediate) -- A64" type="alias">
  <docvars>
    <docvar key="alias_mnemonic" value="MOV" />
    <docvar key="immediate-type" value="imm18-packed" />
    <docvar key="instr-class" value="general" />
    <docvar key="isa" value="A64" />
    <docvar key="mnemonic" value="MOVZ" />
    <docvar key="move-what" value="mov-wideimm" />
  </docvars>
  <heading>MOV (wide immediate)</heading>
  <desc>
    <brief>
      <para>Move (wide immediate)</para>
    </brief>
    <authored>
      <para>Move (wide immediate) moves a 16-bit immediate value to a register.</para>
    </authored>
  </desc>
  <operationalnotes>
    <para>If PSTATE.DIT is 1:</para>
    <list type="unordered">
      <listitem><content>The execution time of this instruction is independent of:<list type="unordered"><listitem><content>The values of the data supplied in any of its registers.</content></listitem><listitem><content>The values of the NZCV flags.</content></listitem></list></content></listitem>
      <listitem><content>The response of this instruction to asynchronous exceptions does not vary based on:<list type="unordered"><listitem><content>The values of the data supplied in any of its registers.</content></listitem><listitem><content>The values of the NZCV flags.</content></listitem></list></content></listitem>
    </list>
  </operationalnotes>
  <aliasto refiform="movz.xml" iformid="MOVZ">MOVZ</aliasto>
  <classes>
    <iclass name="Immediate packed into 16-bit value and 2-bit shift" oneof="1" id="iclass_imm18_packed" no_encodings="2" isa="A64">
      <docvars>
        <docvar key="immediate-type" value="imm18-packed" />
        <docvar key="instr-class" value="general" />
        <docvar key="isa" value="A64" />
        <docvar key="mnemonic" value="MOVZ" />
      </docvars>
      <iclassintro count="2"></iclassintro>
      <regdiagram form="32" psname="aarch64/instrs/integer/ins-ext/insert/movewide/MOVZ_32_movewide/MOV_MOVZ_32_movewide" tworows="1">
        <box hibit="31" name="sf" usename="1">
          <c></c>
        </box>
        <box hibit="30" width="2" name="opc" usename="1" settings="2" psbits="xx">
          <c>1</c>
          <c>0</c>
        </box>
        <box hibit="28" width="6" settings="6">
          <c>1</c>
          <c>0</c>
          <c>0</c>
          <c>1</c>
          <c>0</c>
          <c>1</c>
        </box>
        <box hibit="22" width="2" name="hw" usename="1">
          <c colspan="2"></c>
        </box>
        <box hibit="20" width="16" name="imm16" usename="1">
          <c colspan="16"></c>
        </box>
        <box hibit="4" width="5" name="Rd" usename="1">
          <c colspan="5"></c>
        </box>
      </regdiagram>
      <encoding name="MOV_MOVZ_32_movewide" oneofinclass="2" oneof="2" label="32-bit" bitdiffs="sf == 0 &amp;&amp; hw == 0x">
        <docvars>
          <docvar key="alias_mnemonic" value="MOV" />
          <docvar key="datatype" value="32" />
          <docvar key="immediate-type" value="imm18-packed" />
          <docvar key="instr-class" value="general" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="MOVZ" />
          <docvar key="move-what" value="mov-wideimm" />
        </docvars>
        <box hibit="31" width="1" name="sf">
          <c>0</c>
        </box>
        <box hibit="22" width="2" name="hw">
          <c>0</c>
          <c></c>
        </box>
        <asmtemplate><text>MOV  </text><a link="sa_wd" hover="32-bit general-purpose destination register (field &quot;Rd&quot;)">&lt;Wd&gt;</a><text>, #</text><a link="sa_imm_1" hover="32-bit immediate which can be (field &quot;imm16:hw&quot;)">&lt;imm&gt;</a></asmtemplate>
        <equivalent_to>
          <asmtemplate><a href="movz.xml#MOVZ_32_movewide">MOVZ</a><text> </text><a link="sa_wd" hover="32-bit general-purpose destination register (field &quot;Rd&quot;)">&lt;Wd&gt;</a><text>, #</text><a>&lt;imm16&gt;</a><text>, LSL #</text><a link="sa_shift" hover="Amount by which to shift the immediate left (field &quot;hw&quot;)">&lt;shift&gt;</a></asmtemplate>
          <aliascond>! (<a link="impl-shared.IsZero.1" file="shared_pseudocode.xml" hover="function: boolean IsZero(bits(N) x)">IsZero</a>(imm16) &amp;&amp; hw != '00')</aliascond>
        </equivalent_to>
      </encoding>
      <encoding name="MOV_MOVZ_64_movewide" oneofinclass="2" oneof="2" label="64-bit" bitdiffs="sf == 1">
        <docvars>
          <docvar key="alias_mnemonic" value="MOV" />
          <docvar key="datatype" value="64" />
          <docvar key="immediate-type" value="imm18-packed" />
          <docvar key="instr-class" value="general" />
          <docvar key="isa" value="A64" />
          <docvar key="mnemonic" value="MOVZ" />
          <docvar key="move-what" value="mov-wideimm" />
        </docvars>
        <box hibit="31" width="1" name="sf">
          <c>1</c>
        </box>
        <asmtemplate><text>MOV  </text><a link="sa_xd" hover="64-bit general-purpose destination register (field &quot;Rd&quot;)">&lt;Xd&gt;</a><text>, #</text><a link="sa_imm_2" hover="64-bit immediate which can be (field &quot;imm16:hw&quot;)">&lt;imm&gt;</a></asmtemplate>
        <equivalent_to>
          <asmtemplate><a href="movz.xml#MOVZ_64_movewide">MOVZ</a><text> </text><a link="sa_xd" hover="64-bit general-purpose destination register (field &quot;Rd&quot;)">&lt;Xd&gt;</a><text>, #</text><a>&lt;imm16&gt;</a><text>, LSL #</text><a link="sa_shift_1" hover="Amount by which to shift the immediate left (field &quot;hw&quot;)">&lt;shift&gt;</a></asmtemplate>
          <aliascond>! (<a link="impl-shared.IsZero.1" file="shared_pseudocode.xml" hover="function: boolean IsZero(bits(N) x)">IsZero</a>(imm16) &amp;&amp; hw != '00')</aliascond>
        </equivalent_to>
      </encoding>
    </iclass>
  </classes>
  <explanations scope="all">
    <explanation enclist="MOV_MOVZ_32_movewide" symboldefcount="1">
      <symbol link="sa_wd">&lt;Wd&gt;</symbol>
      <account encodedin="Rd">
        <intro>
          <para>Is the 32-bit name of the general-purpose destination register, encoded in the "Rd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="MOV_MOVZ_64_movewide" symboldefcount="1">
      <symbol link="sa_xd">&lt;Xd&gt;</symbol>
      <account encodedin="Rd">
        <intro>
          <para>Is the 64-bit name of the general-purpose destination register, encoded in the "Rd" field.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="MOV_MOVZ_32_movewide" symboldefcount="1">
      <symbol link="sa_imm_1">&lt;imm&gt;</symbol>
      <account encodedin="hw:imm16">
        <docvars>
          <docvar key="datatype" value="32" />
        </docvars>
        <intro>
          <para>For the 32-bit variant: is a 32-bit immediate which can be encoded in "imm16:hw".</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="MOV_MOVZ_64_movewide" symboldefcount="2">
      <symbol link="sa_imm_2">&lt;imm&gt;</symbol>
      <account encodedin="hw:imm16">
        <docvars>
          <docvar key="datatype" value="64" />
        </docvars>
        <intro>
          <para>For the 64-bit variant: is a 64-bit immediate which can be encoded in "imm16:hw".</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="MOV_MOVZ_32_movewide" symboldefcount="1">
      <symbol link="sa_shift">&lt;shift&gt;</symbol>
      <account encodedin="hw">
        <docvars>
          <docvar key="datatype" value="32" />
        </docvars>
        <intro>
          <para>For the 32-bit variant: is the amount by which to shift the immediate left, either 0 (the default) or 16, encoded in the "hw" field as &lt;shift&gt;/16.</para>
        </intro>
      </account>
    </explanation>
    <explanation enclist="MOV_MOVZ_64_movewide" symboldefcount="2">
      <symbol link="sa_shift_1">&lt;shift&gt;</symbol>
      <account encodedin="hw">
        <docvars>
          <docvar key="datatype" value="64" />
        </docvars>
        <intro>
          <para>For the 64-bit variant: is the amount by which to shift the immediate left, either 0 (the default), 16, 32 or 48, encoded in the "hw" field as &lt;shift&gt;/16.</para>
        </intro>
      </account>
    </explanation>
  </explanations>
</instructionsection>
