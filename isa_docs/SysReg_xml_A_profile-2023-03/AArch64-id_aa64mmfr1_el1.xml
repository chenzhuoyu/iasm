<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register execution_state="AArch64" is_register="True" is_internal="True" is_banked="False" is_stub_entry="False">
      <reg_short_name>ID_AA64MMFR1_EL1</reg_short_name>
        
        <reg_long_name>AArch64 Memory Model Feature Register 1</reg_long_name>



      
      



          <reg_reset_value></reg_reset_value>

      <reg_mappings>
        




      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>Provides information about the implemented memory model and memory management support in AArch64 state.</para>

      </purpose_text>
      <purpose_text>
        <para>For general information about the interpretation of the ID registers, see <xref browsertext="'Principles of the ID scheme for fields in ID registers'" filename="D_aarch64_system_register_descriptions.fm" linkend="BABFAFHI"/>.</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
          <reg_group>Identification registers</reg_group>
      </reg_groups>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>ID_AA64MMFR1_EL1 is a 64-bit register.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        






<fields id="fieldset_0" length="64">
  <text_before_fields/>
  <field id="fieldset_0-63_60" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>ECBHB</field_name>
    <field_msb>63</field_msb>
    <field_lsb>60</field_lsb>
    <rel_range>63:60</rel_range>
    <field_description order="before">
      <para>Indicates support for cache maintenance instruction permission. Defined values are:</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref browsertext="FEAT_ECBHB" filename="A_armv8_architecture_extensions.fm" linkend="FEAT_ECBHB"/> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.9, the value <binarynumber>0b0000</binarynumber> is not permitted.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>The implementation does not disclose whether the branch history information created in a context before an exception to a higher Exception level using AArch64 can be used by code before that exception to exploitatively control the execution of any indirect branches in code in a different context after the exception.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>The branch history information created in a context before an exception to a higher Exception level using AArch64 cannot be used by code before that exception to exploitatively control the execution of any indirect branches in code in a different context after the exception.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <field id="fieldset_0-59_56" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>CMOW</field_name>
    <field_msb>59</field_msb>
    <field_lsb>56</field_lsb>
    <rel_range>59:56</rel_range>
    <field_description order="before">
      <para>Indicates support for cache maintenance instruction permission. Defined values are:</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref browsertext="FEAT_CMOW" filename="A_armv8_architecture_extensions.fm" linkend="FEAT_CMOW"/> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.8, the only permitted value is <binarynumber>0b0001</binarynumber>.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para><register_link state="AArch64" id="AArch64-sctlr_el1.xml">SCTLR_EL1</register_link>.CMOW, <register_link state="AArch64" id="AArch64-sctlr_el2.xml">SCTLR_EL2</register_link>.CMOW, and <register_link state="AArch64" id="AArch64-hcrx_el2.xml">HCRX_EL2</register_link>.CMOW bits are not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para><register_link state="AArch64" id="AArch64-sctlr_el1.xml">SCTLR_EL1</register_link>.CMOW is implemented. If EL2 is implemented, <register_link state="AArch64" id="AArch64-sctlr_el2.xml">SCTLR_EL2</register_link>.CMOW and <register_link state="AArch64" id="AArch64-hcrx_el2.xml">HCRX_EL2</register_link>.CMOW bits are implemented.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <field id="fieldset_0-55_52" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>TIDCP1</field_name>
    <field_msb>55</field_msb>
    <field_lsb>52</field_lsb>
    <rel_range>55:52</rel_range>
    <field_description order="before">
      <para>Indicates whether <register_link state="AArch64" id="AArch64-sctlr_el1.xml">SCTLR_EL1</register_link>.TIDCP and <register_link state="AArch64" id="AArch64-sctlr_el2.xml">SCTLR_EL2</register_link>.TIDCP are implemented in AArch64 state. Defined values are:</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref browsertext="FEAT_TIDCP1" filename="A_armv8_architecture_extensions.fm" linkend="FEAT_TIDCP1"/> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.8, the only permitted value is <binarynumber>0b0001</binarynumber>.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para><register_link state="AArch64" id="AArch64-sctlr_el1.xml">SCTLR_EL1</register_link>.TIDCP and <register_link state="AArch64" id="AArch64-sctlr_el2.xml">SCTLR_EL2</register_link>.TIDCP bits are not implemented and are <arm-defined-word>RES0</arm-defined-word>.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para><register_link state="AArch64" id="AArch64-sctlr_el1.xml">SCTLR_EL1</register_link>.TIDCP bit is implemented. If EL2 is implemented, <register_link state="AArch64" id="AArch64-sctlr_el2.xml">SCTLR_EL2</register_link>.TIDCP bit is implemented.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <field id="fieldset_0-51_48" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>nTLBPA</field_name>
    <field_msb>51</field_msb>
    <field_lsb>48</field_lsb>
    <rel_range>51:48</rel_range>
    <field_description order="before">
      <para>Indicates support for intermediate caching of translation table walks. Defined values are:</para>
    </field_description>
    <field_description order="after"><para>Non-coherent physical translation caches are non-coherent caches of previous valid translation table entries since the last completed relevant TLBI applicable to the PE, where either:</para>
<list type="unordered">
<listitem><content>The caching is indexed by the physical address of the location holding the translation table entry.</content>
</listitem><listitem><content>The caching is used for stage 1 translations and is indexed by the intermediate physical address of the location holding the translation table entry.</content>
</listitem></list>
<para>All other values are reserved.</para>
<para><xref browsertext="FEAT_nTLBPA" filename="A_armv8_architecture_extensions.fm" linkend="v8.0.nTLBPA"/> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.0, the permitted values are <binarynumber>0b0000</binarynumber> and <binarynumber>0b0001</binarynumber>.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>The intermediate caching of translation table walks might include non-coherent physical translation caches.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>The intermediate caching of translation table walks does not include non-coherent physical translation caches.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <field id="fieldset_0-47_44" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>AFP</field_name>
    <field_msb>47</field_msb>
    <field_lsb>44</field_lsb>
    <rel_range>47:44</rel_range>
    <field_description order="before">
      <para>Indicates support for <register_link state="AArch64" id="AArch64-fpcr.xml">FPCR</register_link>.{AH, FIZ, NEP}. Defined values are:</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref browsertext="FEAT_AFP" filename="A_armv8_architecture_extensions.fm" linkend="v8.7.AFP"/> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.7, if Advanced SIMD and floating-point is implemented, the only permitted value is <binarynumber>0b0001</binarynumber>.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>The <register_link state="AArch64" id="AArch64-fpcr.xml">FPCR</register_link>.{AH, FIZ, NEP} fields are not supported.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>The <register_link state="AArch64" id="AArch64-fpcr.xml">FPCR</register_link>.{AH, FIZ, NEP} fields are supported.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <field id="fieldset_0-43_40" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>HCX</field_name>
    <field_msb>43</field_msb>
    <field_lsb>40</field_lsb>
    <rel_range>43:40</rel_range>
    <field_description order="before">
      <para>Indicates support for <register_link state="AArch64" id="AArch64-hcrx_el2.xml">HCRX_EL2</register_link> and its associated EL3 trap. Defined values are:</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref browsertext="FEAT_HCX" filename="A_armv8_architecture_extensions.fm" linkend="v8.7.HCX"/> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.7, if EL2 is implemented, the only permitted value is <binarynumber>0b0001</binarynumber>.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para><register_link state="AArch64" id="AArch64-hcrx_el2.xml">HCRX_EL2</register_link> and its associated EL3 trap are not supported.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para><register_link state="AArch64" id="AArch64-hcrx_el2.xml">HCRX_EL2</register_link> and its associated EL3 trap are supported.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <field id="fieldset_0-39_36" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>ETS</field_name>
    <field_msb>39</field_msb>
    <field_lsb>36</field_lsb>
    <rel_range>39:36</rel_range>
    <field_description order="before">
      <para>Indicates support for Enhanced Translation Synchronization. Defined values are:</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref browsertext="FEAT_ETS2" filename="A_armv8_architecture_extensions.fm" linkend="FEAT_ETS2"/> implements the functionality identified by the value <binarynumber>0b0010</binarynumber>.</para>
<para>From Armv8.7, the values <binarynumber>0b0000</binarynumber> and <binarynumber>0b0001</binarynumber> are not permitted.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>Enhanced Translation Synchronization is not supported.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>Enhanced Translation Synchronization is not supported.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
          <para>Enhanced Translation Synchronization is supported</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <field id="fieldset_0-35_32" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>TWED</field_name>
    <field_msb>35</field_msb>
    <field_lsb>32</field_lsb>
    <rel_range>35:32</rel_range>
    <field_description order="before">
      <para>Indicates support for the configurable delayed trapping of WFE. Defined values are:</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref browsertext="FEAT_TWED" filename="A_armv8_architecture_extensions.fm" linkend="v8.6.TWED"/> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.6, the permitted values are <binarynumber>0b0000</binarynumber> and <binarynumber>0b0001</binarynumber>.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>Configurable delayed trapping of WFE is not supported.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>Configurable delayed trapping of WFE is supported.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <field id="fieldset_0-31_28" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>XNX</field_name>
    <field_msb>31</field_msb>
    <field_lsb>28</field_lsb>
    <rel_range>31:28</rel_range>
    <field_description order="before">
      <para>Indicates support for execute-never control distinction by Exception level at stage 2. Defined values are:</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref browsertext="FEAT_XNX" filename="A_armv8_architecture_extensions.fm" linkend="v8.2.TTS2UXN"/> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.2, the only permitted value is <binarynumber>0b0001</binarynumber>.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>Distinction between EL0 and EL1 execute-never control at stage 2 not supported.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>Distinction between EL0 and EL1 execute-never control at stage 2 supported.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <field id="fieldset_0-27_24-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RES0">
    <field_name>SpecSEI</field_name>
    <field_msb>27</field_msb>
    <field_lsb>24</field_lsb>
    <rel_range>3:0</rel_range>
    <field_description order="before">
      <para>Describes whether the PE can generate SError interrupt exceptions from speculative reads of memory, including speculative instruction fetches.</para>
    </field_description>
    <field_description order="after">
      <para>All other values are reserved.</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>The PE never generates an SError interrupt due to an External abort on a speculative read.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>The PE might generate an SError interrupt due to an External abort on a speculative read.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <fields_condition>When FEAT_RAS is implemented</fields_condition>
  </field>
  <field id="fieldset_0-27_24-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0" reserved_type="RES0">
    <field_msb>27</field_msb>
    <field_lsb>24</field_lsb>
    <rel_range>3:0</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-23_20" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>PAN</field_name>
    <field_msb>23</field_msb>
    <field_lsb>20</field_lsb>
    <rel_range>23:20</rel_range>
    <field_description order="before">
      <para>Privileged Access Never. Indicates support for the PAN bit in PSTATE, <register_link state="AArch64" id="AArch64-spsr_el1.xml">SPSR_EL1</register_link>, <register_link state="AArch64" id="AArch64-spsr_el2.xml">SPSR_EL2</register_link>, <register_link state="AArch64" id="AArch64-spsr_el3.xml">SPSR_EL3</register_link>, and <register_link state="AArch64" id="AArch64-dspsr_el0.xml">DSPSR_EL0</register_link>. Defined values are:</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref browsertext="FEAT_PAN" filename="A_armv8_architecture_extensions.fm" linkend="v8.1.PAN"/> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para><xref browsertext="FEAT_PAN2" filename="A_armv8_architecture_extensions.fm" linkend="v8.2.ATS1E1"/> implements the functionality added by the value <binarynumber>0b0010</binarynumber>.</para>
<para><xref browsertext="FEAT_PAN3" filename="A_armv8_architecture_extensions.fm" linkend="v8.7.PAN3"/> implements the functionality added by the value <binarynumber>0b0011</binarynumber>.</para>
<para>In Armv8.1, the permitted values are <binarynumber>0b0001</binarynumber>, <binarynumber>0b0010</binarynumber>, and <binarynumber>0b0011</binarynumber>.</para>
<para>From Armv8.2, the permitted values are <binarynumber>0b0010</binarynumber> and <binarynumber>0b0011</binarynumber>.</para>
<para>From Armv8.7, the only permitted value is <binarynumber>0b0011</binarynumber>.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>PAN not supported.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>PAN supported.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
          <para>PAN supported and <register_link id="AArch64-at-s1e1rp.xml" state="AArch64">AT S1E1RP</register_link> and <register_link id="AArch64-at-s1e1wp.xml" state="AArch64">AT S1E1WP</register_link> instructions supported.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0011</field_value>
        <field_value_description>
          <para>PAN supported, <register_link id="AArch64-at-s1e1rp.xml" state="AArch64">AT S1E1RP</register_link> and <register_link id="AArch64-at-s1e1wp.xml" state="AArch64">AT S1E1WP</register_link> instructions supported, and <register_link state="AArch64" id="AArch64-sctlr_el1.xml">SCTLR_EL1</register_link>.EPAN and <register_link state="AArch64" id="AArch64-sctlr_el2.xml">SCTLR_EL2</register_link>.EPAN bits supported.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <field id="fieldset_0-19_16" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>LO</field_name>
    <field_msb>19</field_msb>
    <field_lsb>16</field_lsb>
    <rel_range>19:16</rel_range>
    <field_description order="before">
      <para>LORegions. Indicates support for LORegions. Defined values are:</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref browsertext="FEAT_LOR" filename="A_armv8_architecture_extensions.fm" linkend="v8.1.LOR"/> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.1, the only permitted value is <binarynumber>0b0001</binarynumber>.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>LORegions not supported.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>LORegions supported.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <field id="fieldset_0-15_12" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>HPDS</field_name>
    <field_msb>15</field_msb>
    <field_lsb>12</field_lsb>
    <rel_range>15:12</rel_range>
    <field_description order="before">
      <para>Hierarchical Permission Disables. Indicates support for disabling hierarchical controls in translation tables. Defined values are:</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref browsertext="FEAT_HPDS" filename="A_armv8_architecture_extensions.fm" linkend="v8.1.HPD"/> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para><xref browsertext="FEAT_HPDS2" filename="A_armv8_architecture_extensions.fm" linkend="v8.2.TTPBHA"/> implements the functionality identified by the value <binarynumber>0b0010</binarynumber>.</para>
<para>From Armv8.1, the value <binarynumber>0b0000</binarynumber> is not permitted.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>Disabling of hierarchical controls not supported.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>Disabling of hierarchical controls supported with the <register_link state="AArch64" id="AArch64-tcr_el1.xml">TCR_EL1</register_link>.{HPD1, HPD0}, <register_link state="AArch64" id="AArch64-tcr_el2.xml">TCR_EL2</register_link>.HPD or <register_link state="AArch64" id="AArch64-tcr_el2.xml">TCR_EL2</register_link>.{HPD1, HPD0}, and <register_link state="AArch64" id="AArch64-tcr_el3.xml">TCR_EL3</register_link>.HPD bits.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
          <para>As for value <binarynumber>0b0001</binarynumber>, and adds possible hardware allocation of bits[62:59] of the Translation table descriptors from the final lookup level for <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> use.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <field id="fieldset_0-11_8" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>VH</field_name>
    <field_msb>11</field_msb>
    <field_lsb>8</field_lsb>
    <rel_range>11:8</rel_range>
    <field_description order="before">
      <para>Virtualization Host Extensions. Defined values are:</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref browsertext="FEAT_VHE" filename="A_armv8_architecture_extensions.fm" linkend="v8.1.VHE"/> implements the functionality identified by the value <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.1, the only permitted value is <binarynumber>0b0001</binarynumber>.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>Virtualization Host Extensions not supported.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>Virtualization Host Extensions supported.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <field id="fieldset_0-7_4" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>VMIDBits</field_name>
    <field_msb>7</field_msb>
    <field_lsb>4</field_lsb>
    <rel_range>7:4</rel_range>
    <field_description order="before">
      <para>Number of VMID bits. Defined values are:</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref browsertext="FEAT_VMID16" filename="A_armv8_architecture_extensions.fm" linkend="v8.1.VMID16"/> implements the functionality identified by the value <binarynumber>0b0010</binarynumber>.</para>
<para>From Armv8.1, the permitted values are <binarynumber>0b0000</binarynumber> and <binarynumber>0b0010</binarynumber>.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>8 bits</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
          <para>16 bits</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <field id="fieldset_0-3_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>HAFDBS</field_name>
    <field_msb>3</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>3:0</rel_range>
    <field_description order="before">
      <para>Hardware updates to Access flag and Dirty state in translation tables. Defined values are:</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref browsertext="FEAT_HAFDBS" filename="A_armv8_architecture_extensions.fm" linkend="v8.1.TTHM"/> implements the functionality identified by the values <binarynumber>0b0001</binarynumber> and <binarynumber>0b0010</binarynumber>.</para>
<para><xref browsertext="FEAT_HAFT" filename="A_armv8_architecture_extensions.fm" linkend="FEAT_HAFT"/> implements the functionality identified by the value <binarynumber>0b0011</binarynumber>.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>Hardware update of the Access flag and dirty state are not supported.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>Support for hardware update of the Access flag for Block and Page descriptors.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
          <para>As <binarynumber>0b0001</binarynumber>, and adds support for hardware update of the Access flag for Block and Page descriptors. Hardware update of dirty state is supported.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0011</field_value>
        <field_value_description>
          <para>As <binarynumber>0b0010</binarynumber>, and adds support for hardware update of the Access flag for Table descriptors.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <text_after_fields/>
</fields>




    
<reg_fieldset length="64">
  <fieldat id="fieldset_0-63_60" msb="63" lsb="60"/>
  <fieldat id="fieldset_0-59_56" msb="59" lsb="56"/>
  <fieldat id="fieldset_0-55_52" msb="55" lsb="52"/>
  <fieldat id="fieldset_0-51_48" msb="51" lsb="48"/>
  <fieldat id="fieldset_0-47_44" msb="47" lsb="44"/>
  <fieldat id="fieldset_0-43_40" msb="43" lsb="40"/>
  <fieldat id="fieldset_0-39_36" msb="39" lsb="36"/>
  <fieldat id="fieldset_0-35_32" msb="35" lsb="32"/>
  <fieldat id="fieldset_0-31_28" msb="31" lsb="28"/>
  <fieldat id="fieldset_0-27_24-1" msb="27" lsb="24"/>
  <fieldat id="fieldset_0-23_20" msb="23" lsb="20"/>
  <fieldat id="fieldset_0-19_16" msb="19" lsb="16"/>
  <fieldat id="fieldset_0-15_12" msb="15" lsb="12"/>
  <fieldat id="fieldset_0-11_8" msb="11" lsb="8"/>
  <fieldat id="fieldset_0-7_4" msb="7" lsb="4"/>
  <fieldat id="fieldset_0-3_0" msb="3" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>

      <access_mechanisms>
          






        
        <access_mechanism accessor="MRS ID_AA64MMFR1_EL1" type="SystemAccessor">
            <encoding>
            <access_instruction>MRS &lt;Xt&gt;, ID_AA64MMFR1_EL1</access_instruction>
                
                <enc n="op0" v="0b11"/>
                
                <enc n="op1" v="0b000"/>
                
                <enc n="CRn" v="0b0000"/>
                
                <enc n="CRm" v="0b0111"/>
                
                <enc n="op2" v="0b001"/>
            </encoding>
            <access_permission>
                <ps name="MRS" sections="1" secttype="access_permission">
                <pstext>
if PSTATE.EL == EL0 then
    if IsFeatureImplemented(FEAT_IDST) then
        if EL2Enabled() &amp;&amp; HCR_EL2.TGE == '1' then
            AArch64.SystemAccessTrap(EL2, 0x18);
        else
            AArch64.SystemAccessTrap(EL1, 0x18);
    else
        UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; HCR_EL2.TID3 == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    else
        X[t, 64] = ID_AA64MMFR1_EL1;
elsif PSTATE.EL == EL2 then
    X[t, 64] = ID_AA64MMFR1_EL1;
elsif PSTATE.EL == EL3 then
    X[t, 64] = ID_AA64MMFR1_EL1;
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>

      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>30/03/2023 19:05; 997dd0cf3258cacf72aa7cf7a885f19a4758c3af</timestamp>
</register_page>