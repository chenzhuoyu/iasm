<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register is_register="True" is_internal="False" is_banked="False" is_stub_entry="False">
      <reg_short_name>GITS_BASER&lt;n&gt;</reg_short_name>
        
        <reg_long_name>ITS Translation Table Descriptors</reg_long_name>



      
          <reg_array>
              <reg_array_start>0</reg_array_start>
              <reg_array_end>7</reg_array_end>
         </reg_array>
      
  <reg_address
      external_access="False"
    mem_map_access="True"
      power_domain="None"
  >
    <reg_component>GIC ITS control</reg_component>
    <reg_offset><hexnumber>0x0100</hexnumber> + (8 * n)</reg_offset>
    <reg_instance>GITS_BASER&lt;n&gt;</reg_instance>
    <reg_access>
      
        
      <reg_access_state>
          <reg_access_type>RW</reg_access_type>
      </reg_access_state>
    </reg_access>
</reg_address>



          <reg_reset_value></reg_reset_value>

      <reg_mappings>
        




      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>Specifies the base address and size of the ITS translation tables.</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
            <reg_group>GIC ITS registers</reg_group>
      </reg_groups>
      <reg_configuration>
        
    
      <configuration_text>
        <para>A copy of this register is provided for each ITS translation table.</para>

      </configuration_text>
      <configuration_text>
        <para>Bits [63:32] and bits [31:0] are accessible independently.</para>

      </configuration_text>
      <configuration_text>
        <para>A maximum of 8 GITS_BASER&lt;n&gt; registers can be provided. Unimplemented registers are <arm-defined-word>RES0</arm-defined-word>.</para>

      </configuration_text>
      <configuration_text>
        <para>When <register_link state="ext" id="ext-gits_ctlr.xml">GITS_CTLR</register_link>.Enabled == 1 or <register_link state="ext" id="ext-gits_ctlr.xml">GITS_CTLR</register_link>.Quiescent == 0, writing this register is <arm-defined-word>UNPREDICTABLE</arm-defined-word>.</para>
      </configuration_text>

      </reg_configuration>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>GITS_BASER&lt;n&gt; is a 64-bit register.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        






<fields id="fieldset_0" length="64">
  <text_before_fields/>
  <field id="fieldset_0-63_63" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>Valid</field_name>
    <field_msb>63</field_msb>
    <field_lsb>63</field_lsb>
    <rel_range>63</rel_range>
    <field_description order="before">
      <para>Indicates whether software has allocated memory for the translation table:</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description><para>No memory is allocated for the translation table. The ITS discards any writes to the interrupt translation page when either:</para>
<list type="unordered">
<listitem><content>GITS_BASER&lt;n&gt;.Type specifies any valid table entry type other than interrupt collections, that is, any value other than <binarynumber>0b100</binarynumber>.</content>
</listitem><listitem><content>GITS_BASER&lt;n&gt;.Type specifies an interrupt collection and <register_link state="ext" id="ext-gits_typer.xml">GITS_TYPER</register_link>.HCC == 0.</content>
</listitem></list></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>Memory is allocated to the translation table.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="GIC">
        <field_reset_number>0</field_reset_number>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_0-62_62" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>Indirect</field_name>
    <field_msb>62</field_msb>
    <field_lsb>62</field_lsb>
    <rel_range>62</rel_range>
    <field_description order="before">
      <para>This field indicates whether an implemented register specifies a single, flat table or a two-level table where the first level contains a list of descriptors.</para>
    </field_description>
    <field_description order="after"><para>For more information, see <xref browsertext="'The ITS tables' in ARMÂ® Generic Interrupt Controller Architecture Specification, GIC architecture version 3.0 and version 4.0 (ARM IHI 0069)" filename="AS_message_based_and_locality_specific_peripheral_interrupts.fm" linkend="CHDJFHAH"/>.</para>
<para>This field is RAZ/WI for GIC implementations that only support flat tables. If the maximum width of the scaling factor that is identified by GITS_BASER&lt;n&gt;.Type and the smallest page size that is supported result in a single level table that requires multiple pages, then implementing this bit as RAZ/WI is DEPRECATED.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>Single Level. The Size field indicates the number of pages used by the ITS to store data associated with each table entry.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>Two Level. The Size field indicates the number of pages which contain an array of 64-bit descriptors to pages that are used to store the data associated with each table entry. A little endian memory order model is used.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="GIC">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_0-61_59" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>InnerCache</field_name>
    <field_msb>61</field_msb>
    <field_lsb>59</field_lsb>
    <rel_range>61:59</rel_range>
    <field_description order="before">
      <para>Indicates the Inner Cacheability attributes of accesses to the table. The possible values of this field are:</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b000</field_value>
        <field_value_description>
          <para>Device-nGnRnE.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b001</field_value>
        <field_value_description>
          <para>Normal Inner Non-cacheable.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b010</field_value>
        <field_value_description>
          <para>Normal Inner Cacheable Read-allocate, Write-through.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b011</field_value>
        <field_value_description>
          <para>Normal Inner Cacheable Read-allocate, Write-back.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b100</field_value>
        <field_value_description>
          <para>Normal Inner Cacheable Write-allocate, Write-through.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b101</field_value>
        <field_value_description>
          <para>Normal Inner Cacheable Write-allocate, Write-back.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b110</field_value>
        <field_value_description>
          <para>Normal Inner Cacheable Read-allocate, Write-allocate, Write-through.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b111</field_value>
        <field_value_description>
          <para>Normal Inner Cacheable Read-allocate, Write-allocate, Write-back.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="GIC">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_0-58_56" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>Type</field_name>
    <field_msb>58</field_msb>
    <field_lsb>56</field_lsb>
    <rel_range>58:56</rel_range>
    <field_description order="before">
      <para>Read only. Specifies the type of entity that requires entries in the corresponding translation table. The possible values of the field are:</para>
    </field_description>
    <field_description order="after"><para>Other values are reserved.</para>
<para>For FEAT_GICv4p1, the registers are allocated as follows:</para>
<list type="unordered">
<listitem><content>
<para>GITS_BASER0.Type is <binarynumber>0b001</binarynumber> (Device).</para>
</content>
</listitem><listitem><content>
<para>GITS_BASER1.Type is either <binarynumber>0b100</binarynumber> (Collection Table) or <binarynumber>0b000</binarynumber> (Unimplemented).</para>
</content>
</listitem><listitem><content>
<para>GITS_BASER2.Type is either <binarynumber>0b010</binarynumber> (vPE) or <binarynumber>0b000</binarynumber> (Unimplemented).</para>
</content>
</listitem><listitem><content>
<para>GITS_BASER&lt;n&gt;.Type, where 'n' is in the range 3 to 7, is <binarynumber>0b000</binarynumber> (Unimplemented).</para>
</content>
</listitem></list>
<para>For FEAT_GICv3, FEAT_GICv3p1, and FEAT_GICv4, Arm recommends that the GITS_BASER&lt;n&gt; use the same allocations.</para>
<para>Other allocations of Type values are deprecated.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b000</field_value>
        <field_value_description>
          <para>Unimplemented. This register does not correspond to a translation table.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b001</field_value>
        <field_value_description>
          <para>Devices. This register corresponds to a translation table that scales with the width of the DeviceID. Only a single GITS_BASER&lt;n&gt; register reports this type.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b010</field_value>
        <field_value_description>
          <para>vPEs. FEAT_GICv4 only. This register corresponds to a translation table that scales with the number of vPEs in the system. The translation table requires (ENTRY_SIZE * N) bytes of memory, where N is the number of vPEs in the system. Only a single GITS_BASER&lt;n&gt; register reports this type.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b100</field_value>
        <field_value_description>
          <para>Interrupt collections. This register corresponds to a translation table that scales with the number of interrupt collections in the system. The translation table requires (ENTRY_SIZE * N) bytes of memory, where N is the number of interrupt collections. Not more than one GITS_BASER&lt;n&gt; register will report this type.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <field id="fieldset_0-55_53" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>OuterCache</field_name>
    <field_msb>55</field_msb>
    <field_lsb>53</field_lsb>
    <rel_range>55:53</rel_range>
    <field_description order="before">
      <para>Indicates the Outer Cacheability attributes of accesses to the table. The possible values of this field are:</para>
    </field_description>
    <field_description order="after">
      <para>It is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> whether this field has a fixed value or can be programmed by software. Implementing this field with a fixed value is deprecated.</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b000</field_value>
        <field_value_description>
          <para>Memory type defined in InnerCache field. For Normal memory, Outer Cacheability is the same as Inner Cacheability.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b001</field_value>
        <field_value_description>
          <para>Normal Outer Non-cacheable.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b010</field_value>
        <field_value_description>
          <para>Normal Outer Cacheable Read-allocate, Write-through.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b011</field_value>
        <field_value_description>
          <para>Normal Outer Cacheable Read-allocate, Write-back.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b100</field_value>
        <field_value_description>
          <para>Normal Outer Cacheable Write-allocate, Write-through.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b101</field_value>
        <field_value_description>
          <para>Normal Outer Cacheable Write-allocate, Write-back.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b110</field_value>
        <field_value_description>
          <para>Normal Outer Cacheable Read-allocate, Write-allocate, Write-through.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b111</field_value>
        <field_value_description>
          <para>Normal Outer Cacheable Read-allocate, Write-allocate, Write-back.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="GIC">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_0-52_48" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>Entry_Size</field_name>
    <field_msb>52</field_msb>
    <field_lsb>48</field_lsb>
    <rel_range>52:48</rel_range>
    <field_description order="before">
      <para>Read-only. Specifies the number of bytes per translation table entry, minus one.</para>
    </field_description>
  </field>
  <field id="fieldset_0-47_12" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>Physical_Address</field_name>
    <field_msb>47</field_msb>
    <field_lsb>12</field_lsb>
    <rel_range>47:12</rel_range>
    <field_description order="before"><para>Physical Address. When Page_Size is 4KB or 16KB:</para>
<list type="unordered">
<listitem><content>Bits [51:48] of the base physical address are zero.</content>
</listitem><listitem><content>This field provides bits[47:12] of the base physical address of the table.</content>
</listitem><listitem><content>Bits[11:0] of the base physical address are zero.</content>
</listitem><listitem><content>The address must be aligned to the size specified in the Page Size field. Otherwise the effect is <arm-defined-word>CONSTRAINED UNPREDICTABLE</arm-defined-word>, and can be one of the following:<list type="unordered">
<listitem><content>Bits[X:12], where X is derived from the page size, are treated as zero.</content>
</listitem><listitem><content>The value of bits[X:12] are used when calculating the address of a table access.</content>
</listitem></list>
</content>
</listitem></list>
<para>When Page_Size is 64KB:</para>
<list type="unordered">
<listitem><content>Bits[47:16] of the register provide bits[47:16] of the base physical address of the table.</content>
</listitem><listitem><content>Bits[15:12] of the register provide bits[51:48] of the base physical address of the table.</content>
</listitem><listitem><content>Bits[15:0] of the base physical address are 0.</content>
</listitem></list>
<para>In implementations that support fewer than 52 bits of physical address, any unimplemented upper bits might be RAZ/WI.</para></field_description>
    <field_resets>
      <field_reset reset_type="GIC">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_0-11_10" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>Shareability</field_name>
    <field_msb>11</field_msb>
    <field_lsb>10</field_lsb>
    <rel_range>11:10</rel_range>
    <field_description order="before">
      <para>Indicates the Shareability attributes of accesses to the table. The possible values of this field are:</para>
    </field_description>
    <field_description order="after">
      <para>It is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> whether this field has a fixed value or can be programmed by software. Implementing this field with a fixed value is deprecated.</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b00</field_value>
        <field_value_description>
          <para>Non-shareable.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b01</field_value>
        <field_value_description>
          <para>Inner Shareable.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b10</field_value>
        <field_value_description>
          <para>Outer Shareable.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b11</field_value>
        <field_value_description>
          <para>Reserved. Treated as <binarynumber>0b00</binarynumber>.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="GIC">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_0-9_8" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>Page_Size</field_name>
    <field_msb>9</field_msb>
    <field_lsb>8</field_lsb>
    <rel_range>9:8</rel_range>
    <field_description order="before">
      <para>The size of page that the translation table uses:</para>
    </field_description>
    <field_description order="after">
      <note>
        <para>If the GIC implementation supports only a single, fixed page size, this field might be RO.</para>
      </note>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b00</field_value>
        <field_value_description>
          <para>4KB.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b01</field_value>
        <field_value_description>
          <para>16KB.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b10</field_value>
        <field_value_description>
          <para>64KB.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b11</field_value>
        <field_value_description>
          <para>Reserved. Treated as <binarynumber>0b10</binarynumber>.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="GIC">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_0-7_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>Size</field_name>
    <field_msb>7</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>7:0</rel_range>
    <field_description order="before"><para>The number of pages of physical memory allocated to the table, minus one. GITS_BASER&lt;n&gt;.Page_Size specifies the size of each page.</para>
<para>If GITS_BASER&lt;n&gt;.Type == 0, this field is RAZ/WI.</para></field_description>
    <field_resets>
      <field_reset reset_type="GIC">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <text_after_fields/>
</fields>




    
<reg_fieldset length="64">
  <fieldat id="fieldset_0-63_63" msb="63" lsb="63"/>
  <fieldat id="fieldset_0-62_62" msb="62" lsb="62"/>
  <fieldat id="fieldset_0-61_59" msb="61" lsb="59"/>
  <fieldat id="fieldset_0-58_56" msb="58" lsb="56"/>
  <fieldat id="fieldset_0-55_53" msb="55" lsb="53"/>
  <fieldat id="fieldset_0-52_48" msb="52" lsb="48"/>
  <fieldat id="fieldset_0-47_12" msb="47" lsb="12"/>
  <fieldat id="fieldset_0-11_10" msb="11" lsb="10"/>
  <fieldat id="fieldset_0-9_8" msb="9" lsb="8"/>
  <fieldat id="fieldset_0-7_0" msb="7" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>
        <reg_variables>
              <reg_variable variable="n" max="7"/>
        </reg_variables>

      <access_mechanisms>
          







      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>30/03/2023 19:06; 997dd0cf3258cacf72aa7cf7a885f19a4758c3af</timestamp>
</register_page>