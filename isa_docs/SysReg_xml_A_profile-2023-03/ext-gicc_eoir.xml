<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register is_register="True" is_internal="False" is_banked="False" is_stub_entry="False">
      <reg_short_name>GICC_EOIR</reg_short_name>
        
        <reg_long_name>CPU Interface End Of Interrupt Register</reg_long_name>



      
        <reg_condition otherwise="RES0">when FEAT_GICv3_LEGACY is implemented</reg_condition>
      
  <reg_address
      external_access="False"
    mem_map_access="True"
      power_domain="None"
  >
    <reg_component>GIC CPU interface</reg_component>
    <reg_offset><hexnumber>0x0010</hexnumber></reg_offset>
    <reg_instance>GICC_EOIR</reg_instance>
    <reg_access>
      
        
      <reg_access_state>
          <reg_access_level>When GICD_CTLR.DS == 0</reg_access_level>
          <reg_access_type>WO</reg_access_type>
      </reg_access_state>
        
      <reg_access_state>
          <reg_access_level>When an access is Secure</reg_access_level>
          <reg_access_type>WO</reg_access_type>
      </reg_access_state>
        
      <reg_access_state>
          <reg_access_level>When an access is Non-secure</reg_access_level>
          <reg_access_type>WO</reg_access_type>
      </reg_access_state>
    </reg_access>
</reg_address>



          <reg_reset_value></reg_reset_value>

      <reg_mappings>
        




      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>A write to this register performs priority drop for the specified interrupt and, if the appropriate <register_link state="ext" id="ext-gicc_ctlr.xml">GICC_CTLR</register_link>.EOImodeS or <register_link state="ext" id="ext-gicc_ctlr.xml">GICC_CTLR</register_link>.EOImodeNS field == 0, also deactivates the interrupt.</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
            <reg_group>GIC physical CPU interface registers</reg_group>
      </reg_groups>
      <reg_configuration>
        
    
      <configuration_text>
        <para>If <register_link state="ext" id="ext-gicd_ctlr.xml">GICD_CTLR</register_link>.DS==0:</para>

      </configuration_text>
      <configuration_text>
        <list type="unordered">
<listitem><content>This register is Common.</content>
</listitem><listitem><content><register_link state="ext" id="ext-gicc_aeoir.xml">GICC_AEOIR</register_link> is an alias of the Non-secure view of this register.</content>
</listitem></list>

      </configuration_text>
      <configuration_text>
        <para>For Secure writes when <register_link state="ext" id="ext-gicd_ctlr.xml">GICD_CTLR</register_link>.DS==0, or for Secure and Non-secure writes when <register_link state="ext" id="ext-gicd_ctlr.xml">GICD_CTLR</register_link>.DS==1, the register provides functionality for Group 0 interrupts.</para>

      </configuration_text>
      <configuration_text>
        <para>For Non-secure writes when <register_link state="ext" id="ext-gicd_ctlr.xml">GICD_CTLR</register_link>.DS==1, the register provides functionality for Group 1 interrupts.</para>
      </configuration_text>

      </reg_configuration>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>GICC_EOIR is a 32-bit register.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        






<fields id="fieldset_0" length="32">
  <text_before_fields/>
  <field id="fieldset_0-31_24" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0">
    <field_msb>31</field_msb>
    <field_lsb>24</field_lsb>
    <rel_range>31:24</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
  </field>
  <field id="fieldset_0-23_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>INTID</field_name>
    <field_msb>23</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>23:0</rel_range>
    <field_description order="before"><para>The INTID of the signaled interrupt.</para>
<note><para>INTIDs 1020-1023 are reserved and convey additional information such as spurious interrupts.</para></note><para>When affinity routing is not enabled:</para>
<list type="unordered">
<listitem><content>Bits [23:13] are <arm-defined-word>RES0</arm-defined-word>.</content>
</listitem><listitem><content>For SGIs, bits [12:10] identify the CPU interface corresponding to the source PE. For all other interrupts these bits are <arm-defined-word>RES0</arm-defined-word>.</content>
</listitem></list></field_description>
  </field>
  <text_after_fields><para>For every read of a valid INTID from <register_link state="ext" id="ext-gicc_iar.xml">GICC_IAR</register_link>, the connected PE must perform a matching write to GICC_EOIR. The value written to GICC_EOIR must be the INTID from <register_link state="ext" id="ext-gicc_iar.xml">GICC_IAR</register_link>. Reads of INTIDs 1020-1023 do not require matching writes.</para>
<note><para>Arm recommends that software preserves the entire register value read from <register_link state="ext" id="ext-gicc_iar.xml">GICC_IAR</register_link>, and writes that value back to GICC_EOIR on completion of interrupt processing.</para></note><para>For nested interrupts, the order of writes to this register must be the reverse of the order of interrupt acknowledgement. Behavior is <arm-defined-word>UNPREDICTABLE</arm-defined-word> if:</para>
<list type="unordered">
<listitem><content>This ordering constraint is not maintained.</content>
</listitem><listitem><content>The value written to this register does not match an active interrupt, or the ID of a spurious interrupt.</content>
</listitem><listitem><content>The value written to this register does not match the last valid interrupt value read from <register_link state="ext" id="ext-gicc_iar.xml">GICC_IAR</register_link>.</content>
</listitem></list>
<para>For general information about the effect of writes to end of interrupt registers, and about the possible separation of the priority drop and interrupt deactivate operations, see <xref browsertext="'Interrupt lifecycle' in ARMÂ® Generic Interrupt Controller Architecture Specification, GIC architecture version 3.0 and version 4.0 (ARM IHI 0069)" filename="AS_interrupt_handling_and_prioritization.recover.fm" linkend="CJHGIJCC"/>.</para>
<para>If <register_link state="ext" id="ext-gicd_ctlr.xml">GICD_CTLR</register_link>.DS==0:</para>
<list type="unordered">
<listitem><content><register_link state="ext" id="ext-gicc_ctlr.xml">GICC_CTLR</register_link>.EOImodeS controls the behavior of Secure accesses to GICC_EOIR and <register_link state="ext" id="ext-gicc_aeoir.xml">GICC_AEOIR</register_link>.</content>
</listitem><listitem><content><register_link state="ext" id="ext-gicc_ctlr.xml">GICC_CTLR</register_link>.EOImodeNS controls the behavior of Non-secure accesses to GICC_EOIR and <register_link state="ext" id="ext-gicc_aeoir.xml">GICC_AEOIR</register_link>.</content>
</listitem></list></text_after_fields>
</fields>




    
<reg_fieldset length="32">
  <fieldat id="fieldset_0-31_24" msb="31" lsb="24"/>
  <fieldat id="fieldset_0-23_0" msb="23" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>

      <access_mechanisms>
          


  
    
      <access_permission_text>
        <para>The following writes must be ignored:</para>

      </access_permission_text>
      <access_permission_text>
        <list type="unordered">
<listitem><content>Writes of INTIDs 1020-1023.</content>
</listitem><listitem><content>Secure writes corresponding to Group 1 interrupts. In systems that support system error generation, an implementation might generate a system error.  In this case, GIC behavior is predictable, and the highest Secure active priority (in the Secure copy of <register_link state="ext" id="ext-gicc_aprn.xml">GICC_APR&lt;n&gt;</register_link>) will be reset if the highest active priority is Secure.  System behavior is <arm-defined-word>UNPREDICTABLE</arm-defined-word>.</content>
</listitem><listitem><content>Non-secure writes corresponding to Group 0 interrupts when <register_link state="ext" id="ext-gicc_ctlr.xml">GICC_CTLR</register_link>.EOImodeS == 1.  In systems that support system error generation, an implementation might generate a system error. In this case, GIC behavior is predictable, and the highest Non-secure active priority (in the Non-secure copy of <register_link state="ext" id="ext-gicc_aprn.xml">GICC_APR&lt;n&gt;</register_link>) will be reset if the highest active priority is Non-secure. System behavior is <arm-defined-word>UNPREDICTABLE</arm-defined-word>.</content>
</listitem></list>

      </access_permission_text>
      <access_permission_text>
        <para>This register is used only when System register access is not enabled. When System register access is enabled:</para>

      </access_permission_text>
      <access_permission_text>
        <list type="unordered">
<listitem><content>For AArch32 implementations, <register_link state="AArch32" id="AArch32-icc_eoir0.xml">ICC_EOIR0</register_link> and <register_link state="AArch32" id="AArch32-icc_eoir1.xml">ICC_EOIR1</register_link> provide equivalent functionality.</content>
</listitem><listitem><content>For AArch64 implementations, <register_link state="AArch64" id="AArch64-icc_eoir0_el1.xml">ICC_EOIR0_EL1</register_link> and <register_link state="AArch64" id="AArch64-icc_eoir1_el1.xml">ICC_EOIR1_EL1</register_link> provide equivalent functionality.</content>
</listitem></list>

      </access_permission_text>
      <access_permission_text>
        <para>When affinity routing is enabled for a Security state, it is a programming error to use memory-mapped registers to access the GIC.</para>
      </access_permission_text>






      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>30/03/2023 19:07; 997dd0cf3258cacf72aa7cf7a885f19a4758c3af</timestamp>
</register_page>