<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register execution_state="AArch64" is_register="True" is_internal="True" is_banked="False" is_stub_entry="False">
      <reg_short_name>MDRAR_EL1</reg_short_name>
        
        <reg_long_name>Monitor Debug ROM Address Register</reg_long_name>



      
      



          <reg_reset_value></reg_reset_value>

      <reg_mappings>
        



      
      <reg_mapping>
        
  

    

    <mapped_name filename="AArch32-dbgdrar.xml">DBGDRAR</mapped_name>
  <mapped_type>Architectural</mapped_type>
      <mapped_execution_state>AArch32</mapped_execution_state>
    <mapped_from_startbit>63</mapped_from_startbit>
    <mapped_from_endbit>0</mapped_from_endbit>
    <mapped_to_startbit>63</mapped_to_startbit>
    <mapped_to_endbit>0</mapped_to_endbit>
    <mapped_from_rangeset output="63:0">
      <range>
        <msb>63</msb>
        <lsb>0</lsb>
      </range>
    </mapped_from_rangeset>
    <mapped_to_rangeset output="63:0">
      <range>
        <msb>63</msb>
        <lsb>0</lsb>
      </range>
    </mapped_to_rangeset>

      </reg_mapping>

      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>Defines the base physical address of a 4KB-aligned memory-mapped debug component, usually a ROM table that locates and describes the memory-mapped debug components in the system. Armv8 deprecates any use of this register.</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
          <reg_group>Debug registers</reg_group>
      </reg_groups>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>MDRAR_EL1 is a 64-bit register.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        






<fields id="fieldset_0" length="64">
  <text_before_fields/>
  <field id="fieldset_0-63_56" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0">
    <field_msb>63</field_msb>
    <field_lsb>56</field_lsb>
    <rel_range>63:56</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
  </field>
  <field id="fieldset_0-55_12" has_partial_fieldset="True" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>ROMADDR</field_name>
    <field_msb>55</field_msb>
    <field_lsb>12</field_lsb>
    <rel_range>55:12</rel_range>
    <field_description order="before"/>
    <partial_fieldset>
      <fields id="fieldset_0-55_12_0" length="44">
        <fields_condition>When FEAT_D128 is implemented and MDRAR_EL1.Valid != 0b00</fields_condition>
        <text_before_fields/>
        <field id="fieldset_0-55_12_0-43_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
          <field_name>ROMADDR</field_name>
          <field_msb>43</field_msb>
          <field_lsb>0</field_lsb>
          <rel_range>43:0</rel_range>
          <field_description order="before"><para>Bits [55:12] of the ROM table physical address.</para>
<para>Bits [11:0] of the ROM table physical address are zero.</para>
<para>For implementations with fewer than 56 physical address bits, the corresponding upper bits of this field are <arm-defined-word>RES0</arm-defined-word></para>
<para>In an implementation that includes EL3, ROMADDR is an address in Non-secure PA space. It is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> whether the ROM table is also accessible in Secure PA space. If FEAT_RME is implemented, it is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> whether the ROM table is also accessible in the Root or Realm PA spaces.</para>
<para>Arm strongly recommends that bits ROMADDR[(PAsize-1):32] are zero in any system where the implementation only supports execution in AArch32 state.</para></field_description>
        </field>
        <text_after_fields/>
      </fields>
      <reg_fieldset length="44">
        <fields_condition>When FEAT_D128 is implemented and MDRAR_EL1.Valid != 0b00</fields_condition>
        <fieldat id="fieldset_0-55_12_0-43_0" msb="43" lsb="0"/>
      </reg_fieldset>
    </partial_fieldset>
    <partial_fieldset>
      <fields id="fieldset_0-55_12_1" length="44">
        <fields_condition>When FEAT_D128 is not implemented, FEAT_LPA is implemented and MDRAR_EL1.Valid != 0b00</fields_condition>
        <text_before_fields/>
        <field id="fieldset_0-55_12_1-43_40" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0">
          <field_msb>43</field_msb>
          <field_lsb>40</field_lsb>
          <rel_range>43:40</rel_range>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
        </field>
        <field id="fieldset_0-55_12_1-39_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
          <field_name>ROMADDR</field_name>
          <field_msb>39</field_msb>
          <field_lsb>0</field_lsb>
          <rel_range>39:0</rel_range>
          <field_description order="before"><para>Bits [51:12] of the ROM table physical address.</para>
<para>Bits [11:0] of the ROM table physical address are zero.</para>
<para>For implementations with fewer than 52 physical address bits, the corresponding upper bits of this field are <arm-defined-word>RES0</arm-defined-word></para>
<para>In an implementation that includes EL3, ROMADDR is an address in Non-secure PA space. It is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> whether the ROM table is also accessible in Secure PA space. If FEAT_RME is implemented, it is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> whether the ROM table is also accessible in the Root or Realm PA spaces.</para>
<para>Arm strongly recommends that bits ROMADDR[(PAsize-1):32] are zero in any system where the implementation only supports execution in AArch32 state.</para></field_description>
        </field>
        <text_after_fields/>
      </fields>
      <reg_fieldset length="44">
        <fields_condition>When FEAT_D128 is not implemented, FEAT_LPA is implemented and MDRAR_EL1.Valid != 0b00</fields_condition>
        <fieldat id="fieldset_0-55_12_1-43_40" msb="43" lsb="40"/>
        <fieldat id="fieldset_0-55_12_1-39_0" msb="39" lsb="0"/>
      </reg_fieldset>
    </partial_fieldset>
    <partial_fieldset>
      <fields id="fieldset_0-55_12_2" length="44">
        <fields_condition>When FEAT_D128 is not implemented, FEAT_LPA is not implemented and MDRAR_EL1.Valid != 0b00</fields_condition>
        <text_before_fields/>
        <field id="fieldset_0-55_12_2-43_36" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0">
          <field_msb>43</field_msb>
          <field_lsb>36</field_lsb>
          <rel_range>43:36</rel_range>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
          </field_description>
        </field>
        <field id="fieldset_0-55_12_2-35_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
          <field_name>ROMADDR</field_name>
          <field_msb>35</field_msb>
          <field_lsb>0</field_lsb>
          <rel_range>35:0</rel_range>
          <field_description order="before"><para>Bits [39:12] of the ROM table physical address.</para>
<para>Bits [11:0] of the ROM table physical address are zero.</para>
<para>For implementations with fewer than 48 physical address bits, the corresponding upper bits of this field are <arm-defined-word>RES0</arm-defined-word></para>
<para>In an implementation that includes EL3, ROMADDR is an address in Non-secure PA space. It is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> whether the ROM table is also accessible in Secure PA space. If FEAT_RME is implemented, it is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> whether the ROM table is also accessible in Root or Realm PA spaces.</para>
<para>Arm strongly recommends that bits ROMADDR[(PAsize-1):32] are zero in any system where the implementation only supports execution in AArch32 state.</para></field_description>
        </field>
        <text_after_fields/>
      </fields>
      <reg_fieldset length="44">
        <fields_condition>When FEAT_D128 is not implemented, FEAT_LPA is not implemented and MDRAR_EL1.Valid != 0b00</fields_condition>
        <fieldat id="fieldset_0-55_12_2-43_36" msb="43" lsb="36"/>
        <fieldat id="fieldset_0-55_12_2-35_0" msb="35" lsb="0"/>
      </reg_fieldset>
    </partial_fieldset>
    <partial_fieldset>
      <fields id="fieldset_0-55_12_3" length="44">
        <fields_condition>When MDRAR_EL1.Valid == 0b00</fields_condition>
        <text_before_fields/>
        <field id="fieldset_0-55_12_3-43_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="UNKNOWN">
          <field_msb>43</field_msb>
          <field_lsb>0</field_lsb>
          <rel_range>43:0</rel_range>
          <field_description order="before">
            <para>Reserved, <arm-defined-word>UNKNOWN</arm-defined-word>.</para>
          </field_description>
        </field>
        <text_after_fields/>
      </fields>
      <reg_fieldset length="44">
        <fields_condition>When MDRAR_EL1.Valid == 0b00</fields_condition>
        <fieldat id="fieldset_0-55_12_3-43_0" msb="43" lsb="0"/>
      </reg_fieldset>
    </partial_fieldset>
  </field>
  <field id="fieldset_0-11_2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0">
    <field_msb>11</field_msb>
    <field_lsb>2</field_lsb>
    <rel_range>11:2</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
  </field>
  <field id="fieldset_0-1_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>Valid</field_name>
    <field_msb>1</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>1:0</rel_range>
    <field_description order="before">
      <para>This field indicates whether the ROM Table address is valid.</para>
    </field_description>
    <field_description order="after"><para>Other values are reserved.</para>
<para>Arm recommends implementations set this field to zero.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b00</field_value>
        <field_value_description>
          <para>ROM Table address is not valid. Software must ignore ROMADDR.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b11</field_value>
        <field_value_description>
          <para>ROM Table address is valid.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <text_after_fields/>
</fields>




    
<reg_fieldset length="64">
  <fieldat id="fieldset_0-63_56" msb="63" lsb="56"/>
  <fieldat id="fieldset_0-55_12" msb="55" lsb="12"/>
  <fieldat id="fieldset_0-11_2" msb="11" lsb="2"/>
  <fieldat id="fieldset_0-1_0" msb="1" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>

      <access_mechanisms>
          






        
        <access_mechanism accessor="MRS MDRAR_EL1" type="SystemAccessor">
            <encoding>
            <access_instruction>MRS &lt;Xt&gt;, MDRAR_EL1</access_instruction>
                
                <enc n="op0" v="0b10"/>
                
                <enc n="op1" v="0b000"/>
                
                <enc n="CRn" v="0b0001"/>
                
                <enc n="CRm" v="0b0000"/>
                
                <enc n="op2" v="0b000"/>
            </encoding>
            <access_permission>
                <ps name="MRS" sections="1" secttype="access_permission">
                <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; MDCR_EL3.TDA == '1' then
        UNDEFINED;
    elsif EL2Enabled() &amp;&amp; MDCR_EL2.&lt;TDE,TDRA&gt; != '00' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif HaveEL(EL3) &amp;&amp; MDCR_EL3.TDA == '1' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        X[t, 64] = MDRAR_EL1;
elsif PSTATE.EL == EL2 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; MDCR_EL3.TDA == '1' then
        UNDEFINED;
    elsif HaveEL(EL3) &amp;&amp; MDCR_EL3.TDA == '1' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        X[t, 64] = MDRAR_EL1;
elsif PSTATE.EL == EL3 then
    X[t, 64] = MDRAR_EL1;
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>

      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>30/03/2023 19:06; 997dd0cf3258cacf72aa7cf7a885f19a4758c3af</timestamp>
</register_page>