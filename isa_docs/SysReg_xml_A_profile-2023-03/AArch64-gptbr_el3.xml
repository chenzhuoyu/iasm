<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register execution_state="AArch64" is_register="True" is_internal="True" is_banked="False" is_stub_entry="False">
      <reg_short_name>GPTBR_EL3</reg_short_name>
        
        <reg_long_name>Granule Protection Table Base Register</reg_long_name>



      
        <reg_condition otherwise="UNDEFINED">when FEAT_RME is implemented</reg_condition>
      



          <reg_reset_value></reg_reset_value>

      <reg_mappings>
        




      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>The control register for Granule Protection Table base address.</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
            <reg_group>Virtual memory control registers</reg_group>
            <reg_group>Root Security state registers</reg_group>
      </reg_groups>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>GPTBR_EL3 is a 64-bit register.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        






<fields id="fieldset_0" length="64">
  <text_before_fields/>
  <field id="fieldset_0-63_40" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0">
    <field_msb>63</field_msb>
    <field_lsb>40</field_lsb>
    <rel_range>63:40</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
  </field>
  <field id="fieldset_0-39_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>BADDR</field_name>
    <field_msb>39</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>39:0</rel_range>
    <field_description order="before"><para>Base address for the level 0 GPT.</para>
<para>This field represents bits [51:12] of the level 0 GPT base address.</para></field_description>
    <field_description order="after"><para>The level 0 GPT is aligned in memory to the greater of:</para>
<list type="unordered">
<listitem><content>The size of the level 0 GPT in bytes.</content>
</listitem><listitem><content>4KB.</content>
</listitem></list>
<para>Bits [x:0] of the base address are treated as zero, where:</para>
<list type="unordered">
<listitem><content>x = Max(pps - l0gptsz + 2, 11)</content>
</listitem><listitem><content>pps is derived from <register_link state="AArch64" id="AArch64-gpccr_el3.xml">GPCCR_EL3</register_link>.PPS as follows:</content>
</listitem></list>
<table><tgroup cols="2"><thead><row><entry>GPCCR_EL3.PPS</entry><entry>pps</entry></row></thead><tbody><row><entry><binarynumber>0b000</binarynumber></entry><entry>32</entry></row><row><entry><binarynumber>0b001</binarynumber></entry><entry>36</entry></row><row><entry><binarynumber>0b010</binarynumber></entry><entry>40</entry></row><row><entry><binarynumber>0b011</binarynumber></entry><entry>42</entry></row><row><entry><binarynumber>0b100</binarynumber></entry><entry>44</entry></row><row><entry><binarynumber>0b101</binarynumber></entry><entry>48</entry></row><row><entry><binarynumber>0b110</binarynumber></entry><entry>52</entry></row></tbody></tgroup></table>
<list type="unordered">
<listitem><content>l0gptsz is derived from <register_link state="AArch64" id="AArch64-gpccr_el3.xml">GPCCR_EL3</register_link>.L0GPTSZ as follows:</content>
</listitem></list>
<table><tgroup cols="2"><thead><row><entry>GPCCR_EL3.L0GPTSZ</entry><entry>l0gptsz</entry></row></thead><tbody><row><entry><binarynumber>0b0000</binarynumber></entry><entry>30</entry></row><row><entry><binarynumber>0b0100</binarynumber></entry><entry>34</entry></row><row><entry><binarynumber>0b0110</binarynumber></entry><entry>36</entry></row><row><entry><binarynumber>0b1001</binarynumber></entry><entry>39</entry></row></tbody></tgroup></table>
<para>If x is greater than 11, then BADDR[x - 12:0] are <arm-defined-word>RES0</arm-defined-word>.</para></field_description>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <text_after_fields/>
</fields>




    
<reg_fieldset length="64">
  <fieldat id="fieldset_0-63_40" msb="63" lsb="40"/>
  <fieldat id="fieldset_0-39_0" msb="39" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>

      <access_mechanisms>
          






        
        <access_mechanism accessor="MRS GPTBR_EL3" type="SystemAccessor">
            <encoding>
            <access_instruction>MRS &lt;Xt&gt;, GPTBR_EL3</access_instruction>
                
                <enc n="op0" v="0b11"/>
                
                <enc n="op1" v="0b110"/>
                
                <enc n="CRn" v="0b0010"/>
                
                <enc n="CRm" v="0b0001"/>
                
                <enc n="op2" v="0b100"/>
            </encoding>
            <access_permission>
                <ps name="MRS" sections="1" secttype="access_permission">
                <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    UNDEFINED;
elsif PSTATE.EL == EL2 then
    UNDEFINED;
elsif PSTATE.EL == EL3 then
    X[t, 64] = GPTBR_EL3;
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>
        
        <access_mechanism accessor="MSRregister GPTBR_EL3" type="SystemAccessor">
            <encoding>
            <access_instruction>MSR GPTBR_EL3, &lt;Xt&gt;</access_instruction>
                
                <enc n="op0" v="0b11"/>
                
                <enc n="op1" v="0b110"/>
                
                <enc n="CRn" v="0b0010"/>
                
                <enc n="CRm" v="0b0001"/>
                
                <enc n="op2" v="0b100"/>
            </encoding>
            <access_permission>
                <ps name="MSRregister" sections="1" secttype="access_permission">
                <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    UNDEFINED;
elsif PSTATE.EL == EL2 then
    UNDEFINED;
elsif PSTATE.EL == EL3 then
    GPTBR_EL3 = X[t, 64];
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>

      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>30/03/2023 19:06; 997dd0cf3258cacf72aa7cf7a885f19a4758c3af</timestamp>
</register_page>