<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register execution_state="AArch64" is_register="True" is_internal="True" is_banked="False" is_stub_entry="False">
      <reg_short_name>ICC_SRE_EL2</reg_short_name>
        
        <reg_long_name>Interrupt Controller System Register Enable Register (EL2)</reg_long_name>



      
        <reg_condition otherwise="UNDEFINED">when FEAT_GICv3 is implemented and (EL2 is implemented or EL3 is implemented)</reg_condition>
      



          <reg_reset_value></reg_reset_value>

      <reg_mappings>
        



      
      <reg_mapping>
        
  

    

    <mapped_name filename="AArch32-icc_hsre.xml">ICC_HSRE</mapped_name>
  <mapped_type>Architectural</mapped_type>
      <mapped_execution_state>AArch32</mapped_execution_state>

      </reg_mapping>

      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>Controls whether the System register interface or the memory-mapped interface to the GIC CPU interface is used for EL2.</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
            <reg_group>GIC control registers</reg_group>
            <reg_group>GIC system registers</reg_group>
            <reg_group>Virtualization registers</reg_group>
      </reg_groups>
      <reg_configuration>
        
    
      <configuration_text>
        <para>If EL2 is not implemented, this register is <arm-defined-word>RES0</arm-defined-word> from EL3.</para>

      </configuration_text>
      <configuration_text>
        <para>This register has no effect if EL2 is not enabled in the current Security state.</para>
      </configuration_text>

      </reg_configuration>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>ICC_SRE_EL2 is a 64-bit register.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        






<fields id="fieldset_0" length="64">
  <text_before_fields/>
  <field id="fieldset_0-63_4" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0">
    <field_msb>63</field_msb>
    <field_lsb>4</field_lsb>
    <rel_range>63:4</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
  </field>
  <field id="fieldset_0-3_3" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>Enable</field_name>
    <field_msb>3</field_msb>
    <field_lsb>3</field_lsb>
    <rel_range>3</rel_range>
    <field_description order="before">
      <para>Enable. Enables lower Exception level access to <register_link state="AArch64" id="AArch64-icc_sre_el1.xml">ICC_SRE_EL1</register_link>.</para>
    </field_description>
    <field_description order="after"><para>If ICC_SRE_EL2.SRE is RAO/WI, an implementation is permitted to make the Enable bit RAO/WI.</para>
<para>If ICC_SRE_EL2.SRE is 0, the Enable bit behaves as 1 for all purposes other than reading the value of the bit.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>When EL2 is implemented and enabled in the current Security state, EL1 accesses to <register_link state="AArch64" id="AArch64-icc_sre_el1.xml">ICC_SRE_EL1</register_link> trap to EL2.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>EL1 accesses to <register_link state="AArch64" id="AArch64-icc_sre_el1.xml">ICC_SRE_EL1</register_link> do not trap to EL2.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_0-2_2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>DIB</field_name>
    <field_msb>2</field_msb>
    <field_lsb>2</field_lsb>
    <rel_range>2</rel_range>
    <field_description order="before">
      <para>Disable IRQ bypass.</para>
    </field_description>
    <field_description order="after"><para>If EL3 is implemented and <register_link state="ext" id="ext-gicd_ctlr.xml">GICD_CTLR</register_link>.DS is 0, this field is a read-only alias of <register_link state="AArch64" id="AArch64-icc_sre_el3.xml">ICC_SRE_EL3</register_link>.DIB.</para>
<para>If EL3 is implemented and <register_link state="ext" id="ext-gicd_ctlr.xml">GICD_CTLR</register_link>.DS is 1, this field is a read/write alias of <register_link state="AArch64" id="AArch64-icc_sre_el3.xml">ICC_SRE_EL3</register_link>.DIB.</para>
<para>In systems that do not support IRQ bypass, this bit is RAO/WI.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>IRQ bypass enabled.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>IRQ bypass disabled.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_number>0</field_reset_number>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_0-1_1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>DFB</field_name>
    <field_msb>1</field_msb>
    <field_lsb>1</field_lsb>
    <rel_range>1</rel_range>
    <field_description order="before">
      <para>Disable FIQ bypass.</para>
    </field_description>
    <field_description order="after"><para>If EL3 is implemented and <register_link state="ext" id="ext-gicd_ctlr.xml">GICD_CTLR</register_link>.DS is 0, this field is a read-only alias of <register_link state="AArch64" id="AArch64-icc_sre_el3.xml">ICC_SRE_EL3</register_link>.DFB.</para>
<para>If EL3 is implemented and <register_link state="ext" id="ext-gicd_ctlr.xml">GICD_CTLR</register_link>.DS is 1, this field is a read/write alias of <register_link state="AArch64" id="AArch64-icc_sre_el3.xml">ICC_SRE_EL3</register_link>.DFB.</para>
<para>In systems that do not support FIQ bypass, this bit is RAO/WI.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>FIQ bypass enabled.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>FIQ bypass disabled.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_number>0</field_reset_number>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_0-0_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>SRE</field_name>
    <field_msb>0</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>System Register Enable.</para>
    </field_description>
    <field_description order="after"><para>If software changes this bit from 1 to 0, the results are <arm-defined-word>UNPREDICTABLE</arm-defined-word>.</para>
<para>If an implementation supports only a System register interface to the GIC CPU interface, this bit is RAO/WI.</para>
<para>If EL3 is implemented and <register_link state="AArch64" id="AArch64-icc_sre_el3.xml">ICC_SRE_EL3</register_link>.SRE==0 this bit is RAZ/WI. If <register_link state="AArch64" id="AArch64-icc_sre_el3.xml">ICC_SRE_EL3</register_link>.SRE is changed from zero to one, this bit becomes <arm-defined-word>UNKNOWN</arm-defined-word>.</para>
<para>If Realm Management Extension is implemented, this field is RAO/WI.</para>
<para>FEAT_GICv3 implementations that do not require GICv2 compatibility might choose to make this bit RAO/WI, but this is only allowed if ICC_SRE_EL3.SRE is also RAO/WI.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>The memory-mapped interface must be used. Access at EL2 to any ICH_* or ICC_* register other than <register_link state="AArch64" id="AArch64-icc_sre_el1.xml">ICC_SRE_EL1</register_link> or ICC_SRE_EL2, is trapped to EL2.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>The System register interface to the ICH_* registers and the EL1 and EL2 ICC_* registers is enabled for EL2.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_number>0</field_reset_number>
      </field_reset>
    </field_resets>
  </field>
  <text_after_fields/>
</fields>




    
<reg_fieldset length="64">
  <fieldat id="fieldset_0-63_4" msb="63" lsb="4"/>
  <fieldat id="fieldset_0-3_3" msb="3" lsb="3"/>
  <fieldat id="fieldset_0-2_2" msb="2" lsb="2"/>
  <fieldat id="fieldset_0-1_1" msb="1" lsb="1"/>
  <fieldat id="fieldset_0-0_0" msb="0" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>

      <access_mechanisms>
          


  
    
      <access_permission_text>
        <para>Execution with <register_link state="AArch64" id="AArch64-icc_sre_el2.xml">ICC_SRE_EL2</register_link>.SRE set to 0 might make some System registers <arm-defined-word>UNKNOWN</arm-defined-word>.</para>
      </access_permission_text>





        
        <access_mechanism accessor="MRS ICC_SRE_EL2" type="SystemAccessor">
            <encoding>
            <access_instruction>MRS &lt;Xt&gt;, ICC_SRE_EL2</access_instruction>
                
                <enc n="op0" v="0b11"/>
                
                <enc n="op1" v="0b100"/>
                
                <enc n="CRn" v="0b1100"/>
                
                <enc n="CRm" v="0b1001"/>
                
                <enc n="op2" v="0b101"/>
            </encoding>
            <access_permission>
                <ps name="MRS" sections="1" secttype="access_permission">
                <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; HCR_EL2.NV == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    else
        UNDEFINED;
elsif PSTATE.EL == EL2 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; ICC_SRE_EL3.Enable == '0' then
        UNDEFINED;
    elsif HaveEL(EL3) &amp;&amp; ICC_SRE_EL3.Enable == '0' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        X[t, 64] = ICC_SRE_EL2;
elsif PSTATE.EL == EL3 then
    if !EL2Enabled() then
        UNDEFINED;
    else
        X[t, 64] = ICC_SRE_EL2;
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>
        
        <access_mechanism accessor="MSRregister ICC_SRE_EL2" type="SystemAccessor">
            <encoding>
            <access_instruction>MSR ICC_SRE_EL2, &lt;Xt&gt;</access_instruction>
                
                <enc n="op0" v="0b11"/>
                
                <enc n="op1" v="0b100"/>
                
                <enc n="CRn" v="0b1100"/>
                
                <enc n="CRm" v="0b1001"/>
                
                <enc n="op2" v="0b101"/>
            </encoding>
            <access_permission>
                <ps name="MSRregister" sections="1" secttype="access_permission">
                <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; HCR_EL2.NV == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    else
        UNDEFINED;
elsif PSTATE.EL == EL2 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; ICC_SRE_EL3.Enable == '0' then
        UNDEFINED;
    elsif HaveEL(EL3) &amp;&amp; ICC_SRE_EL3.Enable == '0' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        ICC_SRE_EL2 = X[t, 64];
elsif PSTATE.EL == EL3 then
    if !EL2Enabled() then
        UNDEFINED;
    else
        ICC_SRE_EL2 = X[t, 64];
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>

      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>30/03/2023 19:06; 997dd0cf3258cacf72aa7cf7a885f19a4758c3af</timestamp>
</register_page>