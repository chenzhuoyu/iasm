<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register is_register="True" is_internal="False" is_banked="False" is_stub_entry="False">
      <reg_short_name>PMEVTYPER&lt;n&gt;_EL0</reg_short_name>
        
        <reg_long_name>Performance Monitors Event Type Registers</reg_long_name>


        <reg_parent_link id="pmu.xml">PMU</reg_parent_link>

      
        <reg_condition otherwise="RES0">when FEAT_PMUv3_EXT is implemented</reg_condition>
          <reg_array>
              <reg_array_start>0</reg_array_start>
              <reg_array_end>30</reg_array_end>
         </reg_array>
      


    <reg_address
        external_access="False"
        mem_map_access="False"
        block_access="True"
        memory_access="True"
            
            register_startbit="63"
            register_endbit="0"
        table_id="139930566591656"
    >
  
  <reg_frame>PMU</reg_frame>
  
    
    <reg_offset><hexnumber>0x400 + (8 * n)</hexnumber></reg_offset>
    <reg_access>
    
        
      <reg_access_state>
          <reg_access_level>When DoubleLockStatus(), or !IsCorePowered(), or OSLockStatus() or !AllowExternalPMUAccess()</reg_access_level>
          <reg_access_type>ERROR</reg_access_type>
      </reg_access_state>
        
      <reg_access_state>
          <reg_access_type>RW</reg_access_type>
      </reg_access_state>
    </reg_access>
</reg_address>

    <reg_address
        external_access="False"
        mem_map_access="False"
        block_access="True"
        memory_access="True"
            
            register_startbit="31"
            register_endbit="0"
        table_id="139930568645768"
    >
  
  <reg_frame>PMU</reg_frame>
  
    
    <reg_offset><hexnumber>0x400 + (4 * n)</hexnumber></reg_offset>
    <reg_access>
    
        
      <reg_access_state>
          <reg_access_level>When DoubleLockStatus(), or !IsCorePowered(), or OSLockStatus() or !AllowExternalPMUAccess()</reg_access_level>
          <reg_access_type>ERROR</reg_access_type>
      </reg_access_state>
        
      <reg_access_state>
          <reg_access_level>When SoftwareLockStatus()</reg_access_level>
          <reg_access_type>RO</reg_access_type>
      </reg_access_state>
        
      <reg_access_state>
          <reg_access_type>RW</reg_access_type>
      </reg_access_state>
    </reg_access>
</reg_address>

    <reg_address
        external_access="False"
        mem_map_access="False"
        block_access="True"
        memory_access="True"
            
            register_startbit="63"
            register_endbit="32"
        table_id="139930562317112"
    >
  
  <reg_frame>PMU</reg_frame>
  
    
    <reg_offset><hexnumber>0xA00 + (4 * n)</hexnumber></reg_offset>
    <reg_access>
    
        
      <reg_access_state>
          <reg_access_level>When DoubleLockStatus(), or !IsCorePowered(), or OSLockStatus() or !AllowExternalPMUAccess()</reg_access_level>
          <reg_access_type>ERROR</reg_access_type>
      </reg_access_state>
        
      <reg_access_state>
          <reg_access_level>When SoftwareLockStatus()</reg_access_level>
          <reg_access_type>RO</reg_access_type>
      </reg_access_state>
        
      <reg_access_state>
          <reg_access_type>RW</reg_access_type>
      </reg_access_state>
    </reg_access>
</reg_address>


          <reg_reset_value></reg_reset_value>

      <reg_mappings>
        



      
      <reg_mapping>
        
  

    

    <mapped_name filename="AArch64-pmevtypern_el0.xml">PMEVTYPER&lt;n&gt;_EL0</mapped_name>
  <mapped_type>Architectural</mapped_type>
      <mapped_execution_state>AArch64</mapped_execution_state>
    <mapped_from_startbit>63</mapped_from_startbit>
    <mapped_from_endbit>0</mapped_from_endbit>
    <mapped_to_startbit>63</mapped_to_startbit>
    <mapped_to_endbit>0</mapped_to_endbit>
    <mapped_from_rangeset output="63:0">
      <range>
        <msb>63</msb>
        <lsb>0</lsb>
      </range>
    </mapped_from_rangeset>
    <mapped_to_rangeset output="63:0">
      <range>
        <msb>63</msb>
        <lsb>0</lsb>
      </range>
    </mapped_to_rangeset>

      </reg_mapping>
      
      <reg_mapping>
        
  

    

    <mapped_name filename="AArch32-pmevtypern.xml">PMEVTYPER&lt;n&gt;</mapped_name>
  <mapped_type>Architectural</mapped_type>
      <mapped_execution_state>AArch32</mapped_execution_state>
    <mapped_from_startbit>31</mapped_from_startbit>
    <mapped_from_endbit>0</mapped_from_endbit>
    <mapped_to_startbit>31</mapped_to_startbit>
    <mapped_to_endbit>0</mapped_to_endbit>
    <mapped_from_rangeset output="31:0">
      <range>
        <msb>31</msb>
        <lsb>0</lsb>
      </range>
    </mapped_from_rangeset>
    <mapped_to_rangeset output="31:0">
      <range>
        <msb>31</msb>
        <lsb>0</lsb>
      </range>
    </mapped_to_rangeset>

      </reg_mapping>

      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>Configures event counter &lt;n&gt;, where &lt;n&gt; is 0 to 30.</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
          <reg_group>Performance Monitors registers</reg_group>
      </reg_groups>
      <reg_configuration>
        
    
      <configuration_text>
        <para>PMEVTYPER&lt;n&gt;_EL0 is in the Core power domain.</para>

      </configuration_text>
      <configuration_text>
        <para>If event counter n is not implemented:</para>

      </configuration_text>
      <configuration_text>
        <list type="unordered">
<listitem><content>When IsCorePowered() &amp;&amp; !DoubleLockStatus() &amp;&amp; !OSLockStatus() &amp;&amp; AllowExternalPMUAccess(), accesses are <arm-defined-word>RES0</arm-defined-word>.</content>
</listitem><listitem><content>Otherwise, it is <arm-defined-word>CONSTRAINED UNPREDICTABLE</arm-defined-word> whether accesses to this register are <arm-defined-word>RES0</arm-defined-word> or generate an error response.</content>
</listitem></list>
      </configuration_text>

      </reg_configuration>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>PMEVTYPER&lt;n&gt;_EL0 is a 64-bit register.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        






<fields id="fieldset_0" length="64">
  <text_before_fields/>
  <field id="fieldset_0-63_61-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RES0">
    <field_name>TC</field_name>
    <field_msb>63</field_msb>
    <field_lsb>61</field_lsb>
    <rel_range>2:0</rel_range>
    <field_description order="before"><para>Threshold Control.</para>
<para>Defines the threshold function. In the description of this field:</para>
<list type="unordered">
<listitem><content>V<sub>B</sub> is the value the event specified by PMU.PMEVTYPER&lt;n&gt;_EL0 would increment the counter by on a processor cycle if the threshold function is disabled.</content>
</listitem><listitem><content>TH is the value of PMEVTYPER&lt;n&gt;.TH.</content>
</listitem></list>
<para>Comparisons treat V<sub>B</sub> and TH as unsigned integer values.</para></field_description>
    <field_description order="after">
      <para>All other values are reserved.</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b001</field_value>
        <field_value_description>
          <para>Equal to not-equal. The counter increments by 1 on each processor cycle when V<sub>B</sub> is not equal to TH and V<sub>B</sub> was equal to TH on the previous processor cycle.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b010</field_value>
        <field_value_description><para>Equal to/from not-equal. The counter increments by 1 on each processor cycle when either:</para>
<list type="unordered">
<listitem><content>V<sub>B</sub> is not equal to TH  and V<sub>B</sub> was equal to TH on the previous processor cycle.</content>
</listitem><listitem><content>V<sub>B</sub> is equal to TH and V<sub>B</sub> was not equal to TH on the previous processor cycle.</content>
</listitem></list></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b011</field_value>
        <field_value_description>
          <para>Not-equal to equal. The counter increments by 1 on each processor cycle when V<sub>B</sub> is equal to TH and V<sub>B</sub> was not equal to TH on the previous processor cycle.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b101</field_value>
        <field_value_description>
          <para>Less-than to greater-than-or-equal. The counter increments by 1 on each processor cycle when V<sub>B</sub> is greater than or equal to TH and V<sub>B</sub> was less than TH on the previous processor cycle.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b110</field_value>
        <field_value_description><para>Less-than to/from greater-than-or-equal. The counter increments by 1 on each processor cycle when either:</para>
<list type="unordered">
<listitem><content>V<sub>B</sub> is greater than or equal to TH and V<sub>B</sub> was less than TH on the previous processor cycle.</content>
</listitem><listitem><content>V<sub>B</sub> is less than TH and V<sub>B</sub> was greater than or equal to TH on the previous processor cycle.</content>
</listitem></list></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b111</field_value>
        <field_value_description>
          <para>Greater-than-or-equal to less-than. The counter increments by 1 on each processor cycle when V<sub>B</sub> is less than TH and V<sub>B</sub> was greater than or equal to TH on the previous processor cycle.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_conditions>
          <field_reset_condition condition="AArch32 is supported">
            <field_reset>
              <field_reset_number>0</field_reset_number>
            </field_reset>
          </field_reset_condition>
          <field_reset_condition>
            <field_reset>
              <field_reset_standard_text>AU</field_reset_standard_text>
            </field_reset>
          </field_reset_condition>
        </field_reset_conditions>
      </field_reset>
    </field_resets>
    <fields_condition>When FEAT_PMUv3_EDGE is implemented and PMU.PMEVTYPER&lt;n&gt;_EL0.TE == 1</fields_condition>
  </field>
  <field id="fieldset_0-63_61-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RES0">
    <field_name>TC</field_name>
    <field_msb>63</field_msb>
    <field_lsb>61</field_lsb>
    <rel_range>2:0</rel_range>
    <field_description order="before"><para>Threshold Control.</para>
<para>Defines the threshold function. In the description of this field:</para>
<list type="unordered">
<listitem><content>V<sub>B</sub> is the value the event specified by PMU.PMEVTYPER&lt;n&gt;_EL0 would increment the counter by on a processor cycle if the threshold function is disabled.</content>
</listitem><listitem><content>TH is the value of PMEVTYPER&lt;n&gt;.TH.</content>
</listitem></list>
<para>Comparisons treat V<sub>B</sub> and TH as unsigned integer values.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b000</field_value>
        <field_value_description>
          <para>Not-equal. The counter increments by V<sub>B</sub> on each processor cycle when V<sub>B</sub> is not equal to TH. If TH is zero, the threshold function is disabled.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b001</field_value>
        <field_value_description>
          <para>Not-equal, count. The counter increments by 1 on each processor cycle when V<sub>B</sub> is not equal to TH.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b010</field_value>
        <field_value_description>
          <para>Equals. The counter increments by V<sub>B</sub> on each processor cycle when V<sub>B</sub> is equal to TH.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b011</field_value>
        <field_value_description>
          <para>Equals, count. The counter increments by 1 on each processor cycle when V<sub>B</sub> is equal to TH.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b100</field_value>
        <field_value_description>
          <para>Greater-than-or-equal. The counter increments by V<sub>B</sub> on each processor cycle when V<sub>B</sub> is greater than or equal to TH.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b101</field_value>
        <field_value_description>
          <para>Greater-than-or-equal, count. The counter increments by 1 on each processor cycle when V<sub>B</sub> is greater than or equal to TH.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b110</field_value>
        <field_value_description>
          <para>Less-than. The counter increments by V<sub>B</sub> on each processor cycle when V<sub>B</sub> is less than TH.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b111</field_value>
        <field_value_description>
          <para>Less-than, count. The counter increments by 1 on each processor cycle when V<sub>B</sub> is less than TH.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_conditions>
          <field_reset_condition condition="AArch32 is supported">
            <field_reset>
              <field_reset_number>0</field_reset_number>
            </field_reset>
          </field_reset_condition>
          <field_reset_condition>
            <field_reset>
              <field_reset_standard_text>AU</field_reset_standard_text>
            </field_reset>
          </field_reset_condition>
        </field_reset_conditions>
      </field_reset>
    </field_resets>
    <fields_condition>When ((FEAT_PMUv3_EDGE is implemented and PMU.PMEVTYPER&lt;n&gt;_EL0.TE == 0) or FEAT_PMUv3_EDGE is not implemented) and FEAT_PMUv3_TH is implemented</fields_condition>
  </field>
  <field id="fieldset_0-63_61-3" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0" reserved_type="RES0">
    <field_msb>63</field_msb>
    <field_lsb>61</field_lsb>
    <rel_range>2:0</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
    <field_description order="after"><para>Threshold Control.</para>
<para>Defines the threshold function. In the description of this field:</para>
<list type="unordered">
<listitem><content>V<sub>B</sub> is the value the event specified by PMU.PMEVTYPER&lt;n&gt;_EL0 would increment the counter by on a processor cycle if the threshold function is disabled.</content>
</listitem><listitem><content>TH is the value of PMEVTYPER&lt;n&gt;.TH.</content>
</listitem></list>
<para>Comparisons treat V<sub>B</sub> and TH as unsigned integer values.</para></field_description>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-60_60-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RES0">
    <field_name>TE</field_name>
    <field_msb>60</field_msb>
    <field_lsb>60</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Threshold Edge. Enables the edge condition. When PMEVTYPER&lt;n&gt;.TE is 1, the event counter increments on cycles when the result of the threshold condition changes. See PMEVTYPER&lt;n&gt;.TC for more information.</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>Threshold edge condition disabled.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>Threshold edge condition enabled.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
    <fields_condition>When FEAT_PMUv3_EDGE is implemented</fields_condition>
  </field>
  <field id="fieldset_0-60_60-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0" reserved_type="RES0">
    <field_msb>60</field_msb>
    <field_lsb>60</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-59_59" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0">
    <field_msb>59</field_msb>
    <field_lsb>59</field_lsb>
    <rel_range>59</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
  </field>
  <field id="fieldset_0-58_58-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RES0">
    <field_name>SYNC</field_name>
    <field_msb>58</field_msb>
    <field_lsb>58</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Synchronous Mode. Controls whether a PMU exception generated by the counter is synchronous or asynchronous.</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>Asynchronous PMU exception is enabled.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>Synchronous PMU exception is enabled.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
    <fields_condition>When FEAT_SEBEP is implemented</fields_condition>
  </field>
  <field id="fieldset_0-58_58-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0" reserved_type="RES0">
    <field_msb>58</field_msb>
    <field_lsb>58</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-57_44" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0">
    <field_msb>57</field_msb>
    <field_lsb>44</field_lsb>
    <rel_range>57:44</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
  </field>
  <field id="fieldset_0-43_32-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RES0">
    <field_name>TH</field_name>
    <field_msb>43</field_msb>
    <field_lsb>32</field_lsb>
    <rel_range>11:0</rel_range>
    <field_description order="before">
      <para>Threshold value. Provides the unsigned value for the threshold function defined by PMEVTYPER&lt;n&gt;_EL0.TC.</para>
    </field_description>
    <field_description order="after"><para>If PMEVTYPER&lt;n&gt;_EL0.TC is <binarynumber>0b000</binarynumber> and PMEVTYPER&lt;n&gt;_EL0.TH is zero, then the threshold function is disabled.</para>
<para>If <register_link state="AArch64" id="AArch64-pmmir_el1.xml">PMMIR_EL1</register_link>.THWIDTH is less than 12, then bits PMEVTYPER&lt;n&gt;_EL0.TH[11:<register_link state="AArch64" id="AArch64-pmmir_el1.xml">PMMIR_EL1</register_link>.THWIDTH] are <arm-defined-word>RES0</arm-defined-word>. This accounts for the behavior when writing a value greater-than-or-equal-to 2<sup>(PMMIR_EL1.THWIDTH)</sup>.</para></field_description>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_conditions>
          <field_reset_condition condition="AArch32 is supported">
            <field_reset>
              <field_reset_number>0</field_reset_number>
            </field_reset>
          </field_reset_condition>
          <field_reset_condition>
            <field_reset>
              <field_reset_standard_text>AU</field_reset_standard_text>
            </field_reset>
          </field_reset_condition>
        </field_reset_conditions>
      </field_reset>
    </field_resets>
    <fields_condition>When FEAT_PMUv3_TH is implemented</fields_condition>
  </field>
  <field id="fieldset_0-43_32-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0" reserved_type="RES0">
    <field_msb>43</field_msb>
    <field_lsb>32</field_lsb>
    <rel_range>11:0</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-31_31" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>P</field_name>
    <field_msb>31</field_msb>
    <field_lsb>31</field_lsb>
    <rel_range>31</rel_range>
    <field_description order="before">
      <para>EL1 filtering. Controls counting events in EL1.</para>
    </field_description>
    <field_description order="after"><para>If Secure and Non-secure states are implemented, then counting events in Non-secure EL1 is further controlled by PMEVTYPER&lt;n&gt;_EL0.NSK.</para>
<para>If <xref browsertext="FEAT_RME" filename="A_armv9_architecture_extensions.fm" linkend="FEAT_RME"/> is implemented, then counting events in Realm EL1 is further controlled by PMEVTYPER&lt;n&gt;_EL0.RLK.</para>
<para>If EL3 is implemented, then counting events in EL3 is further controlled by PMEVTYPER&lt;n&gt;_EL0.M.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>This field has no effect on filtering of events.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>Events in EL1 are not counted.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_0-30_30" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>U</field_name>
    <field_msb>30</field_msb>
    <field_lsb>30</field_lsb>
    <rel_range>30</rel_range>
    <field_description order="before">
      <para>EL0 filtering. Controls counting events in EL0.</para>
    </field_description>
    <field_description order="after"><para>If Secure and Non-secure states are implemented, then counting events in Non-secure EL0 is further controlled by PMEVTYPER&lt;n&gt;_EL0.NSU.</para>
<para>If <xref browsertext="FEAT_RME" filename="A_armv9_architecture_extensions.fm" linkend="FEAT_RME"/> is implemented, then counting events in Realm EL0 is further controlled by PMEVTYPER&lt;n&gt;_EL0.RLU.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>This field has no effect on filtering of events.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>Events in EL0 are not counted.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_0-29_29-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RES0">
    <field_name>NSK</field_name>
    <field_msb>29</field_msb>
    <field_lsb>29</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Non-secure EL1 filtering. Controls counting events in Non-secure EL1. If PMEVTYPER&lt;n&gt;_EL0.NSK is not equal to PMEVTYPER&lt;n&gt;_EL0.P, then events in Non-secure EL1 are not counted. Otherwise, PMEVTYPER&lt;n&gt;_EL0.NSK has no effect on filtering of events in Non-secure EL1.</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description><para>When PMEVTYPER&lt;n&gt;_EL0.P == 0, this field has no effect on filtering of events.</para>
<para>When PMEVTYPER&lt;n&gt;_EL0.P == 1, events in Non-secure EL1 are not counted.</para></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description><para>When PMEVTYPER&lt;n&gt;_EL0.P == 0, events in Non-secure EL1 are not counted.</para>
<para>When PMEVTYPER&lt;n&gt;_EL0.P == 1, this field has no effect on filtering of events.</para></field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
    <fields_condition>When EL3 is implemented</fields_condition>
  </field>
  <field id="fieldset_0-29_29-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0" reserved_type="RES0">
    <field_msb>29</field_msb>
    <field_lsb>29</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-28_28-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RES0">
    <field_name>NSU</field_name>
    <field_msb>28</field_msb>
    <field_lsb>28</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Non-secure EL0 filtering. Controls counting events in Non-secure EL0. If PMEVTYPER&lt;n&gt;_EL0.NSU is not equal to PMEVTYPER&lt;n&gt;_EL0.U, then events in Non-secure EL0 are not counted. Otherwise, PMEVTYPER&lt;n&gt;_EL0.NSU has no effect on filtering of events in Non-secure EL0.</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description><para>When PMEVTYPER&lt;n&gt;_EL0.U == 0, this field has no effect on filtering of events.</para>
<para>When PMEVTYPER&lt;n&gt;_EL0.U == 1, events in Non-secure EL0 are not counted.</para></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description><para>When PMEVTYPER&lt;n&gt;_EL0.U == 0, events in Non-secure EL0 are not counted.</para>
<para>When PMEVTYPER&lt;n&gt;_EL0.U == 1, this field has no effect on filtering of events.</para></field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
    <fields_condition>When EL3 is implemented</fields_condition>
  </field>
  <field id="fieldset_0-28_28-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0" reserved_type="RES0">
    <field_msb>28</field_msb>
    <field_lsb>28</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-27_27-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RES0">
    <field_name>NSH</field_name>
    <field_msb>27</field_msb>
    <field_lsb>27</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>EL2 filtering. Controls counting events in EL2.</para>
    </field_description>
    <field_description order="after"><para>If EL3 is implemented and <xref browsertext="FEAT_SEL2" filename="A_armv8_architecture_extensions.fm" linkend="v8.4.SecEL2"/> is implemented, then counting events in Secure EL2 is further controlled by PMEVTYPER&lt;n&gt;_EL0.SH.</para>
<para>If <xref browsertext="FEAT_RME" filename="A_armv9_architecture_extensions.fm" linkend="FEAT_RME"/> is implemented, then counting events in Realm EL2 is further controlled by PMEVTYPER&lt;n&gt;_EL0.RLH.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>Events in EL2 are not counted.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>This field has no effect on filtering of events.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
    <fields_condition>When EL2 is implemented</fields_condition>
  </field>
  <field id="fieldset_0-27_27-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0" reserved_type="RES0">
    <field_msb>27</field_msb>
    <field_lsb>27</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-26_26-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RES0">
    <field_name>M</field_name>
    <field_msb>26</field_msb>
    <field_lsb>26</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>EL3 filtering. Controls counting events in EL3. If PMEVTYPER&lt;n&gt;_EL0.M is not equal to PMEVTYPER&lt;n&gt;_EL0.P, then events in EL3 are not counted. Otherwise, PMEVTYPER&lt;n&gt;_EL0.M has no effect on filtering of events in EL3.</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description><para>When PMEVTYPER&lt;n&gt;_EL0.P == 0, this field has no effect on filtering of events.</para>
<para>When PMEVTYPER&lt;n&gt;_EL0.P == 1, events in EL3 are not counted.</para></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description><para>When PMEVTYPER&lt;n&gt;_EL0.P == 0, events in EL3 are not counted.</para>
<para>When PMEVTYPER&lt;n&gt;_EL0.P == 1, this field has no effect on filtering of events.</para></field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
    <fields_condition>When EL3 is implemented</fields_condition>
  </field>
  <field id="fieldset_0-26_26-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0" reserved_type="RES0">
    <field_msb>26</field_msb>
    <field_lsb>26</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-25_25-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RES0">
    <field_name>MT</field_name>
    <field_msb>25</field_msb>
    <field_lsb>25</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Multithreading.</para>
    </field_description>
    <field_description order="after">
      <note>
        <list type="unordered">
          <listitem>
            <content>When the lowest level of <xref browsertext="affinity" filename="D_the_performance_monitors_Extension.fm" linkend="BABIJFGF"/> consists of logical PEs that are implemented using a multi-threading type approach, an implementation is described as multi-threaded. That is, the performance of PEs at the lowest affinity level is highly interdependent.</content>
          </listitem>
          <listitem>
            <content>Events from a different thread of a multithreaded implementation are not Attributable to the thread counting the event.</content>
          </listitem>
        </list>
      </note>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>Count events only on controlling PE.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>Count events from any PE with the same affinity at level 1 and above as this PE.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
    <fields_condition>When (FEAT_MTPMU is implemented and enabled) or an IMPLEMENTATION DEFINED multi-threaded PMU Extension is implemented</fields_condition>
  </field>
  <field id="fieldset_0-25_25-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0" reserved_type="RES0">
    <field_msb>25</field_msb>
    <field_lsb>25</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-24_24-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RES0">
    <field_name>SH</field_name>
    <field_msb>24</field_msb>
    <field_lsb>24</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Secure EL2 filtering. Controls counting events in Secure EL2. If PMEVTYPER&lt;n&gt;_EL0.SH is equal to PMEVTYPER&lt;n&gt;_EL0.NSH, then events in Secure EL2 are not counted. Otherwise, PMEVTYPER&lt;n&gt;_EL0.SH has no effect on filtering of events in Secure EL2.</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description><para>When PMEVTYPER&lt;n&gt;_EL0.NSH == 0, events in Secure EL2 are not counted.</para>
<para>When PMEVTYPER&lt;n&gt;_EL0.NSH == 1, this field has no effect on filtering of events.</para></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description><para>When PMEVTYPER&lt;n&gt;_EL0.NSH == 0, this field has no effect on filtering of events.</para>
<para>When PMEVTYPER&lt;n&gt;_EL0.NSH == 1, events in Secure EL2 are not counted.</para></field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
    <field_access>
      <field_access_state>
        <field_access_level>When !IsSecureEL2Enabled()</field_access_level>
        <field_access_type>RES0</field_access_type>
      </field_access_state>
      <field_access_state>
        <field_access_type>RW</field_access_type>
      </field_access_state>
    </field_access>
    <fields_condition>When EL3 is implemented and FEAT_SEL2 is implemented</fields_condition>
  </field>
  <field id="fieldset_0-24_24-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0" reserved_type="RES0">
    <field_msb>24</field_msb>
    <field_lsb>24</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-23_23-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RES0">
    <field_name>T</field_name>
    <field_msb>23</field_msb>
    <field_lsb>23</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Transactional state filtering bit. Controls counting of Attributable events in Non-transactional state.</para>
    </field_description>
    <field_description order="after">
      <para>For each Unattributable event, it is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> whether the filtering applies.</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>This bit has no effect on the filtering of events.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>Do not count Attributable events in Non-transactional state.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
    <fields_condition>When FEAT_TME is implemented</fields_condition>
  </field>
  <field id="fieldset_0-23_23-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0" reserved_type="RES0">
    <field_msb>23</field_msb>
    <field_lsb>23</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-22_22-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RES0">
    <field_name>RLK</field_name>
    <field_msb>22</field_msb>
    <field_lsb>22</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before"><para>Realm EL1  (kernel) filtering bit. Controls counting in Realm EL1.</para>
<para>If the value of this bit is equal to the value of the PMEVTYPER&lt;n&gt;_EL0.P bit, events in Realm EL1 are counted.</para>
<para>Otherwise, events in Realm EL1 are not counted.</para></field_description>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
    <fields_condition>When FEAT_RME is implemented</fields_condition>
  </field>
  <field id="fieldset_0-22_22-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0" reserved_type="RES0">
    <field_msb>22</field_msb>
    <field_lsb>22</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-21_21-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RES0">
    <field_name>RLU</field_name>
    <field_msb>21</field_msb>
    <field_lsb>21</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before"><para>Realm EL0  (unprivileged) filtering bit. Controls counting in Realm EL0.</para>
<para>If the value of this bit is equal to the value of the PMEVTYPER&lt;n&gt;_EL0.U bit, events in Realm EL0 are counted.</para>
<para>Otherwise, events in Realm EL0 are not counted.</para></field_description>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
    <fields_condition>When FEAT_RME is implemented</fields_condition>
  </field>
  <field id="fieldset_0-21_21-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0" reserved_type="RES0">
    <field_msb>21</field_msb>
    <field_lsb>21</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-20_20-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RES0">
    <field_name>RLH</field_name>
    <field_msb>20</field_msb>
    <field_lsb>20</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before"><para>Realm EL2  filtering bit. Controls counting in Realm EL2.</para>
<para>If the value of this bit is not equal to the value of the PMEVTYPER&lt;n&gt;_EL0.NSH bit, events in Realm EL2 are counted.</para>
<para>Otherwise, events in Realm EL2 are not counted.</para></field_description>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
    <fields_condition>When FEAT_RME is implemented</fields_condition>
  </field>
  <field id="fieldset_0-20_20-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0" reserved_type="RES0">
    <field_msb>20</field_msb>
    <field_lsb>20</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-19_16" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0">
    <field_msb>19</field_msb>
    <field_lsb>16</field_lsb>
    <rel_range>19:16</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
  </field>
  <field id="fieldset_0-15_10-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RES0">
    <field_name>evtCount[15:10]</field_name>
    <field_msb>15</field_msb>
    <field_lsb>10</field_lsb>
    <rel_range>5:0</rel_range>
    <field_description order="before">
      <para>Extension to evtCount[9:0]. For more information, see evtCount[9:0].</para>
    </field_description>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
    <fields_condition>When FEAT_PMUv3p1 is implemented</fields_condition>
  </field>
  <field id="fieldset_0-15_10-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0" reserved_type="RES0">
    <field_msb>15</field_msb>
    <field_lsb>10</field_lsb>
    <rel_range>5:0</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-9_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>evtCount[9:0]</field_name>
    <field_msb>9</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>9:0</rel_range>
    <field_description order="before"><para>Event to count. The event number of the event that is counted by event counter PMU.PMEVCNTR&lt;n&gt;_EL0.</para>
<para>Software must program this field with an event that is supported by the PE being programmed.</para>
<para>The ranges of event numbers allocated to each type of event are shown in <xref browsertext="'Allocation of the PMU event number space'" filename="D_the_performance_monitors_extension.fm" linkend="CACBHBFJ"/>.</para>
<para>If <xref browsertext="FEAT_PMUv3p8" filename="A_armv8_architecture_extensions.fm" linkend="FEAT_PMUv3p8"/> is implemented and PMEVTYPER&lt;n&gt;_EL0.evtCount is programmed to an event that is reserved or not supported by the PE, no events are counted and the value returned by a direct or external read of the PMEVTYPER&lt;n&gt;_EL0.evtCount field is the value written to the field.</para>
<note><para>Arm recommends this behavior for all implementations of <xref browsertext="FEAT_PMUv3" filename="A_armv8_architecture_extensions.fm" linkend="v8.0.PMUv3"/>.</para></note><para>Otherwise, if PMEVTYPER&lt;n&gt;_EL0.evtCount is programmed to an event that is reserved or not supported by the PE, the behavior depends on the value written:</para>
<list type="unordered">
<listitem><content>For the range <hexnumber>0x0000</hexnumber> to <hexnumber>0x003F</hexnumber>, no events are counted and the value returned by a direct or external read of the PMEVTYPER&lt;n&gt;_EL0.evtCount field is the value written to the field.</content>
</listitem><listitem><content>If <xref browsertext="FEAT_PMUv3p1" filename="A_armv8_architecture_extensions.fm" linkend="v8.1.PMU"/> is implemented, for the range <hexnumber>0x4000</hexnumber> to <hexnumber>0x403F</hexnumber>, no events are counted and the value returned by a direct or external read of the PMEVTYPER&lt;n&gt;_EL0.evtCount field is the value written to the field.</content>
</listitem><listitem><content>For other values, it is <arm-defined-word>UNPREDICTABLE</arm-defined-word> what event, if any, is counted, and the value returned by a direct or external read of the PMEVTYPER&lt;n&gt;_EL0.evtCount field is <arm-defined-word>UNKNOWN</arm-defined-word>.</content>
</listitem></list>
<note><para><arm-defined-word>UNPREDICTABLE</arm-defined-word> means the event must not expose privileged information.</para></note></field_description>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <text_after_fields/>
</fields>




    
<reg_fieldset length="64">
  <fieldat id="fieldset_0-63_61-1" msb="63" lsb="61"/>
  <fieldat id="fieldset_0-60_60-1" msb="60" lsb="60"/>
  <fieldat id="fieldset_0-59_59" msb="59" lsb="59"/>
  <fieldat id="fieldset_0-58_58-1" msb="58" lsb="58"/>
  <fieldat id="fieldset_0-57_44" msb="57" lsb="44"/>
  <fieldat id="fieldset_0-43_32-1" msb="43" lsb="32"/>
  <fieldat id="fieldset_0-31_31" msb="31" lsb="31"/>
  <fieldat id="fieldset_0-30_30" msb="30" lsb="30"/>
  <fieldat id="fieldset_0-29_29-1" msb="29" lsb="29"/>
  <fieldat id="fieldset_0-28_28-1" msb="28" lsb="28"/>
  <fieldat id="fieldset_0-27_27-1" msb="27" lsb="27"/>
  <fieldat id="fieldset_0-26_26-1" msb="26" lsb="26"/>
  <fieldat id="fieldset_0-25_25-1" msb="25" lsb="25"/>
  <fieldat id="fieldset_0-24_24-1" msb="24" lsb="24"/>
  <fieldat id="fieldset_0-23_23-1" msb="23" lsb="23"/>
  <fieldat id="fieldset_0-22_22-1" msb="22" lsb="22"/>
  <fieldat id="fieldset_0-21_21-1" msb="21" lsb="21"/>
  <fieldat id="fieldset_0-20_20-1" msb="20" lsb="20"/>
  <fieldat id="fieldset_0-19_16" msb="19" lsb="16"/>
  <fieldat id="fieldset_0-15_10-1" msb="15" lsb="10"/>
  <fieldat id="fieldset_0-9_0" msb="9" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>
        <reg_variables>
              <reg_variable variable="n" max="30"/>
        </reg_variables>

      <access_mechanisms>
          


  
    
      <access_permission_text>
        <para>If <xref browsertext="FEAT_PMUv3_EXT32" filename="A_armv8_architecture_extensions.fm" linkend="FEAT_PMUv3_EXT32"/> is implemented, and at least one of <xref browsertext="FEAT_PMUv3_TH" filename="A_armv8_architecture_extensions.fm" linkend="FEAT_PMUv3_TH"/> or <xref browsertext="FEAT_PMUv3p8" filename="A_armv8_architecture_extensions.fm" linkend="FEAT_PMUv3p8"/> is implemented, then bits [63:32] of this interface are accessible at offset <hexnumber>0xA00</hexnumber> + (4*n). Otherwise accesses at this offset are <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word>.</para>

      </access_permission_text>
      <access_permission_text>
        <note><para>SoftwareLockStatus() depends on the type of access attempted and AllowExternalPMUAccess() has a new definition from Armv8.4. Refer to the Pseudocode definitions for more information.</para></note>
      </access_permission_text>





        <access_mechanism type="BlockAccessAbstract" table_id="139930566591656">
        
        
        
        <access_header>[63:0] Accessible at offset 0x400 + (8 * n) from PMU</access_header>
        <access_condition>
When FEAT_PMUv3_EXT64 is implemented
        </access_condition>
    </access_mechanism>
        <access_mechanism type="BlockAccessAbstract" table_id="139930568645768">
        
        
        
        <access_header>[31:0] Accessible at offset 0x400 + (4 * n) from PMU</access_header>
        <access_condition>
When FEAT_PMUv3_EXT32 is implemented
        </access_condition>
    </access_mechanism>
        <access_mechanism type="BlockAccessAbstract" table_id="139930562317112">
        
        
        
        <access_header>[63:32] Accessible at offset 0xA00 + (4 * n) from PMU</access_header>
        <access_condition>
When FEAT_PMUv3_EXT32 is implemented and (FEAT_PMUv3_TH is implemented or FEAT_PMUv3p8 is implemented)
        </access_condition>
    </access_mechanism>

      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>30/03/2023 19:06; 997dd0cf3258cacf72aa7cf7a885f19a4758c3af</timestamp>
</register_page>