<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register is_register="True" is_internal="False" is_banked="False" is_stub_entry="False">
      <reg_short_name>ERR&lt;n&gt;PFGF</reg_short_name>
        
        <reg_long_name>Error Record &lt;n&gt; Pseudo-fault Generation Feature Register</reg_long_name>



      
        <reg_condition otherwise="RES0">when error record &lt;n&gt; is implemented, the node implements the Common Fault Injection Model Extension (ERR&lt;n&gt;FR.INJ != 0b00) and error record &lt;n&gt; is the first error record owned by a node</reg_condition>
          <reg_array>
              <reg_array_start>0</reg_array_start>
              <reg_array_end>65534</reg_array_end>
         </reg_array>
      
  <reg_address
      external_access="False"
    mem_map_access="True"
      power_domain="None"
  >
    <reg_component>RAS</reg_component>
    <reg_offset><hexnumber>0x800</hexnumber> + (64 * n)</reg_offset>
    <reg_instance>ERR&lt;n&gt;PFGF</reg_instance>
    <reg_access>
      
        
      <reg_access_state>
          <reg_access_type>RO</reg_access_type>
      </reg_access_state>
    </reg_access>
</reg_address>



          <reg_reset_value>

      </reg_reset_value>

      <reg_mappings>
        




      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>Defines which common architecturally-defined fault generation features are implemented.</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
          <reg_group>RAS registers</reg_group>
      </reg_groups>
      <reg_configuration>
        
    
      <configuration_text>
        <para><register_link state="ext" id="ext-errnfr.xml">ERR&lt;n&gt;FR</register_link> describes the features implemented by the node.</para>
      </configuration_text>

      </reg_configuration>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>ERR&lt;n&gt;PFGF is a 64-bit register.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        






<fields id="fieldset_0" length="64">
  <fields_instance>ERR&lt;n&gt;PFGF</fields_instance>
  <text_before_fields/>
  <field id="fieldset_0-63_31" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0">
    <field_msb>63</field_msb>
    <field_lsb>31</field_lsb>
    <rel_range>63:31</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
  </field>
  <field id="fieldset_0-30_30" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>R</field_name>
    <field_msb>30</field_msb>
    <field_lsb>30</field_lsb>
    <rel_range>30</rel_range>
    <field_description order="before">
      <para>Restartable. Support for Error Generation Counter restart mode.</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>The node does not support this feature. <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.R is <arm-defined-word>RES0</arm-defined-word>.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>Error Generation Counter restart mode is implemented and is controlled by <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.R. <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.R is a read/write field.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <field id="fieldset_0-29_29" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>SYN</field_name>
    <field_msb>29</field_msb>
    <field_lsb>29</field_lsb>
    <rel_range>29</rel_range>
    <field_description order="before">
      <para>Syndrome. Fault syndrome injection.</para>
    </field_description>
    <field_description order="after">
      <note>
        <para>If ERR&lt;n&gt;PFGF.SYN is 1 then software can write specific values into the <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.{IERR, SERR} fields when setting up a fault injection event. The sets of values that can be written to these fields is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word>.</para>
      </note>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>When an injected error is recorded, the node sets <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.{IERR, SERR} to <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> values. <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.{IERR, SERR} are <arm-defined-word>UNKNOWN</arm-defined-word> when <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.V is 0.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>When an injected error is recorded, the node does not update the <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.{IERR, SERR} fields. <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.{IERR, SERR} are writable when <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.V is 0.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <field id="fieldset_0-28_28" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>NA</field_name>
    <field_msb>28</field_msb>
    <field_lsb>28</field_lsb>
    <rel_range>28</rel_range>
    <field_description order="before">
      <para>No access required. Defines whether this component fakes detection of the error on an access to the component or spontaneously in the fault injection state.</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>The component fakes detection of the error on an access to the component.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>The component fakes detection of the error spontaneously in the fault injection state.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <field id="fieldset_0-27_13" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0">
    <field_msb>27</field_msb>
    <field_lsb>13</field_lsb>
    <rel_range>27:13</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
  </field>
  <field id="fieldset_0-12_12" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>MV</field_name>
    <field_msb>12</field_msb>
    <field_lsb>12</field_lsb>
    <rel_range>12</rel_range>
    <field_description order="before"><para>Miscellaneous syndrome.</para>
<para>Defines whether software can control all or part of the syndrome recorded in the ERR&lt;n&gt;MISC&lt;m&gt; registers when an injected error is recorded.</para>
<para>It is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> which ERR&lt;n&gt;MISC&lt;m&gt; syndrome fields, if any, are updated by the node when an injected error is recorded. Some syndrome fields might always be updated by the node when an error, including an injected error, is recorded. For example, a corrected error counter might always be updated when any countable error, including a injected countable error, is recorded.</para></field_description>
    <field_description order="after">
      <para>If ERR&lt;n&gt;PFGF.MV is 1, software can write specific additional syndrome values into the ERR&lt;n&gt;MISC&lt;m&gt; registers when setting up a fault injection event. The permitted values that can be written to these registers are <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word>.</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description><para>When an injected error is recorded, the node might update the ERR&lt;n&gt;MISC&lt;m&gt; registers:</para>
<list type="unordered">
<listitem><content>If any syndrome is recorded by the node in the ERR&lt;n&gt;MISC&lt;m&gt; registers, then <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.MV is set to 1.</content>
</listitem><listitem><content>Otherwise, <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.MV is unchanged.</content>
</listitem></list>
<para>If the node always sets <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.MV to 1 when recording an injected error then <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.MV might be RAO/WI. Otherwise <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.MV is <arm-defined-word>RES0</arm-defined-word>.</para></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description><para>When an injected error is recorded, the node might update some, but not all ERR&lt;n&gt;MISC&lt;m&gt; syndrome fields:</para>
<list type="unordered">
<listitem><content>If any syndrome is recorded by the node in the ERR&lt;n&gt;MISC&lt;m&gt; registers, then <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.MV is set to 1.</content>
</listitem><listitem><content>Otherwise, <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.MV is set to <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.MV.</content>
</listitem></list>
<para>ERR&lt;n&gt;MISC&lt;m&gt; syndrome fields that are not updated by the node are writable when <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.MV is 0.</para>
<para>If the node always sets <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.MV to 1 when recording an injected error then <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.MV is RAO/WI. Otherwise <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.MV is a read/write field.</para></field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <field id="fieldset_0-11_11" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>AV</field_name>
    <field_msb>11</field_msb>
    <field_lsb>11</field_lsb>
    <rel_range>11</rel_range>
    <field_description order="before">
      <para>Address syndrome. Defines whether software can control the address recorded in <register_link state="ext" id="ext-errnaddr.xml">ERR&lt;n&gt;ADDR</register_link> when an injected error is recorded.</para>
    </field_description>
    <field_description order="after">
      <para>If ERR&lt;n&gt;PFGF.AV is 1 then software can write a specific address value into <register_link state="ext" id="ext-errnaddr.xml">ERR&lt;n&gt;ADDR</register_link> when setting up a fault injection event.</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description><para>When an injected error is recorded, the node might record an address in <register_link state="ext" id="ext-errnaddr.xml">ERR&lt;n&gt;ADDR</register_link>. If an address is recorded in <register_link state="ext" id="ext-errnaddr.xml">ERR&lt;n&gt;ADDR</register_link>, then <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.AV is set to 1. Otherwise, <register_link state="ext" id="ext-errnaddr.xml">ERR&lt;n&gt;ADDR</register_link> and <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.AV are unchanged.</para>
<para>If the node always records an address and sets <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.AV to 1 when recording an injected error then <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.AV might be RAO/WI. Otherwise <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.AV is <arm-defined-word>RES0</arm-defined-word>.</para></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description><para>When an injected error is recorded, the node does not update <register_link state="ext" id="ext-errnaddr.xml">ERR&lt;n&gt;ADDR</register_link> and does one of:</para>
<list type="unordered">
<listitem><content>Sets <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.AV to <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.AV. <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.AV is a read/write field.</content>
</listitem><listitem><content>Sets <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.AV to 1. <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.AV is RAO/WI.</content>
</listitem></list>
<para><register_link state="ext" id="ext-errnaddr.xml">ERR&lt;n&gt;ADDR</register_link> is writable when <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.AV is 0.</para></field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <field id="fieldset_0-10_10-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RAZ">
    <field_name>PN</field_name>
    <field_msb>10</field_msb>
    <field_lsb>10</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Poison flag. Describes how the fault generation feature of the node sets the <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.PN status flag.</para>
    </field_description>
    <field_description order="after">
      <para>This behavior replaces the architecture-defined rules for setting the <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.PN bit.</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>When an injected error is recorded, it is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> whether the node sets <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.PN to 1. <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.PN is <arm-defined-word>RES0</arm-defined-word>.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>When an injected error is recorded, <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.PN is set to <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.PN. <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.PN is a read/write field.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <fields_condition>When the node supports this flag</fields_condition>
  </field>
  <field id="fieldset_0-10_10-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RAZ" reserved_type="RAZ">
    <field_msb>10</field_msb>
    <field_lsb>10</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Reserved, RAZ.</para>
    </field_description>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-9_9-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RAZ">
    <field_name>ER</field_name>
    <field_msb>9</field_msb>
    <field_lsb>9</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Error Reported flag. Describes how the fault generation feature of the node sets the <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.ER status flag.</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>When an injected error is recorded, the node sets <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.ER according to the architecture-defined rules for setting the ER field. <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.ER is <arm-defined-word>RES0</arm-defined-word>.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>When an injected error is recorded, <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.ER is set to <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.ER. This behavior replaces the architecture-defined rules for setting the ER bit. <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.ER is a read/write field.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <fields_condition>When the node supports this flag</fields_condition>
  </field>
  <field id="fieldset_0-9_9-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RAZ" reserved_type="RAZ">
    <field_msb>9</field_msb>
    <field_lsb>9</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Reserved, RAZ.</para>
    </field_description>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-8_8-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RAZ">
    <field_name>CI</field_name>
    <field_msb>8</field_msb>
    <field_lsb>8</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Critical Error flag. Describes how the fault generation feature of the node sets the <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.CI status flag.</para>
    </field_description>
    <field_description order="after">
      <para>This behavior replaces the architecture-defined rules for setting the <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.CI bit.</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>When an injected error is recorded, it is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> whether the node sets <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.CI to 1. <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.CI is <arm-defined-word>RES0</arm-defined-word>.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>When an injected error is recorded, <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.CI is set to <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.CI. <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.CI is a read/write field.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <fields_condition>When the node supports this flag</fields_condition>
  </field>
  <field id="fieldset_0-8_8-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RAZ" reserved_type="RAZ">
    <field_msb>8</field_msb>
    <field_lsb>8</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Reserved, RAZ.</para>
    </field_description>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-7_6-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RAZ">
    <field_name>CE</field_name>
    <field_msb>7</field_msb>
    <field_lsb>6</field_lsb>
    <rel_range>1:0</rel_range>
    <field_description order="before">
      <para>Corrected Error generation. Describes the types of Corrected error that the fault generation feature of the node can generate.</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para>If <register_link state="ext" id="ext-errnfr.xml">ERR&lt;n&gt;FR</register_link>.FRX is 1 then <register_link state="ext" id="ext-errnfr.xml">ERR&lt;n&gt;FR</register_link>.CE indicates whether the node supports this type of error.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b00</field_value>
        <field_value_description>
          <para>The fault generation feature of the node does not generate Corrected errors. <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.CE is <arm-defined-word>RES0</arm-defined-word>.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b01</field_value>
        <field_value_description>
          <para>The fault generation feature of the node allows generation of a non-specific Corrected error, that is, a Corrected error that is recorded by setting <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.CE to <binarynumber>0b10</binarynumber>. <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.CE is a read/write field. The values <binarynumber>0b10</binarynumber> and <binarynumber>0b11</binarynumber> in <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.CE are reserved.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b11</field_value>
        <field_value_description>
          <para>The fault generation feature of the node allows generation of transient or persistent Corrected errors, that is, Corrected errors that are recorded by setting <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.CE to <binarynumber>0b01</binarynumber> or <binarynumber>0b11</binarynumber> respectively. <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.CE is a read/write field. The value <binarynumber>0b01</binarynumber> in <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.CE is reserved.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <fields_condition>When the node supports this type of error</fields_condition>
  </field>
  <field id="fieldset_0-7_6-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RAZ" reserved_type="RAZ">
    <field_msb>7</field_msb>
    <field_lsb>6</field_lsb>
    <rel_range>1:0</rel_range>
    <field_description order="before">
      <para>Reserved, RAZ.</para>
    </field_description>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-5_5-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RAZ">
    <field_name>DE</field_name>
    <field_msb>5</field_msb>
    <field_lsb>5</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Deferred Error generation. Describes whether the fault generation feature of the node can generate Deferred errors.</para>
    </field_description>
    <field_description order="after">
      <para>If <register_link state="ext" id="ext-errnfr.xml">ERR&lt;n&gt;FR</register_link>.FRX is 1 then <register_link state="ext" id="ext-errnfr.xml">ERR&lt;n&gt;FR</register_link>.DE indicates whether the node supports this type of error.</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>The fault generation feature of the node does not generate Deferred errors. <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.DE is <arm-defined-word>RES0</arm-defined-word>.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>The fault generation feature of the node allows generation of Deferred errors. <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.DE is a read/write field.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <fields_condition>When the node supports this type of error</fields_condition>
  </field>
  <field id="fieldset_0-5_5-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RAZ" reserved_type="RAZ">
    <field_msb>5</field_msb>
    <field_lsb>5</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Reserved, RAZ.</para>
    </field_description>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-4_4-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RAZ">
    <field_name>UEO</field_name>
    <field_msb>4</field_msb>
    <field_lsb>4</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Latent or Restartable Error generation. Describes whether the fault generation feature of the node can generate Latent or Restartable errors.</para>
    </field_description>
    <field_description order="after">
      <para>If <register_link state="ext" id="ext-errnfr.xml">ERR&lt;n&gt;FR</register_link>.FRX is 1 then <register_link state="ext" id="ext-errnfr.xml">ERR&lt;n&gt;FR</register_link>.UEO indicates whether the node supports this type of error.</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>The fault generation feature of the node does not generate Latent or Restartable errors. <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.UEO is <arm-defined-word>RES0</arm-defined-word>.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>The fault generation feature of the node allows generation of Latent or Restartable errors. <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.UEO is a read/write field.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <fields_condition>When the node supports this type of error</fields_condition>
  </field>
  <field id="fieldset_0-4_4-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RAZ" reserved_type="RAZ">
    <field_msb>4</field_msb>
    <field_lsb>4</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Reserved, RAZ.</para>
    </field_description>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-3_3-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RAZ">
    <field_name>UER</field_name>
    <field_msb>3</field_msb>
    <field_lsb>3</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Signaled or Recoverable Error generation. Describes whether the fault generation feature of the node can generate Signaled or Recoverable errors.</para>
    </field_description>
    <field_description order="after">
      <para>If <register_link state="ext" id="ext-errnfr.xml">ERR&lt;n&gt;FR</register_link>.FRX is 1 then <register_link state="ext" id="ext-errnfr.xml">ERR&lt;n&gt;FR</register_link>.UER indicates whether the node supports this type of error.</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>The fault generation feature of the node does not generate Signaled or Recoverable errors. <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.UER is <arm-defined-word>RES0</arm-defined-word>.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>The fault generation feature of the node allows generation of Signaled or Recoverable errors. <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.UER is a read/write field.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <fields_condition>When the node supports this type of error</fields_condition>
  </field>
  <field id="fieldset_0-3_3-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RAZ" reserved_type="RAZ">
    <field_msb>3</field_msb>
    <field_lsb>3</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Reserved, RAZ.</para>
    </field_description>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-2_2-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RAZ">
    <field_name>UEU</field_name>
    <field_msb>2</field_msb>
    <field_lsb>2</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Unrecoverable Error generation. Describes whether the fault generation feature of the node can generate Unrecoverable errors.</para>
    </field_description>
    <field_description order="after">
      <para>If <register_link state="ext" id="ext-errnfr.xml">ERR&lt;n&gt;FR</register_link>.FRX is 1 then <register_link state="ext" id="ext-errnfr.xml">ERR&lt;n&gt;FR</register_link>.UEU indicates whether the node supports this type of error.</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>The fault generation feature of the node does not generate Unrecoverable errors. <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.UEU is <arm-defined-word>RES0</arm-defined-word>.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>The fault generation feature of the node allows generation of Unrecoverable errors. <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.UEU is a read/write field.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <fields_condition>When the node supports this type of error</fields_condition>
  </field>
  <field id="fieldset_0-2_2-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RAZ" reserved_type="RAZ">
    <field_msb>2</field_msb>
    <field_lsb>2</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Reserved, RAZ.</para>
    </field_description>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-1_1-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RAZ">
    <field_name>UC</field_name>
    <field_msb>1</field_msb>
    <field_lsb>1</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Uncontainable Error generation. Describes whether the fault generation feature of the node can generate Uncontainable errors.</para>
    </field_description>
    <field_description order="after">
      <para>If <register_link state="ext" id="ext-errnfr.xml">ERR&lt;n&gt;FR</register_link>.FRX is 1 then <register_link state="ext" id="ext-errnfr.xml">ERR&lt;n&gt;FR</register_link>.UC indicates whether the node supports this type of error.</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>The fault generation feature of the node does not generate Uncontainable errors. <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.UC is <arm-defined-word>RES0</arm-defined-word>.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>The fault generation feature of the node allows generation of Uncontainable errors. <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.UC is a read/write field.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <fields_condition>When the node supports this type of error</fields_condition>
  </field>
  <field id="fieldset_0-1_1-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RAZ" reserved_type="RAZ">
    <field_msb>1</field_msb>
    <field_lsb>1</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Reserved, RAZ.</para>
    </field_description>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-0_0-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RAZ">
    <field_name>OF</field_name>
    <field_msb>0</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Overflow flag. Describes how the fault generation feature of the node sets the <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.OF status flag.</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>When an injected error is recorded, the node sets <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.OF according to the architecture-defined rules for setting the OF field. <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.OF is <arm-defined-word>RES0</arm-defined-word>.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>When an injected error is recorded, <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.OF is set to <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.OF. This behavior replaces the architecture-defined rules for setting the OF bit. <register_link state="ext" id="ext-errnpfgctl.xml">ERR&lt;n&gt;PFGCTL</register_link>.OF is a read/write field.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <fields_condition>When the node supports this flag</fields_condition>
  </field>
  <field id="fieldset_0-0_0-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RAZ" reserved_type="RAZ">
    <field_msb>0</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Reserved, RAZ.</para>
    </field_description>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <text_after_fields/>
</fields>




    
<reg_fieldset length="64">
  <fieldat id="fieldset_0-63_31" msb="63" lsb="31"/>
  <fieldat id="fieldset_0-30_30" msb="30" lsb="30"/>
  <fieldat id="fieldset_0-29_29" msb="29" lsb="29"/>
  <fieldat id="fieldset_0-28_28" msb="28" lsb="28"/>
  <fieldat id="fieldset_0-27_13" msb="27" lsb="13"/>
  <fieldat id="fieldset_0-12_12" msb="12" lsb="12"/>
  <fieldat id="fieldset_0-11_11" msb="11" lsb="11"/>
  <fieldat id="fieldset_0-10_10-1" msb="10" lsb="10"/>
  <fieldat id="fieldset_0-9_9-1" msb="9" lsb="9"/>
  <fieldat id="fieldset_0-8_8-1" msb="8" lsb="8"/>
  <fieldat id="fieldset_0-7_6-1" msb="7" lsb="6"/>
  <fieldat id="fieldset_0-5_5-1" msb="5" lsb="5"/>
  <fieldat id="fieldset_0-4_4-1" msb="4" lsb="4"/>
  <fieldat id="fieldset_0-3_3-1" msb="3" lsb="3"/>
  <fieldat id="fieldset_0-2_2-1" msb="2" lsb="2"/>
  <fieldat id="fieldset_0-1_1-1" msb="1" lsb="1"/>
  <fieldat id="fieldset_0-0_0-1" msb="0" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>
        <reg_variables>
              <reg_variable variable="n" max="65534"/>
        </reg_variables>

      <access_mechanisms>
          







      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>30/03/2023 19:07; 997dd0cf3258cacf72aa7cf7a885f19a4758c3af</timestamp>
</register_page>