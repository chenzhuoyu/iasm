<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register is_register="True" is_internal="False" is_banked="False" is_stub_entry="False">
      <reg_short_name>GICD_IPRIORITYR&lt;n&gt;</reg_short_name>
        
        <reg_long_name>Interrupt Priority Registers</reg_long_name>



      
          <reg_array>
              <reg_array_start>0</reg_array_start>
              <reg_array_end>254</reg_array_end>
         </reg_array>
      
  <reg_address
      external_access="False"
    mem_map_access="True"
      power_domain="None"
  >
    <reg_component>GIC Distributor</reg_component>
    <reg_frame>Dist_base</reg_frame>
    <reg_offset><hexnumber>0x0400</hexnumber> + (4 * n)</reg_offset>
    <reg_instance>GICD_IPRIORITYR&lt;n&gt;</reg_instance>
    <reg_access>
      
        
      <reg_access_state>
          <reg_access_type>RW</reg_access_type>
      </reg_access_state>
    </reg_access>
</reg_address>



          <reg_reset_value></reg_reset_value>

      <reg_mappings>
        




      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>Holds the priority of the corresponding interrupt.</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
            <reg_group>GIC Distributor registers</reg_group>
      </reg_groups>
      <reg_configuration>
        
    
      <configuration_text>
        <para>These registers are available in all configurations of the GIC. When <register_link state="ext" id="ext-gicd_ctlr.xml">GICD_CTLR</register_link>.DS==0, these registers are Common.</para>

      </configuration_text>
      <configuration_text>
        <para>The number of implemented GICD_IPRIORITYR&lt;n&gt; registers is 8*(<register_link state="ext" id="ext-gicd_typer.xml">GICD_TYPER</register_link>.ITLinesNumber+1). Registers are numbered from 0.</para>

      </configuration_text>
      <configuration_text>
        <para>GICD_IPRIORITYR0 to GICD_IPRIORITYR7 are Banked for each connected PE with <register_link state="ext" id="ext-gicr_typer.xml">GICR_TYPER</register_link>.Processor_Number &lt; 8.</para>

      </configuration_text>
      <configuration_text>
        <para>Accessing GICD_IPRIORITYR0 to GICD_IPRIORITYR7 from a PE with <register_link state="ext" id="ext-gicr_typer.xml">GICR_TYPER</register_link>.Processor_Number &gt; 7 is <arm-defined-word>CONSTRAINED UNPREDICTABLE</arm-defined-word>:</para>

      </configuration_text>
      <configuration_text>
        <list type="unordered">
<listitem><content>Register is RAZ/WI.</content>
</listitem><listitem><content>An <arm-defined-word>UNKNOWN</arm-defined-word> banked copy of the register is accessed.</content>
</listitem></list>
      </configuration_text>

      </reg_configuration>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>GICD_IPRIORITYR&lt;n&gt; is a 32-bit register.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        






<fields id="fieldset_0" length="32">
  <text_before_fields/>
  <field id="fieldset_0-31_24" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>Priority_offset_3B</field_name>
    <field_msb>31</field_msb>
    <field_lsb>24</field_lsb>
    <rel_range>31:24</rel_range>
    <field_description order="before">
      <para>Interrupt priority value from an <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> range, at byte offset 3. Lower priority values correspond to greater priority of the interrupt.</para>
    </field_description>
    <field_resets>
      <field_reset reset_type="GIC">
        <field_reset_number>0</field_reset_number>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_0-23_16" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>Priority_offset_2B</field_name>
    <field_msb>23</field_msb>
    <field_lsb>16</field_lsb>
    <rel_range>23:16</rel_range>
    <field_description order="before">
      <para>Interrupt priority value from an <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> range, at byte offset 2. Lower priority values correspond to greater priority of the interrupt.</para>
    </field_description>
    <field_resets>
      <field_reset reset_type="GIC">
        <field_reset_number>0</field_reset_number>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_0-15_8" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>Priority_offset_1B</field_name>
    <field_msb>15</field_msb>
    <field_lsb>8</field_lsb>
    <rel_range>15:8</rel_range>
    <field_description order="before">
      <para>Interrupt priority value from an <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> range, at byte offset 1. Lower priority values correspond to greater priority of the interrupt.</para>
    </field_description>
    <field_resets>
      <field_reset reset_type="GIC">
        <field_reset_number>0</field_reset_number>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_0-7_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>Priority_offset_0B</field_name>
    <field_msb>7</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>7:0</rel_range>
    <field_description order="before">
      <para>Interrupt priority value from an <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> range, at byte offset 0. Lower priority values correspond to greater priority of the interrupt.</para>
    </field_description>
    <field_resets>
      <field_reset reset_type="GIC">
        <field_reset_number>0</field_reset_number>
      </field_reset>
    </field_resets>
  </field>
  <text_after_fields><para>For interrupt ID m, when DIV and MOD are the integer division and modulo operations:</para>
<list type="unordered">
<listitem><content>The corresponding GICD_IPRIORITYR&lt;n&gt; number, n, is given by n = m DIV 4.</content>
</listitem><listitem><content>The offset of the required GICD_IPRIORITYR&lt;n&gt; register is (<hexnumber>0x400</hexnumber> + (4*n)).</content>
</listitem><listitem><content>The byte offset of the required Priority field in this register is m MOD 4, where:<list type="unordered">
<listitem><content>Byte offset 0 refers to register bits [7:0].</content>
</listitem><listitem><content>Byte offset 1 refers to register bits [15:8].</content>
</listitem><listitem><content>Byte offset 2 refers to register bits [23:16].</content>
</listitem><listitem><content>Byte offset 3 refers to register bits [31:24].</content>
</listitem></list>
</content>
</listitem></list></text_after_fields>
</fields>




    
<reg_fieldset length="32">
  <fieldat id="fieldset_0-31_24" msb="31" lsb="24"/>
  <fieldat id="fieldset_0-23_16" msb="23" lsb="16"/>
  <fieldat id="fieldset_0-15_8" msb="15" lsb="8"/>
  <fieldat id="fieldset_0-7_0" msb="7" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>
        <reg_variables>
              <reg_variable variable="n" max="254"/>
        </reg_variables>

      <access_mechanisms>
          


  
    
      <access_permission_text>
        <para>These registers are always used when affinity routing is not enabled. When affinity routing is enabled for the Security state of an interrupt:</para>

      </access_permission_text>
      <access_permission_text>
        <list type="unordered">
<listitem><content><register_link state="ext" id="ext-gicr_ipriorityrn.xml">GICR_IPRIORITYR&lt;n&gt;</register_link> is used instead of GICD_IPRIORITYR&lt;n&gt; where n = 0 to 7 (that is, for SGIs and PPIs).</content>
</listitem><listitem><content>GICD_IPRIORITYR&lt;n&gt; is RAZ/WI where n = 0 to 7.</content>
</listitem></list>

      </access_permission_text>
      <access_permission_text>
        <para>These registers are byte-accessible.</para>

      </access_permission_text>
      <access_permission_text>
        <para>A register field corresponding to an unimplemented interrupt is RAZ/WI.</para>

      </access_permission_text>
      <access_permission_text>
        <para>A GIC might implement fewer than eight priority bits, but must implement at least bits [7:4] of each field. In each field, unimplemented bits are RAZ/WI, see <xref browsertext="'Interrupt prioritization' in ARM&#174; Generic Interrupt Controller Architecture Specification, GIC architecture version 3.0 and version 4.0 (ARM IHI 0069)" filename="AS_interrupt_handling_and_prioritization.fm" linkend="CJHFJEBC"/>.</para>

      </access_permission_text>
      <access_permission_text>
        <para>When <register_link state="ext" id="ext-gicd_ctlr.xml">GICD_CTLR</register_link>.DS==0:</para>

      </access_permission_text>
      <access_permission_text>
        <list type="unordered">
<listitem><content>A register bit that corresponds to a Group 0 or Secure Group 1 interrupt is RAZ/WI to Non-secure accesses.</content>
</listitem><listitem><content>A Non-secure access to a field that corresponds to a Non-secure Group 1 interrupt behaves as described in <xref browsertext="'Software accesses of interrupt priority' in ARM&#174; Generic Interrupt Controller Architecture Specification, GIC architecture version 3.0 and version 4.0 (ARM IHI 0069)" filename="AS_interrupt_handling_and_prioritization.fm" linkend="CJHECCCE"/>.</content>
</listitem></list>

      </access_permission_text>
      <access_permission_text>
        <para>It is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> whether changing the value of a priority field changes the priority of an active interrupt.</para>

      </access_permission_text>
      <access_permission_text>
        <note><para>Implementations must ensure that an interrupt that is pending at the time of the write uses either the old value or the new value and must ensure that the interrupt is neither lost nor handled more than one time. The effect of the change must be visible in finite time.</para></note>
      </access_permission_text>






      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>30/03/2023 19:06; 997dd0cf3258cacf72aa7cf7a885f19a4758c3af</timestamp>
</register_page>