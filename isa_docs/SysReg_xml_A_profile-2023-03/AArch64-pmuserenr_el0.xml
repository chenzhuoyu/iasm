<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register execution_state="AArch64" is_register="True" is_internal="True" is_banked="False" is_stub_entry="False">
      <reg_short_name>PMUSERENR_EL0</reg_short_name>
        
        <reg_long_name>Performance Monitors User Enable Register</reg_long_name>



      
        <reg_condition otherwise="UNDEFINED">when FEAT_PMUv3 is implemented</reg_condition>
      



          <reg_reset_value>

      </reg_reset_value>

      <reg_mappings>
        



      
      <reg_mapping>
        
  

    

    <mapped_name filename="AArch32-pmuserenr.xml">PMUSERENR</mapped_name>
  <mapped_type>Architectural</mapped_type>
      <mapped_execution_state>AArch32</mapped_execution_state>
    <mapped_from_startbit>31</mapped_from_startbit>
    <mapped_from_endbit>0</mapped_from_endbit>
    <mapped_to_startbit>31</mapped_to_startbit>
    <mapped_to_endbit>0</mapped_to_endbit>
    <mapped_from_rangeset output="31:0">
      <range>
        <msb>31</msb>
        <lsb>0</lsb>
      </range>
    </mapped_from_rangeset>
    <mapped_to_rangeset output="31:0">
      <range>
        <msb>31</msb>
        <lsb>0</lsb>
      </range>
    </mapped_to_rangeset>

      </reg_mapping>

      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>Enables or disables EL0 access to the Performance Monitors.</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
          <reg_group>Performance Monitors registers</reg_group>
      </reg_groups>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>PMUSERENR_EL0 is a 64-bit register.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        






<fields id="fieldset_0" length="64">
  <fields_instance>PMUSERENR_EL0</fields_instance>
  <text_before_fields/>
  <field id="fieldset_0-63_7" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0">
    <field_msb>63</field_msb>
    <field_lsb>7</field_lsb>
    <rel_range>63:7</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
  </field>
  <field id="fieldset_0-6_6-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RES0">
    <field_name>TID</field_name>
    <field_msb>6</field_msb>
    <field_lsb>6</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Trap ID registers. Traps EL0 read access to common event identification registers.</para>
    </field_description>
    <field_description order="after"><para>In AArch64 state, the register accesses affected by this control are:</para>
<list type="unordered">
<listitem><content><instruction>MRS</instruction> reads of <register_link state="AArch64" id="AArch64-pmceid0_el0.xml">PMCEID0_EL0</register_link> and <register_link state="AArch64" id="AArch64-pmceid1_el0.xml">PMCEID1_EL0</register_link>.</content>
</listitem></list>
<para>In AArch32 state, the register accesses affected by this control are:</para>
<list type="unordered">
<listitem><content><instruction>MRC</instruction> reads of <register_link state="AArch32" id="AArch32-pmceid0.xml">PMCEID0</register_link>, <register_link state="AArch32" id="AArch32-pmceid1.xml">PMCEID1</register_link>, <register_link state="AArch32" id="AArch32-pmceid2.xml">PMCEID2</register_link>, and <register_link state="AArch32" id="AArch32-pmceid3.xml">PMCEID3</register_link>.</content>
</listitem></list>
<para>When trapped, reads generate an exception to EL1, or to EL2 when EL2 is implemented and enabled for the current Security state and <register_link state="AArch64" id="AArch64-hcr_el2.xml">HCR_EL2</register_link>.TGE is 1, and:</para>
<list type="unordered">
<listitem><content>AArch64 <instruction>MRS</instruction> reads are reported using EC syndrome value <hexnumber>0x18</hexnumber>.</content>
</listitem><listitem><content>AArch32 <instruction>MRC</instruction> reads are reported using EC syndrome value <hexnumber>0x03</hexnumber>.</content>
</listitem></list></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>Accesses to PMCEID&lt;n&gt;_EL0 and PMCEID&lt;n&gt; are not trapped by this mechanism.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>EL0 read accesses to PMCEID&lt;n&gt;_EL0 and PMCEID&lt;n&gt; are trapped.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
    <fields_condition>When FEAT_PMUv3p9 is implemented</fields_condition>
  </field>
  <field id="fieldset_0-6_6-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0" reserved_type="RES0">
    <field_msb>6</field_msb>
    <field_lsb>6</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-5_5-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RES0">
    <field_name>IR</field_name>
    <field_msb>5</field_msb>
    <field_lsb>5</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before"><para>Instruction counter Read-only.</para>
<para>When PMUSERENR_EL0.UEN is 1, EL0 reads of the instruction counter and EL0 writes to <register_link state="AArch64" id="AArch64-pmzr_el0.xml">PMZR_EL0</register_link> are enabled by PMUSERENR_EL0.UEN, unless trapped by another control, and PMUSERENR_EL0.IR controls the behavior of EL0 writes to the instruction counter and <register_link state="AArch64" id="AArch64-pmzr_el0.xml">PMZR_EL0</register_link>.</para></field_description>
    <field_description order="after"><para>In AArch64 state, when PMUSERENR_EL0.UEN is 1, <instruction>MSR</instruction> writes to <register_link state="AArch64" id="AArch64-pmzr_el0.xml">PMZR_EL0</register_link> and <register_link state="AArch64" id="AArch64-pmicntr_el0.xml">PMICNTR_EL0</register_link> are affected by this control.</para>
<para>Ignored writes are not trapped and do not generate an exception.</para>
<para>This field is ignored by the PE when PMUSERENR_EL0.UEN == 0.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>Permitted EL0 writes are not affected by this mechanism.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>Permitted EL0 writes to the instruction counter and <register_link state="AArch64" id="AArch64-pmzr_el0.xml">PMZR_EL0</register_link>.F0 are ignored.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
    <fields_condition>When FEAT_PMUv3_ICNTR is implemented</fields_condition>
  </field>
  <field id="fieldset_0-5_5-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0" reserved_type="RES0">
    <field_msb>5</field_msb>
    <field_lsb>5</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-4_4-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RES0">
    <field_name>UEN</field_name>
    <field_msb>4</field_msb>
    <field_lsb>4</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>User Enable, with access controlled by <register_link state="AArch64" id="AArch64-pmuacr_el1.xml">PMUACR_EL1</register_link>. Enables EL0 read/write access to PMU registers, other than <register_link state="AArch64" id="AArch64-pmcr_el0.xml">PMCR_EL0</register_link>.</para>
    </field_description>
    <field_description order="after"><para>In AArch64 state, the register accesses affected by this control are:</para>
<list type="unordered">
<listitem><content><instruction>MRS</instruction> or <instruction>MSR</instruction> accesses to the following registers:<list type="unordered">
<listitem><content><register_link state="AArch64" id="AArch64-pmccfiltr_el0.xml">PMCCFILTR_EL0</register_link>, <register_link state="AArch64" id="AArch64-pmccntr_el0.xml">PMCCNTR_EL0</register_link>, <register_link state="AArch64" id="AArch64-pmcntenclr_el0.xml">PMCNTENCLR_EL0</register_link>, <register_link state="AArch64" id="AArch64-pmcntenset_el0.xml">PMCNTENSET_EL0</register_link>, <register_link state="AArch64" id="AArch64-pmevcntrn_el0.xml">PMEVCNTR&lt;n&gt;_EL0</register_link>, <register_link state="AArch64" id="AArch64-pmevtypern_el0.xml">PMEVTYPER&lt;n&gt;_EL0</register_link>, <register_link state="AArch64" id="AArch64-pmovsclr_el0.xml">PMOVSCLR_EL0</register_link>, <register_link state="AArch64" id="AArch64-pmovsset_el0.xml">PMOVSSET_EL0</register_link>, <register_link state="AArch64" id="AArch64-pmselr_el0.xml">PMSELR_EL0</register_link>, <register_link state="AArch64" id="AArch64-pmxevcntr_el0.xml">PMXEVCNTR_EL0</register_link>, and <register_link state="AArch64" id="AArch64-pmxevtyper_el0.xml">PMXEVTYPER_EL0</register_link>.</content>
</listitem><listitem><content>If <xref browsertext="FEAT_PMUv3_ICNTR" filename="A_armv8_architecture_extensions.fm" linkend="FEAT_PMUv3_ICNTR"/> is implemented, <register_link state="AArch64" id="AArch64-pmicfiltr_el0.xml">PMICFILTR_EL0</register_link> and <register_link state="AArch64" id="AArch64-pmicntr_el0.xml">PMICNTR_EL0</register_link>.</content>
</listitem></list>
</content>
</listitem><listitem><content><instruction>MRS</instruction> reads of <register_link state="AArch64" id="AArch64-pmceid0_el0.xml">PMCEID0_EL0</register_link> and <register_link state="AArch64" id="AArch64-pmceid1_el0.xml">PMCEID1_EL0</register_link>.</content>
</listitem><listitem><content><instruction>MSR</instruction> writes to <register_link state="AArch64" id="AArch64-pmswinc_el0.xml">PMSWINC_EL0</register_link> and <register_link state="AArch64" id="AArch64-pmzr_el0.xml">PMZR_EL0</register_link>.</content>
</listitem></list>
<para>In AArch32 state, the register accesses affected by this control are:</para>
<list type="unordered">
<listitem><content>
<para><instruction>MRC</instruction> or <instruction>MCR</instruction> accesses to <register_link state="AArch32" id="AArch32-pmccfiltr.xml">PMCCFILTR</register_link>, <register_link state="AArch32" id="AArch32-pmccntr.xml">PMCCNTR</register_link>, <register_link state="AArch32" id="AArch32-pmcntenclr.xml">PMCNTENCLR</register_link>, <register_link state="AArch32" id="AArch32-pmcntenset.xml">PMCNTENSET</register_link>, <register_link state="AArch32" id="AArch32-pmevcntrn.xml">PMEVCNTR&lt;n&gt;</register_link>, <register_link state="AArch32" id="AArch32-pmevtypern.xml">PMEVTYPER&lt;n&gt;</register_link>, <register_link state="AArch32" id="AArch32-pmovsr.xml">PMOVSR</register_link>, <register_link state="AArch32" id="AArch32-pmovsset.xml">PMOVSSET</register_link>, <register_link state="AArch32" id="AArch32-pmselr.xml">PMSELR</register_link>, <register_link state="AArch32" id="AArch32-pmxevcntr.xml">PMXEVCNTR</register_link>, and <register_link state="AArch32" id="AArch32-pmxevtyper.xml">PMXEVTYPER</register_link>.</para>
</content>
</listitem><listitem><content>
<para><instruction>MRC</instruction> reads of <register_link state="AArch32" id="AArch32-pmceid0.xml">PMCEID0</register_link>, <register_link state="AArch32" id="AArch32-pmceid1.xml">PMCEID1</register_link>, <register_link state="AArch32" id="AArch32-pmceid2.xml">PMCEID2</register_link>, and <register_link state="AArch32" id="AArch32-pmceid3.xml">PMCEID3</register_link>.</para>
</content>
</listitem><listitem><content>
<para><instruction>MCR</instruction> writes to <register_link state="AArch32" id="AArch32-pmswinc.xml">PMSWINC</register_link>.</para>
</content>
</listitem><listitem><content>
<para><instruction>MRRC</instruction> or <instruction>MCRR</instruction> accesses to <register_link state="AArch32" id="AArch32-pmccntr.xml">PMCCNTR</register_link>.</para>
</content>
</listitem></list>
<para>When trapped, reads and writes generate an exception to EL1, or to EL2 when EL2 is implemented and enabled for the current Security state and <register_link state="AArch64" id="AArch64-hcr_el2.xml">HCR_EL2</register_link>.TGE is 1, and:</para>
<list type="unordered">
<listitem><content>AArch64 <instruction>MRS</instruction> and <instruction>MSR</instruction> accesses are reported using EC syndrome value <hexnumber>0x18</hexnumber>.</content>
</listitem><listitem><content>AArch32 <instruction>MRC</instruction> and <instruction>MCR</instruction> accesses are reported using EC syndrome value <hexnumber>0x03</hexnumber>.</content>
</listitem><listitem><content>AArch32 <instruction>MRRC</instruction> and <instruction>MCRR</instruction> accesses are reported using EC syndrome value <hexnumber>0x04</hexnumber>.</content>
</listitem></list>
<para>This field is ignored by the PE and treated as zero when EL1 is using AArch32.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description><para>If <xref browsertext="FEAT_PMUv3_ICNTR" filename="A_armv8_architecture_extensions.fm" linkend="FEAT_PMUv3_ICNTR"/> is implemented, then EL0 accesses to <register_link state="AArch64" id="AArch64-pmicfiltr_el0.xml">PMICFILTR_EL0</register_link> and <register_link state="AArch64" id="AArch64-pmicntr_el0.xml">PMICNTR_EL0</register_link> are trapped.</para>
<para>EL0 accesses to the other specified PMU registers, <register_link state="AArch64" id="AArch64-pmcr_el0.xml">PMCR_EL0</register_link>, and <register_link state="AArch32" id="AArch32-pmcr.xml">PMCR</register_link> are trapped, unless enabled by PMUSERENR_EL0.{ER,CR,SW,EN}.</para></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description><para>EL0 accesses to the specified PMU registers are enabled, unless trapped by another control. The behavior of permitted accesses is controlled by PMUSERENR_EL0.{IR,ER,CR,SW} and <register_link state="AArch64" id="AArch64-pmuacr_el1.xml">PMUACR_EL1</register_link>.</para>
<para>EL0 accesses to <register_link state="AArch64" id="AArch64-pmcr_el0.xml">PMCR_EL0</register_link> and <register_link state="AArch32" id="AArch32-pmcr.xml">PMCR</register_link> are trapped.</para></field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
    <fields_condition>When FEAT_PMUv3p9 is implemented</fields_condition>
  </field>
  <field id="fieldset_0-4_4-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0" reserved_type="RES0">
    <field_msb>4</field_msb>
    <field_lsb>4</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-3_3-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RES0">
    <field_name>ER</field_name>
    <field_msb>3</field_msb>
    <field_lsb>3</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before"><para>Event counters Read enable or Read-only.</para>
<para>When PMUSERENR_EL0.{UEN,EN} is {0,0}, PMUSERENR_EL0.ER enables EL0 reads of the event counters and EL0 reads and writes of the select register.</para>
<para>When PMUSERENR_EL0.UEN is 1, EL0 reads of the event counters and EL0 writes to <register_link state="AArch64" id="AArch64-pmzr_el0.xml">PMZR_EL0</register_link> are enabled by PMUSERENR_EL0.UEN, unless trapped by another control, and PMUSERENR_EL0.ER controls the behavior of EL0 writes to the event counters and <register_link state="AArch64" id="AArch64-pmzr_el0.xml">PMZR_EL0</register_link>.</para></field_description>
    <field_description order="after"><para>In AArch64 state, the register accesses affected by this control are:</para>
<list type="unordered">
<listitem><content>When PMUSERENR_EL0.{UEN,EN} is {0,0}:<list type="unordered">
<listitem><content><instruction>MRS</instruction> reads of <register_link state="AArch64" id="AArch64-pmevcntrn_el0.xml">PMEVCNTR&lt;n&gt;_EL0</register_link> and <register_link state="AArch64" id="AArch64-pmxevcntr_el0.xml">PMXEVCNTR_EL0</register_link>.</content>
</listitem><listitem><content><instruction>MRS</instruction> and <instruction>MSR</instruction> accesses to <register_link state="AArch64" id="AArch64-pmselr_el0.xml">PMSELR_EL0</register_link>.</content>
</listitem></list>
</content>
</listitem><listitem><content>When PMUSERENR_EL0.UEN is 1, <instruction>MSR</instruction> writes to <register_link state="AArch64" id="AArch64-pmzr_el0.xml">PMZR_EL0</register_link>, <register_link state="AArch64" id="AArch64-pmevcntrn_el0.xml">PMEVCNTR&lt;n&gt;_EL0</register_link> and <register_link state="AArch64" id="AArch64-pmxevcntr_el0.xml">PMXEVCNTR_EL0</register_link>.</content>
</listitem></list>
<para>In AArch32 state, the register accesses affected by this control are:</para>
<list type="unordered">
<listitem><content>
<para>When PMUSERENR_EL0.{UEN,EN} is {0,0}:</para>
<list type="unordered">
<listitem><content>
<para><instruction>MRC</instruction> reads of <register_link state="AArch32" id="AArch32-pmevcntrn.xml">PMEVCNTR&lt;n&gt;</register_link> and <register_link state="AArch32" id="AArch32-pmxevcntr.xml">PMXEVCNTR</register_link>.</para>
</content>
</listitem><listitem><content>
<para><instruction>MRC</instruction> and <instruction>MCR</instruction> accesses to <register_link state="AArch32" id="AArch32-pmselr.xml">PMSELR</register_link>.</para>
</content>
</listitem></list>
</content>
</listitem><listitem><content>
<para>When PMUSERENR_EL0.UEN is 1, <instruction>MCR</instruction> writes to <register_link state="AArch32" id="AArch32-pmevcntrn.xml">PMEVCNTR&lt;n&gt;</register_link> and <register_link state="AArch32" id="AArch32-pmxevcntr.xml">PMXEVCNTR</register_link>.</para>
</content>
</listitem></list>
<para>When disabled, reads and writes generate an exception to EL1, or to EL2 when EL2 is implemented and enabled for the current Security state and <register_link state="AArch64" id="AArch64-hcr_el2.xml">HCR_EL2</register_link>.TGE is 1, and:</para>
<list type="unordered">
<listitem><content>AArch64 <instruction>MRS</instruction> and <instruction>MSR</instruction> accesses are reported using EC syndrome value <hexnumber>0x18</hexnumber>.</content>
</listitem><listitem><content>AArch32 <instruction>MRC</instruction> and <instruction>MCR</instruction> accesses are reported using EC syndrome value <hexnumber>0x03</hexnumber>.</content>
</listitem></list>
<para>Ignored writes are not trapped and do not generate an exception.</para>
<para>This field is ignored by the PE when PMUSERENR_EL0.{UEN,EN} == {0,1}.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description><para>When PMUSERENR_EL0.UEN == 0, EL0 reads of the event counters and EL0 reads and writes of the select register are disabled, unless enabled by PMUSERENR_EL0.EN.</para>
<para>When PMUSERENR_EL0.UEN == 1, permitted EL0 writes are not affected by this mechanism.</para></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description><para>When PMUSERENR_EL0.UEN == 0, EL0 reads of the event counters and EL0 reads and writes of the select register are enabled, unless trapped by another control.</para>
<para>When PMUSERENR_EL0.UEN == 1, permitted EL0 writes to the event counters and <register_link state="AArch64" id="AArch64-pmzr_el0.xml">PMZR_EL0</register_link>.P[30:0] are ignored.</para></field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
    <fields_condition>When FEAT_PMUv3p9 is implemented</fields_condition>
  </field>
  <field id="fieldset_0-3_3-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RES0">
    <field_name>ER</field_name>
    <field_msb>3</field_msb>
    <field_lsb>3</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before"><para>Event counters Read enable.</para>
<para>When PMUSERENR_EL0.EN is 0, PMUSERENR_EL0.ER enables EL0 reads of the event counters and EL0 reads and writes of the select register.</para></field_description>
    <field_description order="after"><para>In AArch64 state, the register accesses affected by this control are:</para>
<list type="unordered">
<listitem><content><instruction>MRS</instruction> reads of <register_link state="AArch64" id="AArch64-pmevcntrn_el0.xml">PMEVCNTR&lt;n&gt;_EL0</register_link> and <register_link state="AArch64" id="AArch64-pmxevcntr_el0.xml">PMXEVCNTR_EL0</register_link>.</content>
</listitem><listitem><content><instruction>MRS</instruction> and <instruction>MSR</instruction> accesses to <register_link state="AArch64" id="AArch64-pmselr_el0.xml">PMSELR_EL0</register_link>.</content>
</listitem></list>
<para>In AArch32 state, the register accesses affected by this control are:</para>
<list type="unordered">
<listitem><content>
<para><instruction>MRC</instruction> reads of <register_link state="AArch32" id="AArch32-pmevcntrn.xml">PMEVCNTR&lt;n&gt;</register_link> and <register_link state="AArch32" id="AArch32-pmxevcntr.xml">PMXEVCNTR</register_link>.</para>
</content>
</listitem><listitem><content>
<para><instruction>MRC</instruction> and <instruction>MCR</instruction> accesses to <register_link state="AArch32" id="AArch32-pmselr.xml">PMSELR</register_link>.</para>
</content>
</listitem></list>
<para>When disabled, reads and writes generate an exception to EL1, or to EL2 when EL2 is implemented and enabled for the current Security state and <register_link state="AArch64" id="AArch64-hcr_el2.xml">HCR_EL2</register_link>.TGE is 1, and:</para>
<list type="unordered">
<listitem><content>AArch64 <instruction>MRS</instruction> and <instruction>MSR</instruction> accesses are reported using EC syndrome value <hexnumber>0x18</hexnumber>.</content>
</listitem><listitem><content>AArch32 <instruction>MRC</instruction> and <instruction>MCR</instruction> accesses are reported using EC syndrome value <hexnumber>0x03</hexnumber>.</content>
</listitem></list>
<para>This field is ignored by the PE when PMUSERENR_EL0.EN == 1.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>EL0 reads of the event counters and EL0 reads and writes of the select register are disabled, unless enabled by PMUSERENR_EL0.EN.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>EL0 reads of the event counters and EL0 reads and writes of the select register are enabled, unless trapped by another control.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-2_2-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RES0">
    <field_name>CR</field_name>
    <field_msb>2</field_msb>
    <field_lsb>2</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before"><para>Cycle counter Read enable or Read-only.</para>
<para>When PMUSERENR_EL0.{UEN,EN} is {0,0}, PMUSERENR_EL0.CR enables EL0 reads of the cycle counter.</para>
<para>When PMUSERENR_EL0.UEN is 1, EL0 reads of the cycle counter and EL0 writes to <register_link state="AArch64" id="AArch64-pmzr_el0.xml">PMZR_EL0</register_link> are enabled by PMUSERENR_EL0.UEN, unless trapped by another control, and PMUSERENR_EL0.CR controls the behavior of EL0 writes to the cycle counter and <register_link state="AArch64" id="AArch64-pmzr_el0.xml">PMZR_EL0</register_link>.</para></field_description>
    <field_description order="after"><para>In AArch64 state, the register accesses affected by this control are:</para>
<list type="unordered">
<listitem><content>When PMUSERENR_EL0.{UEN,EN} is {0,0}, <instruction>MRS</instruction> reads of <register_link state="AArch64" id="AArch64-pmccntr_el0.xml">PMCCNTR_EL0</register_link>.</content>
</listitem><listitem><content>When PMUSERENR_EL0.UEN is 1, <instruction>MSR</instruction> writes to <register_link state="AArch64" id="AArch64-pmzr_el0.xml">PMZR_EL0</register_link> and <register_link state="AArch64" id="AArch64-pmccntr_el0.xml">PMCCNTR_EL0</register_link>.</content>
</listitem></list>
<para>In AArch32 state, the register accesses affected by this control are:</para>
<list type="unordered">
<listitem><content>
<para>When PMUSERENR_EL0.{UEN,EN} is {0,0}:</para>
<list type="unordered">
<listitem><content>
<para><instruction>MRC</instruction> reads of <register_link state="AArch32" id="AArch32-pmccntr.xml">PMCCNTR</register_link>.</para>
</content>
</listitem><listitem><content>
<para><instruction>MRRC</instruction> reads of <register_link state="AArch32" id="AArch32-pmccntr.xml">PMCCNTR</register_link>.</para>
</content>
</listitem></list>
</content>
</listitem><listitem><content>
<para>When PMUSERENR_EL0.UEN is 1:</para>
<list type="unordered">
<listitem><content>
<para><instruction>MCR</instruction> writes to <register_link state="AArch32" id="AArch32-pmccntr.xml">PMCCNTR</register_link>.</para>
</content>
</listitem><listitem><content>
<para><instruction>MCRR</instruction> writes to <register_link state="AArch32" id="AArch32-pmccntr.xml">PMCCNTR</register_link>.</para>
</content>
</listitem></list>
</content>
</listitem></list>
<para>When disabled, reads generate an exception to EL1, or to EL2 when EL2 is implemented and enabled for the current Security state and <register_link state="AArch64" id="AArch64-hcr_el2.xml">HCR_EL2</register_link>.TGE is 1, and:</para>
<list type="unordered">
<listitem><content>AArch64 <instruction>MRS</instruction> reads are reported using EC syndrome value <hexnumber>0x18</hexnumber>.</content>
</listitem><listitem><content>AArch32 <instruction>MRC</instruction> reads are reported using EC syndrome value <hexnumber>0x03</hexnumber>.</content>
</listitem><listitem><content>AArch32 <instruction>MRRC</instruction> reads are reported using EC syndrome value <hexnumber>0x04</hexnumber>.</content>
</listitem></list>
<para>Ignored writes are not trapped and do not generate an exception.</para>
<para>This field is ignored by the PE when PMUSERENR_EL0.{UEN,EN} == {0,1}.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description><para>When PMUSERENR_EL0.UEN == 0, EL0 reads of the cycle counter are disabled, unless enabled by PMUSERENR_EL0.EN.</para>
<para>When PMUSERENR_EL0.UEN == 1, permitted EL0 writes are not affected by this mechanism.</para></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description><para>When PMUSERENR_EL0.UEN == 0, EL0 reads of the cycle counter are enabled, unless trapped by another control.</para>
<para>When PMUSERENR_EL0.UEN == 1, permitted EL0 writes to the cycle counter and <register_link state="AArch64" id="AArch64-pmzr_el0.xml">PMZR_EL0</register_link>.C are ignored.</para></field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
    <fields_condition>When FEAT_PMUv3p9 is implemented</fields_condition>
  </field>
  <field id="fieldset_0-2_2-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RES0">
    <field_name>CR</field_name>
    <field_msb>2</field_msb>
    <field_lsb>2</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before"><para>Cycle counter Read enable.</para>
<para>When PMUSERENR_EL0.EN is 0, PMUSERENR_EL0.CR enables EL0 reads of the cycle counter.</para></field_description>
    <field_description order="after"><para>In AArch64 state, the register accesses affected by this control are:</para>
<list type="unordered">
<listitem><content><instruction>MRS</instruction> reads of <register_link state="AArch64" id="AArch64-pmccntr_el0.xml">PMCCNTR_EL0</register_link>.</content>
</listitem></list>
<para>In AArch32 state, the register accesses affected by this control are:</para>
<list type="unordered">
<listitem><content>
<para><instruction>MRC</instruction> reads of <register_link state="AArch32" id="AArch32-pmccntr.xml">PMCCNTR</register_link>.</para>
</content>
</listitem><listitem><content>
<para><instruction>MRRC</instruction> reads of <register_link state="AArch32" id="AArch32-pmccntr.xml">PMCCNTR</register_link>.</para>
</content>
</listitem></list>
<para>When disabled, reads generate an exception to EL1, or to EL2 when EL2 is implemented and enabled for the current Security state and <register_link state="AArch64" id="AArch64-hcr_el2.xml">HCR_EL2</register_link>.TGE is 1, and:</para>
<list type="unordered">
<listitem><content>AArch64 <instruction>MRS</instruction> reads are reported using EC syndrome value <hexnumber>0x18</hexnumber>.</content>
</listitem><listitem><content>AArch32 <instruction>MRC</instruction> reads are reported using EC syndrome value <hexnumber>0x03</hexnumber>.</content>
</listitem><listitem><content>AArch32 <instruction>MRRC</instruction> reads are reported using EC syndrome value <hexnumber>0x04</hexnumber>.</content>
</listitem></list>
<para>This field is ignored by the PE when PMUSERENR_EL0.EN == 1.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>EL0 reads of the cycle counter are disabled, unless enabled by PMUSERENR_EL0.EN.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>EL0 reads of the cycle counter are enabled, unless trapped by another control.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-1_1-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RES0">
    <field_name>SW</field_name>
    <field_msb>1</field_msb>
    <field_lsb>1</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before"><para>Software increment register Write enable.</para>
<para>When PMUSERENR_EL0.UEN is 0, PMUSERENR_EL0.SW enables EL0 writes to the Software increment register.</para>
<para>When PMUSERENR_EL0.UEN is 1, EL0 writes to the Software increment register are enabled by PMUSERENR_EL0.UEN, unless trapped by another control, and PMUSERENR_EL0.SW controls the behavior of EL0 writes to the Software increment register.</para></field_description>
    <field_description order="after"><para>In AArch64 state, the register accesses affected by this control are:</para>
<list type="unordered">
<listitem><content><instruction>MSR</instruction> writes to <register_link state="AArch64" id="AArch64-pmswinc_el0.xml">PMSWINC_EL0</register_link>.</content>
</listitem></list>
<para>In AArch32 state, the register accesses affected by this control are:</para>
<list type="unordered">
<listitem><content><instruction>MCR</instruction> writes to <register_link state="AArch32" id="AArch32-pmswinc.xml">PMSWINC</register_link>.</content>
</listitem></list>
<para>When disabled, writes generate an exception to EL1, or to EL2 when EL2 is implemented and enabled for the current Security state and <register_link state="AArch64" id="AArch64-hcr_el2.xml">HCR_EL2</register_link>.TGE is 1, and:</para>
<list type="unordered">
<listitem><content>AArch64 <instruction>MSR</instruction> writes are reported using EC syndrome value <hexnumber>0x18</hexnumber>.</content>
</listitem><listitem><content>AArch32 <instruction>MCR</instruction> writes are reported using EC syndrome value <hexnumber>0x03</hexnumber>.</content>
</listitem></list>
<para>This field is ignored by the PE when PMUSERENR_EL0.{UEN,EN} == {0,1}.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description><para>When PMUSERENR_EL0.UEN == 0, EL0 writes to the Software increment register are disabled, unless enabled by PMUSERENR_EL0.EN.</para>
<para>When PMUSERENR_EL0.UEN == 1, permitted EL0 writes are not affected by this mechanism.</para></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description><para>When PMUSERENR_EL0.UEN == 0, EL0 writes to the Software increment register are enabled, unless trapped by another control.</para>
<para>When PMUSERENR_EL0.UEN == 1, permitted EL0 writes to the Software increment register ignore the value of <register_link state="AArch64" id="AArch64-pmuacr_el1.xml">PMUACR_EL1</register_link>.</para></field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
    <fields_condition>When FEAT_PMUv3p9 is implemented</fields_condition>
  </field>
  <field id="fieldset_0-1_1-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RES0">
    <field_name>SW</field_name>
    <field_msb>1</field_msb>
    <field_lsb>1</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before"><para>Software increment register Write enable.</para>
<para>When PMUSERENR_EL0.EN is 0, PMUSERENR_EL0.SW enables EL0 writes to the Software increment register.</para></field_description>
    <field_description order="after"><para>In AArch64 state, the register accesses affected by this control are:</para>
<list type="unordered">
<listitem><content><instruction>MSR</instruction> writes to <register_link state="AArch64" id="AArch64-pmswinc_el0.xml">PMSWINC_EL0</register_link>.</content>
</listitem></list>
<para>In AArch32 state, the register accesses affected by this control are:</para>
<list type="unordered">
<listitem><content><instruction>MCR</instruction> writes to <register_link state="AArch32" id="AArch32-pmswinc.xml">PMSWINC</register_link>.</content>
</listitem></list>
<para>When disabled, writes generate an exception to EL1, or to EL2 when EL2 is implemented and enabled for the current Security state and <register_link state="AArch64" id="AArch64-hcr_el2.xml">HCR_EL2</register_link>.TGE is 1, and:</para>
<list type="unordered">
<listitem><content>AArch64 <instruction>MSR</instruction> writes are reported using EC syndrome value <hexnumber>0x18</hexnumber>.</content>
</listitem><listitem><content>AArch32 <instruction>MCR</instruction> writes are reported using EC syndrome value <hexnumber>0x03</hexnumber>.</content>
</listitem></list>
<para>This field is ignored by the PE when PMUSERENR_EL0.EN == 1.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>EL0 writes to the Software increment register are disabled, unless enabled by PMUSERENR_EL0.EN.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>EL0 writes to the Software increment register are enabled, unless trapped by another control.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-0_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>EN</field_name>
    <field_msb>0</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before"><para>Enable.</para>
<para>Enables EL0 read/write access to PMU registers, other than the instruction counter.</para></field_description>
    <field_description order="after"><para>In AArch64 state, the register accesses affected by this control are:</para>
<list type="unordered">
<listitem><content><instruction>MRS</instruction> or <instruction>MSR</instruction> accesses to <register_link state="AArch64" id="AArch64-pmccfiltr_el0.xml">PMCCFILTR_EL0</register_link>, <register_link state="AArch64" id="AArch64-pmccntr_el0.xml">PMCCNTR_EL0</register_link>, <register_link state="AArch64" id="AArch64-pmcntenclr_el0.xml">PMCNTENCLR_EL0</register_link>, <register_link state="AArch64" id="AArch64-pmcntenset_el0.xml">PMCNTENSET_EL0</register_link>, <register_link state="AArch64" id="AArch64-pmcr_el0.xml">PMCR_EL0</register_link>, <register_link state="AArch64" id="AArch64-pmevcntrn_el0.xml">PMEVCNTR&lt;n&gt;_EL0</register_link>, <register_link state="AArch64" id="AArch64-pmevtypern_el0.xml">PMEVTYPER&lt;n&gt;_EL0</register_link>, <register_link state="AArch64" id="AArch64-pmovsclr_el0.xml">PMOVSCLR_EL0</register_link>, <register_link state="AArch64" id="AArch64-pmovsset_el0.xml">PMOVSSET_EL0</register_link>, <register_link state="AArch64" id="AArch64-pmselr_el0.xml">PMSELR_EL0</register_link>, <register_link state="AArch64" id="AArch64-pmxevcntr_el0.xml">PMXEVCNTR_EL0</register_link>, and <register_link state="AArch64" id="AArch64-pmxevtyper_el0.xml">PMXEVTYPER_EL0</register_link>.</content>
</listitem><listitem><content><instruction>MRS</instruction> reads of <register_link state="AArch64" id="AArch64-pmceid0_el0.xml">PMCEID0_EL0</register_link> and <register_link state="AArch64" id="AArch64-pmceid1_el0.xml">PMCEID1_EL0</register_link>.</content>
</listitem><listitem><content><instruction>MSR</instruction> writes to the following registers:<list type="unordered">
<listitem><content><register_link state="AArch64" id="AArch64-pmswinc_el0.xml">PMSWINC_EL0</register_link>.</content>
</listitem><listitem><content>If <xref browsertext="FEAT_PMUv3p9" filename="A_armv8_architecture_extensions.fm" linkend="FEAT_PMUv3p9"/> is implemented, <register_link state="AArch64" id="AArch64-pmzr_el0.xml">PMZR_EL0</register_link>.</content>
</listitem></list>
</content>
</listitem></list>
<note><para>When <xref browsertext="FEAT_PMUv3_ICNTR" filename="A_armv8_architecture_extensions.fm" linkend="FEAT_PMUv3_ICNTR"/> is implemented, this field does not affect <instruction>MRS</instruction> and <instruction>MSR</instruction> accesses to <register_link state="AArch64" id="AArch64-pmicntr_el0.xml">PMICNTR_EL0</register_link> and <register_link state="AArch64" id="AArch64-pmicfiltr_el0.xml">PMICFILTR_EL0</register_link>.</para></note><para>In AArch32 state, the register accesses affected by this control are:</para>
<list type="unordered">
<listitem><content>
<para><instruction>MRC</instruction> or <instruction>MCR</instruction> accesses to <register_link state="AArch32" id="AArch32-pmccfiltr.xml">PMCCFILTR</register_link>, <register_link state="AArch32" id="AArch32-pmccntr.xml">PMCCNTR</register_link>, <register_link state="AArch32" id="AArch32-pmcntenclr.xml">PMCNTENCLR</register_link>, <register_link state="AArch32" id="AArch32-pmcntenset.xml">PMCNTENSET</register_link>, <register_link state="AArch32" id="AArch32-pmcr.xml">PMCR</register_link>, <register_link state="AArch32" id="AArch32-pmevcntrn.xml">PMEVCNTR&lt;n&gt;</register_link>, <register_link state="AArch32" id="AArch32-pmevtypern.xml">PMEVTYPER&lt;n&gt;</register_link>, <register_link state="AArch32" id="AArch32-pmovsr.xml">PMOVSR</register_link>, <register_link state="AArch32" id="AArch32-pmovsset.xml">PMOVSSET</register_link>, <register_link state="AArch32" id="AArch32-pmselr.xml">PMSELR</register_link>, <register_link state="AArch32" id="AArch32-pmxevcntr.xml">PMXEVCNTR</register_link>, and <register_link state="AArch32" id="AArch32-pmxevtyper.xml">PMXEVTYPER</register_link>.</para>
</content>
</listitem><listitem><content>
<para><instruction>MRC</instruction> reads of the following registers:</para>
<list type="unordered">
<listitem><content>
<para><register_link state="AArch32" id="AArch32-pmceid0.xml">PMCEID0</register_link> and <register_link state="AArch32" id="AArch32-pmceid1.xml">PMCEID1</register_link>.</para>
</content>
</listitem><listitem><content>
<para>If <xref browsertext="FEAT_PMUv3p1" filename="A_armv8_architecture_extensions.fm" linkend="v8.1.PMU"/> is implemented, <register_link state="AArch32" id="AArch32-pmceid2.xml">PMCEID2</register_link> and <register_link state="AArch32" id="AArch32-pmceid3.xml">PMCEID3</register_link>.</para>
</content>
</listitem></list>
</content>
</listitem><listitem><content>
<para><instruction>MCR</instruction> writes to <register_link state="AArch32" id="AArch32-pmswinc.xml">PMSWINC</register_link>.</para>
</content>
</listitem><listitem><content>
<para><instruction>MRRC</instruction> or <instruction>MCRR</instruction> accesses to <register_link state="AArch32" id="AArch32-pmccntr.xml">PMCCNTR</register_link>.</para>
</content>
</listitem></list>
<para>When trapped, reads and writes generate an exception to EL1, or to EL2 when EL2 is implemented and enabled for the current Security state and <register_link state="AArch64" id="AArch64-hcr_el2.xml">HCR_EL2</register_link>.TGE is 1, and:</para>
<list type="unordered">
<listitem><content>AArch64 <instruction>MRS</instruction> and <instruction>MSR</instruction> accesses are reported using EC syndrome value <hexnumber>0x18</hexnumber>.</content>
</listitem><listitem><content>AArch32 <instruction>MRC</instruction> and <instruction>MCR</instruction> accesses are reported using EC syndrome value <hexnumber>0x03</hexnumber>.</content>
</listitem><listitem><content>AArch32 <instruction>MRRC</instruction> and <instruction>MCRR</instruction> accesses are reported using EC syndrome value <hexnumber>0x04</hexnumber>.</content>
</listitem></list>
<para>This field is ignored by the PE when <xref browsertext="FEAT_PMUv3p9" filename="A_armv8_architecture_extensions.fm" linkend="FEAT_PMUv3p9"/> is implemented and PMUSERENR_EL0.UEN == 1.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>EL0 accesses to the specified PMU System registers are trapped, unless enabled by PMUSERENR_EL0.{UEN,ER,CR,SW}.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>EL0 accesses to the specified PMU System registers are enabled, unless trapped by another control.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <text_after_fields/>
</fields>




    
<reg_fieldset length="64">
  <fieldat id="fieldset_0-63_7" msb="63" lsb="7"/>
  <fieldat id="fieldset_0-6_6-1" msb="6" lsb="6"/>
  <fieldat id="fieldset_0-5_5-1" msb="5" lsb="5"/>
  <fieldat id="fieldset_0-4_4-1" msb="4" lsb="4"/>
  <fieldat id="fieldset_0-3_3-1" msb="3" lsb="3"/>
  <fieldat id="fieldset_0-2_2-1" msb="2" lsb="2"/>
  <fieldat id="fieldset_0-1_1-1" msb="1" lsb="1"/>
  <fieldat id="fieldset_0-0_0" msb="0" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>

      <access_mechanisms>
          






        
        <access_mechanism accessor="MRS PMUSERENR_EL0" type="SystemAccessor">
            <encoding>
            <access_instruction>MRS &lt;Xt&gt;, PMUSERENR_EL0</access_instruction>
                
                <enc n="op0" v="0b11"/>
                
                <enc n="op1" v="0b011"/>
                
                <enc n="CRn" v="0b1001"/>
                
                <enc n="CRm" v="0b1110"/>
                
                <enc n="op2" v="0b000"/>
            </encoding>
            <access_permission>
                <ps name="MRS" sections="1" secttype="access_permission">
                <pstext>
if PSTATE.EL == EL0 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; MDCR_EL3.TPM == '1' then
        UNDEFINED;
    elsif EL2Enabled() &amp;&amp; HCR_EL2.&lt;E2H,TGE&gt; != '11' &amp;&amp; IsFeatureImplemented(FEAT_FGT) &amp;&amp; (!HaveEL(EL3) || SCR_EL3.FGTEn == '1') &amp;&amp; HDFGRTR_EL2.PMUSERENR_EL0 == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; MDCR_EL2.TPM == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif HaveEL(EL3) &amp;&amp; MDCR_EL3.TPM == '1' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        X[t, 64] = PMUSERENR_EL0;
elsif PSTATE.EL == EL1 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; MDCR_EL3.TPM == '1' then
        UNDEFINED;
    elsif EL2Enabled() &amp;&amp; IsFeatureImplemented(FEAT_FGT) &amp;&amp; (!HaveEL(EL3) || SCR_EL3.FGTEn == '1') &amp;&amp; HDFGRTR_EL2.PMUSERENR_EL0 == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; MDCR_EL2.TPM == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif HaveEL(EL3) &amp;&amp; MDCR_EL3.TPM == '1' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        X[t, 64] = PMUSERENR_EL0;
elsif PSTATE.EL == EL2 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; MDCR_EL3.TPM == '1' then
        UNDEFINED;
    elsif HaveEL(EL3) &amp;&amp; MDCR_EL3.TPM == '1' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        X[t, 64] = PMUSERENR_EL0;
elsif PSTATE.EL == EL3 then
    X[t, 64] = PMUSERENR_EL0;
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>
        
        <access_mechanism accessor="MSRregister PMUSERENR_EL0" type="SystemAccessor">
            <encoding>
            <access_instruction>MSR PMUSERENR_EL0, &lt;Xt&gt;</access_instruction>
                
                <enc n="op0" v="0b11"/>
                
                <enc n="op1" v="0b011"/>
                
                <enc n="CRn" v="0b1001"/>
                
                <enc n="CRm" v="0b1110"/>
                
                <enc n="op2" v="0b000"/>
            </encoding>
            <access_permission>
                <ps name="MSRregister" sections="1" secttype="access_permission">
                <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; MDCR_EL3.TPM == '1' then
        UNDEFINED;
    elsif EL2Enabled() &amp;&amp; IsFeatureImplemented(FEAT_FGT) &amp;&amp; (!HaveEL(EL3) || SCR_EL3.FGTEn == '1') &amp;&amp; HDFGWTR_EL2.PMUSERENR_EL0 == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; MDCR_EL2.TPM == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif HaveEL(EL3) &amp;&amp; MDCR_EL3.TPM == '1' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        PMUSERENR_EL0 = X[t, 64];
elsif PSTATE.EL == EL2 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; MDCR_EL3.TPM == '1' then
        UNDEFINED;
    elsif HaveEL(EL3) &amp;&amp; MDCR_EL3.TPM == '1' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        PMUSERENR_EL0 = X[t, 64];
elsif PSTATE.EL == EL3 then
    PMUSERENR_EL0 = X[t, 64];
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>

      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>30/03/2023 19:07; 997dd0cf3258cacf72aa7cf7a885f19a4758c3af</timestamp>
</register_page>