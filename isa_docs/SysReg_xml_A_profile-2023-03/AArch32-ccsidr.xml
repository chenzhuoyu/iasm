<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register execution_state="AArch32" is_register="True" is_internal="True" is_banked="False" is_stub_entry="False">
      <reg_short_name>CCSIDR</reg_short_name>
        
        <reg_long_name>Current Cache Size ID Register</reg_long_name>



      
        <reg_condition otherwise="UNDEFINED">when EL1 is capable of using AArch32</reg_condition>
      



          <reg_reset_value></reg_reset_value>

      <reg_mappings>
        



      
      <reg_mapping>
        
  

    

    <mapped_name filename="AArch64-ccsidr_el1.xml">CCSIDR_EL1</mapped_name>
  <mapped_type>Architectural</mapped_type>
      <mapped_execution_state>AArch64</mapped_execution_state>
    <mapped_from_startbit>31</mapped_from_startbit>
    <mapped_from_endbit>0</mapped_from_endbit>
    <mapped_to_startbit>31</mapped_to_startbit>
    <mapped_to_endbit>0</mapped_to_endbit>
    <mapped_from_rangeset output="31:0">
      <range>
        <msb>31</msb>
        <lsb>0</lsb>
      </range>
    </mapped_from_rangeset>
    <mapped_to_rangeset output="31:0">
      <range>
        <msb>31</msb>
        <lsb>0</lsb>
      </range>
    </mapped_to_rangeset>

      </reg_mapping>

      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>Provides information about the architecture of the currently selected cache.</para>

      </purpose_text>
      <purpose_text>
        <para>When <xref browsertext="FEAT_CCIDX" filename="A_armv8_architecture_extensions.fm" linkend="v8.3.CCIDX"/> is implemented, this register is used in conjunction with <register_link state="AArch32" id="AArch32-ccsidr2.xml">CCSIDR2</register_link>.</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
          <reg_group>Identification registers</reg_group>
      </reg_groups>
      <reg_configuration>
        
    
      <configuration_text>
        <para>The implementation includes one CCSIDR for each cache that it can access. <register_link state="AArch32" id="AArch32-csselr.xml">CSSELR</register_link> and the Security state select which Cache Size ID Register is accessible.</para>
      </configuration_text>

      </reg_configuration>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>CCSIDR is a 32-bit register.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        






<fields id="fieldset_0" length="32">
  <fields_condition>When FEAT_CCIDX is implemented</fields_condition>
  <fields_instance>IsFeatureImplemented(FEAT_CCIDX)</fields_instance>
  <text_before_fields>
    <note>
      <para>The parameters NumSets, Associativity, and LineSize in these registers define the architecturally visible parameters that are required for the cache maintenance by Set/Way instructions. They are not guaranteed to represent the actual microarchitectural features of a design. You cannot make any inference about the actual sizes of caches based on these parameters.</para>
    </note>
  </text_before_fields>
  <field id="fieldset_0-31_24" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0">
    <field_msb>31</field_msb>
    <field_lsb>24</field_lsb>
    <rel_range>31:24</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
  </field>
  <field id="fieldset_0-23_3" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>Associativity</field_name>
    <field_msb>23</field_msb>
    <field_lsb>3</field_lsb>
    <rel_range>23:3</rel_range>
    <field_description order="before">
      <para>(Associativity of cache) - 1, therefore a value of 0 indicates an associativity of 1. The associativity does not have to be a power of 2.</para>
    </field_description>
  </field>
  <field id="fieldset_0-2_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>LineSize</field_name>
    <field_msb>2</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>2:0</rel_range>
    <field_description order="before"><para>(Log<sub>2</sub>(Number of bytes in cache line)) - 4. For example:</para>
<para>For a line length of 16 bytes: Log<sub>2</sub>(16) = 4, LineSize entry = 0. This is the minimum line length.</para>
<para>For a line length of 32 bytes: Log<sub>2</sub>(32) = 5, LineSize entry = 1.</para>
<note><para>The C++ 17 specification has two defined parameters relating to the granularity of memory that does not interfere. For generic software and tools, Arm will set the hardware_destructive_interference_size parameter to 256 bytes and the hardware_constructive_interference_size parameter to 64 bytes.</para></note></field_description>
  </field>
  <text_after_fields/>
</fields>



<fields id="fieldset_1" length="32">
  <fields_condition/>
  <fields_instance>!IsFeatureImplemented(FEAT_CCIDX)</fields_instance>
  <text_before_fields>
    <note>
      <para>The parameters NumSets, Associativity, and LineSize in these registers define the architecturally visible parameters that are required for the cache maintenance by Set/Way instructions. They are not guaranteed to represent the actual microarchitectural features of a design. You cannot make any inference about the actual sizes of caches based on these parameters.</para>
    </note>
  </text_before_fields>
  <field id="fieldset_1-31_28" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="UNKNOWN">
    <field_msb>31</field_msb>
    <field_lsb>28</field_lsb>
    <rel_range>31:28</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>UNKNOWN</arm-defined-word>.</para>
    </field_description>
  </field>
  <field id="fieldset_1-27_13" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>NumSets</field_name>
    <field_msb>27</field_msb>
    <field_lsb>13</field_lsb>
    <rel_range>27:13</rel_range>
    <field_description order="before">
      <para>(Number of sets in cache) - 1, therefore a value of 0 indicates 1 set in the cache. The number of sets does not have to be a power of 2.</para>
    </field_description>
  </field>
  <field id="fieldset_1-12_3" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>Associativity</field_name>
    <field_msb>12</field_msb>
    <field_lsb>3</field_lsb>
    <rel_range>12:3</rel_range>
    <field_description order="before">
      <para>(Associativity of cache) - 1, therefore a value of 0 indicates an associativity of 1. The associativity does not have to be a power of 2.</para>
    </field_description>
  </field>
  <field id="fieldset_1-2_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>LineSize</field_name>
    <field_msb>2</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>2:0</rel_range>
    <field_description order="before"><para>(Log<sub>2</sub>(Number of bytes in cache line)) - 4. For example:</para>
<para>For a line length of 16 bytes: Log<sub>2</sub>(16) = 4, LineSize entry = 0. This is the minimum line length.</para>
<para>For a line length of 32 bytes: Log<sub>2</sub>(32) = 5, LineSize entry = 1.</para>
<note><para>The C++ 17 specification has two defined parameters relating to the granularity of memory that does not interfere. For generic software and tools, Arm will set the hardware_destructive_interference_size parameter to 256 bytes and the hardware_constructive_interference_size parameter to 64 bytes.</para></note></field_description>
  </field>
  <text_after_fields/>
</fields>





    
<reg_fieldset length="32">
  <fields_condition>When FEAT_CCIDX is implemented</fields_condition>
  <fieldat id="fieldset_0-31_24" msb="31" lsb="24"/>
  <fieldat id="fieldset_0-23_3" msb="23" lsb="3"/>
  <fieldat id="fieldset_0-2_0" msb="2" lsb="0"/>
</reg_fieldset>

    
<reg_fieldset length="32">
  <fields_condition/>
  <fieldat id="fieldset_1-31_28" msb="31" lsb="28"/>
  <fieldat id="fieldset_1-27_13" msb="27" lsb="13"/>
  <fieldat id="fieldset_1-12_3" msb="12" lsb="3"/>
  <fieldat id="fieldset_1-2_0" msb="2" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>

      <access_mechanisms>
          


  
    
      <access_permission_text>
        <para>If <register_link state="AArch32" id="AArch32-csselr.xml">CSSELR</register_link>.{Level, InD} is programmed to a cache level that is not implemented, then on a read of the CCSIDR the behavior is <arm-defined-word>CONSTRAINED UNPREDICTABLE</arm-defined-word>, and can be one of the following:</para>

      </access_permission_text>
      <access_permission_text>
        <list type="unordered">
<listitem><content>The CCSIDR read is treated as NOP.</content>
</listitem><listitem><content>The CCSIDR read is <arm-defined-word>UNDEFINED</arm-defined-word>.</content>
</listitem><listitem><content>The CCSIDR read returns an <arm-defined-word>UNKNOWN</arm-defined-word> value.</content>
</listitem></list>
      </access_permission_text>





        
        <access_mechanism accessor="MRC CCSIDR" type="SystemAccessor">
            <encoding>
            <access_instruction>MRC{&lt;c&gt;}{&lt;q&gt;} &lt;coproc&gt;, {#}&lt;opc1&gt;, &lt;Rt&gt;, &lt;CRn&gt;, &lt;CRm&gt;{, {#}&lt;opc2&gt;}</access_instruction>
                
                <enc n="coproc" v="0b1111"/>
                
                <enc n="opc1" v="0b001"/>
                
                <enc n="CRn" v="0b0000"/>
                
                <enc n="CRm" v="0b0000"/>
                
                <enc n="opc2" v="0b000"/>
            </encoding>
            <access_permission>
                <ps name="MRC" sections="1" secttype="access_permission">
                <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HSTR_EL2.T0 == '1' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x03);
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HSTR.T0 == '1' then
        AArch32.TakeHypTrapException(0x03);
    elsif EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HCR_EL2.TID2 == '1' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x03);
    elsif EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HCR_EL2.TID4 == '1' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x03);
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HCR.TID2 == '1' then
        AArch32.TakeHypTrapException(0x03);
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HCR2.TID4 == '1' then
        AArch32.TakeHypTrapException(0x03);
    else
        R[t] = CCSIDR;
elsif PSTATE.EL == EL2 then
    R[t] = CCSIDR;
elsif PSTATE.EL == EL3 then
    R[t] = CCSIDR;
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>

      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>30/03/2023 19:06; 997dd0cf3258cacf72aa7cf7a885f19a4758c3af</timestamp>
</register_page>