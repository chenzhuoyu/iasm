<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register execution_state="AArch32" is_register="True" is_internal="True" is_banked="False" is_stub_entry="False">
      <reg_short_name>VPIDR</reg_short_name>
        
        <reg_long_name>Virtualization Processor ID Register</reg_long_name>



      
        <reg_condition otherwise="UNDEFINED">when EL2 is capable of using AArch32</reg_condition>
      



          <reg_reset_value>
            <reg_reset_limited_to_el>EL2</reg_reset_limited_to_el>
            <reg_reset_limited_to_el>EL3</reg_reset_limited_to_el>

      </reg_reset_value>

      <reg_mappings>
        



      
      <reg_mapping>
        
  

    

    <mapped_name filename="AArch64-vpidr_el2.xml">VPIDR_EL2</mapped_name>
  <mapped_type>Architectural</mapped_type>
      <mapped_execution_state>AArch64</mapped_execution_state>
    <mapped_from_startbit>31</mapped_from_startbit>
    <mapped_from_endbit>0</mapped_from_endbit>
    <mapped_to_startbit>31</mapped_to_startbit>
    <mapped_to_endbit>0</mapped_to_endbit>
    <mapped_from_rangeset output="31:0">
      <range>
        <msb>31</msb>
        <lsb>0</lsb>
      </range>
    </mapped_from_rangeset>
    <mapped_to_rangeset output="31:0">
      <range>
        <msb>31</msb>
        <lsb>0</lsb>
      </range>
    </mapped_to_rangeset>

      </reg_mapping>

      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>Holds the value of the Virtualization Processor ID. This is the value returned by Non-secure EL1 reads of <register_link state="AArch32" id="AArch32-midr.xml">MIDR</register_link>.</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
            <reg_group>Virtualization registers</reg_group>
      </reg_groups>
      <reg_configuration>
        
    
      <configuration_text>
        <para>If EL2 is not implemented but EL3 is implemented, this register takes the value of the <register_link state="AArch32" id="AArch32-midr.xml">MIDR</register_link>.</para>
      </configuration_text>

      </reg_configuration>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>VPIDR is a 32-bit register.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        






<fields id="fieldset_0" length="32">
  <text_before_fields/>
  <field id="fieldset_0-31_24" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>Implementer</field_name>
    <field_msb>31</field_msb>
    <field_lsb>24</field_lsb>
    <rel_range>31:24</rel_range>
    <field_description order="before">
      <para>The Implementer code. This field must hold an implementer code that has been assigned by Arm. Assigned codes include the following:</para>
    </field_description>
    <field_description order="after">
      <para>Arm can assign codes that are not published in this manual. All values not assigned by Arm are reserved and must not be used.</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0x00</field_value>
        <field_value_description>
          <para>Reserved for software use.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0x41</field_value>
        <field_value_description>
          <para>Arm Limited.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0x42</field_value>
        <field_value_description>
          <para>Broadcom Corporation.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0x43</field_value>
        <field_value_description>
          <para>Cavium Inc.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0x44</field_value>
        <field_value_description>
          <para>Digital Equipment Corporation.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0x46</field_value>
        <field_value_description>
          <para>Fujitsu Ltd.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0x49</field_value>
        <field_value_description>
          <para>Infineon Technologies AG.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0x4D</field_value>
        <field_value_description>
          <para>Motorola or Freescale Semiconductor Inc.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0x4E</field_value>
        <field_value_description>
          <para>NVIDIA Corporation.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0x50</field_value>
        <field_value_description>
          <para>Applied Micro Circuits Corporation.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0x51</field_value>
        <field_value_description>
          <para>Qualcomm Inc.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0x56</field_value>
        <field_value_description>
          <para>Marvell International Ltd.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0x69</field_value>
        <field_value_description>
          <para>Intel Corporation.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0xC0</field_value>
        <field_value_description>
          <para>Ampere Computing.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_conditions>
          <field_reset_condition condition="the PE resets into EL2 or EL3">
            <field_reset>
              <field_reset_other_field>
                <field_reset_other_field_regname state="AArch32">MIDR</field_reset_other_field_regname>
                <field_reset_other_field_fieldname>Implementer</field_reset_other_field_fieldname>
              </field_reset_other_field>
            </field_reset>
          </field_reset_condition>
          <field_reset_condition>
            <field_reset>
              <field_reset_standard_text>AU</field_reset_standard_text>
            </field_reset>
          </field_reset_condition>
        </field_reset_conditions>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_0-23_20" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>Variant</field_name>
    <field_msb>23</field_msb>
    <field_lsb>20</field_lsb>
    <rel_range>23:20</rel_range>
    <field_description order="before">
      <para>An <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> variant number. Typically, this field is used to distinguish between different product variants, or major revisions of a product.</para>
    </field_description>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_conditions>
          <field_reset_condition condition="the PE resets into EL2 or EL3">
            <field_reset>
              <field_reset_other_field>
                <field_reset_other_field_regname state="AArch32">MIDR</field_reset_other_field_regname>
                <field_reset_other_field_fieldname>Variant</field_reset_other_field_fieldname>
              </field_reset_other_field>
            </field_reset>
          </field_reset_condition>
          <field_reset_condition>
            <field_reset>
              <field_reset_standard_text>AU</field_reset_standard_text>
            </field_reset>
          </field_reset_condition>
        </field_reset_conditions>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_0-19_16" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>Architecture</field_name>
    <field_msb>19</field_msb>
    <field_lsb>16</field_lsb>
    <rel_range>19:16</rel_range>
    <field_description order="before">
      <para>Architecture version. Defined values are:</para>
    </field_description>
    <field_description order="after">
      <para>All other values are reserved.</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>Armv4.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
          <para>Armv4T.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0011</field_value>
        <field_value_description>
          <para>Armv5 (obsolete).</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0100</field_value>
        <field_value_description>
          <para>Armv5T.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0101</field_value>
        <field_value_description>
          <para>Armv5TE.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0110</field_value>
        <field_value_description>
          <para>Armv5TEJ.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0111</field_value>
        <field_value_description>
          <para>Armv6.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1111</field_value>
        <field_value_description>
          <para>Architectural features are individually identified in the ID_* registers.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_conditions>
          <field_reset_condition condition="the PE resets into EL2 or EL3">
            <field_reset>
              <field_reset_other_field>
                <field_reset_other_field_regname state="AArch32">MIDR</field_reset_other_field_regname>
                <field_reset_other_field_fieldname>Architecture</field_reset_other_field_fieldname>
              </field_reset_other_field>
            </field_reset>
          </field_reset_condition>
          <field_reset_condition>
            <field_reset>
              <field_reset_standard_text>AU</field_reset_standard_text>
            </field_reset>
          </field_reset_condition>
        </field_reset_conditions>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_0-15_4" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>PartNum</field_name>
    <field_msb>15</field_msb>
    <field_lsb>4</field_lsb>
    <rel_range>15:4</rel_range>
    <field_description order="before"><para>An <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> primary part number for the device.</para>
<para>On processors implemented by Arm, if the top four bits of the primary part number are <hexnumber>0x0</hexnumber> or <hexnumber>0x7</hexnumber>, the variant and architecture are encoded differently.</para></field_description>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_conditions>
          <field_reset_condition condition="the PE resets into EL2 or EL3">
            <field_reset>
              <field_reset_other_field>
                <field_reset_other_field_regname state="AArch32">MIDR</field_reset_other_field_regname>
                <field_reset_other_field_fieldname>PartNum</field_reset_other_field_fieldname>
              </field_reset_other_field>
            </field_reset>
          </field_reset_condition>
          <field_reset_condition>
            <field_reset>
              <field_reset_standard_text>AU</field_reset_standard_text>
            </field_reset>
          </field_reset_condition>
        </field_reset_conditions>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_0-3_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>Revision</field_name>
    <field_msb>3</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>3:0</rel_range>
    <field_description order="before">
      <para>An <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> revision number for the device.</para>
    </field_description>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_conditions>
          <field_reset_condition condition="the PE resets into EL2 or EL3">
            <field_reset>
              <field_reset_other_field>
                <field_reset_other_field_regname state="AArch32">MIDR</field_reset_other_field_regname>
                <field_reset_other_field_fieldname>Revision</field_reset_other_field_fieldname>
              </field_reset_other_field>
            </field_reset>
          </field_reset_condition>
          <field_reset_condition>
            <field_reset>
              <field_reset_standard_text>AU</field_reset_standard_text>
            </field_reset>
          </field_reset_condition>
        </field_reset_conditions>
      </field_reset>
    </field_resets>
  </field>
  <text_after_fields/>
</fields>




    
<reg_fieldset length="32">
  <fieldat id="fieldset_0-31_24" msb="31" lsb="24"/>
  <fieldat id="fieldset_0-23_20" msb="23" lsb="20"/>
  <fieldat id="fieldset_0-19_16" msb="19" lsb="16"/>
  <fieldat id="fieldset_0-15_4" msb="15" lsb="4"/>
  <fieldat id="fieldset_0-3_0" msb="3" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>

      <access_mechanisms>
          






        
        <access_mechanism accessor="MRC VPIDR" type="SystemAccessor">
            <encoding>
            <access_instruction>MRC{&lt;c&gt;}{&lt;q&gt;} &lt;coproc&gt;, {#}&lt;opc1&gt;, &lt;Rt&gt;, &lt;CRn&gt;, &lt;CRm&gt;{, {#}&lt;opc2&gt;}</access_instruction>
                
                <enc n="coproc" v="0b1111"/>
                
                <enc n="opc1" v="0b100"/>
                
                <enc n="CRn" v="0b0000"/>
                
                <enc n="CRm" v="0b0000"/>
                
                <enc n="opc2" v="0b000"/>
            </encoding>
            <access_permission>
                <ps name="MRC" sections="1" secttype="access_permission">
                <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HSTR_EL2.T0 == '1' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x03);
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HSTR.T0 == '1' then
        AArch32.TakeHypTrapException(0x03);
    else
        UNDEFINED;
elsif PSTATE.EL == EL2 then
    R[t] = VPIDR;
elsif PSTATE.EL == EL3 then
    if !HaveEL(EL2) then
        R[t] = MIDR;
    elsif SCR.NS == '0' then
        UNDEFINED;
    else
        R[t] = VPIDR;
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>
        
        <access_mechanism accessor="MCR VPIDR" type="SystemAccessor">
            <encoding>
            <access_instruction>MCR{&lt;c&gt;}{&lt;q&gt;} &lt;coproc&gt;, {#}&lt;opc1&gt;, &lt;Rt&gt;, &lt;CRn&gt;, &lt;CRm&gt;{, {#}&lt;opc2&gt;}</access_instruction>
                
                <enc n="coproc" v="0b1111"/>
                
                <enc n="opc1" v="0b100"/>
                
                <enc n="CRn" v="0b0000"/>
                
                <enc n="CRm" v="0b0000"/>
                
                <enc n="opc2" v="0b000"/>
            </encoding>
            <access_permission>
                <ps name="MCR" sections="1" secttype="access_permission">
                <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HSTR_EL2.T0 == '1' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x03);
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HSTR.T0 == '1' then
        AArch32.TakeHypTrapException(0x03);
    else
        UNDEFINED;
elsif PSTATE.EL == EL2 then
    VPIDR = R[t];
elsif PSTATE.EL == EL3 then
    if !HaveEL(EL2) then
        return;
    elsif SCR.NS == '0' then
        UNDEFINED;
    else
        VPIDR = R[t];
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>
        
        <access_mechanism accessor="MRC MIDR" type="SystemAccessor">
            <encoding>
            <access_instruction>MRC{&lt;c&gt;}{&lt;q&gt;} &lt;coproc&gt;, {#}&lt;opc1&gt;, &lt;Rt&gt;, &lt;CRn&gt;, &lt;CRm&gt;{, {#}&lt;opc2&gt;}</access_instruction>
                
                <enc n="coproc" v="0b1111"/>
                
                <enc n="opc1" v="0b000"/>
                
                <enc n="CRn" v="0b0000"/>
                
                <enc n="CRm" v="0b0000"/>
                
                <enc n="opc2" v="0b000"/>
            </encoding>
            <access_permission>
                <ps name="MRC" sections="1" secttype="access_permission">
                <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HSTR_EL2.T0 == '1' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x03);
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HSTR.T0 == '1' then
        AArch32.TakeHypTrapException(0x03);
    elsif EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) then
        R[t] = VPIDR_EL2&lt;31:0&gt;;
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) then
        R[t] = VPIDR;
    else
        R[t] = MIDR;
elsif PSTATE.EL == EL2 then
    R[t] = MIDR;
elsif PSTATE.EL == EL3 then
    R[t] = MIDR;
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>

      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>30/03/2023 19:07; 997dd0cf3258cacf72aa7cf7a885f19a4758c3af</timestamp>
</register_page>