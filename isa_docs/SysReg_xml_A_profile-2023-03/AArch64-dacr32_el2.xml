<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register execution_state="AArch64" is_register="True" is_internal="True" is_banked="False" is_stub_entry="False">
      <reg_short_name>DACR32_EL2</reg_short_name>
        
        <reg_long_name>Domain Access Control Register</reg_long_name>



      
        <reg_condition otherwise="UNDEFINED">when EL1 is capable of using AArch32</reg_condition>
      



          <reg_reset_value></reg_reset_value>

      <reg_mappings>
        



      
      <reg_mapping>
        
  

    

    <mapped_name filename="AArch32-dacr.xml">DACR</mapped_name>
  <mapped_type>Architectural</mapped_type>
      <mapped_execution_state>AArch32</mapped_execution_state>
    <mapped_from_startbit>31</mapped_from_startbit>
    <mapped_from_endbit>0</mapped_from_endbit>
    <mapped_to_startbit>31</mapped_to_startbit>
    <mapped_to_endbit>0</mapped_to_endbit>
    <mapped_from_rangeset output="31:0">
      <range>
        <msb>31</msb>
        <lsb>0</lsb>
      </range>
    </mapped_from_rangeset>
    <mapped_to_rangeset output="31:0">
      <range>
        <msb>31</msb>
        <lsb>0</lsb>
      </range>
    </mapped_to_rangeset>

      </reg_mapping>

      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>Allows access to the AArch32 <register_link state="AArch32" id="AArch32-dacr.xml">DACR</register_link> register from AArch64 state only. Its value has no effect on execution in AArch64 state.</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
            <reg_group>Virtual memory control registers</reg_group>
      </reg_groups>
      <reg_configuration>
        
    
      <configuration_text>
        <para>If EL2 is not implemented but EL3 is implemented, and EL1 is capable of using AArch32, then this register is not <arm-defined-word>RES0</arm-defined-word>.</para>
      </configuration_text>

      </reg_configuration>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>DACR32_EL2 is a 64-bit register.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        






<fields id="fieldset_0" length="64">
  <text_before_fields/>
  <field id="fieldset_0-63_32" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0">
    <field_msb>63</field_msb>
    <field_lsb>32</field_lsb>
    <rel_range>63:32</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
  </field>
  <field id="fieldset_0-31_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>D&lt;n&gt;</field_name>
    <field_msb>31</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>31:0</rel_range>
    <field_description order="before">
      <para>Domain n access permission, where n = 0 to 15. Permitted values are:</para>
    </field_description>
    <field_description order="after">
      <para>The value <binarynumber>0b10</binarynumber> is reserved.</para>
    </field_description>
    <field_array_indexes index_variable="n" element_size="2" range_specifier="2n+1:2n">
      <field_array_index>
        <field_array_start>15</field_array_start>
        <field_array_end>0</field_array_end>
      </field_array_index>
    </field_array_indexes>
    <field_values>
      <field_value_instance>
        <field_value>0b00</field_value>
        <field_value_description>
          <para>No access. Any access to the domain generates a Domain fault.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b01</field_value>
        <field_value_description>
          <para>Client. Accesses are checked against the permission bits in the translation tables.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b11</field_value>
        <field_value_description>
          <para>Manager. Accesses are not checked against the permission bits in the translation tables.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <text_after_fields/>
</fields>




    
<reg_fieldset length="64">
  <fieldat id="fieldset_0-63_32" msb="63" lsb="32"/>
  <fieldat id="fieldset_0-31_0" label="D15" msb="31" lsb="30"/>
  <fieldat id="fieldset_0-31_0" label="D14" msb="29" lsb="28"/>
  <fieldat id="fieldset_0-31_0" label="D13" msb="27" lsb="26"/>
  <fieldat id="fieldset_0-31_0" label="D12" msb="25" lsb="24"/>
  <fieldat id="fieldset_0-31_0" label="D11" msb="23" lsb="22"/>
  <fieldat id="fieldset_0-31_0" label="D10" msb="21" lsb="20"/>
  <fieldat id="fieldset_0-31_0" label="D9" msb="19" lsb="18"/>
  <fieldat id="fieldset_0-31_0" label="D8" msb="17" lsb="16"/>
  <fieldat id="fieldset_0-31_0" label="D7" msb="15" lsb="14"/>
  <fieldat id="fieldset_0-31_0" label="D6" msb="13" lsb="12"/>
  <fieldat id="fieldset_0-31_0" label="D5" msb="11" lsb="10"/>
  <fieldat id="fieldset_0-31_0" label="D4" msb="9" lsb="8"/>
  <fieldat id="fieldset_0-31_0" label="D3" msb="7" lsb="6"/>
  <fieldat id="fieldset_0-31_0" label="D2" msb="5" lsb="4"/>
  <fieldat id="fieldset_0-31_0" label="D1" msb="3" lsb="2"/>
  <fieldat id="fieldset_0-31_0" label="D0" msb="1" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>

      <access_mechanisms>
          






        
        <access_mechanism accessor="MRS DACR32_EL2" type="SystemAccessor">
            <encoding>
            <access_instruction>MRS &lt;Xt&gt;, DACR32_EL2</access_instruction>
                
                <enc n="op0" v="0b11"/>
                
                <enc n="op1" v="0b100"/>
                
                <enc n="CRn" v="0b0011"/>
                
                <enc n="CRm" v="0b0000"/>
                
                <enc n="op2" v="0b000"/>
            </encoding>
            <access_permission>
                <ps name="MRS" sections="1" secttype="access_permission">
                <pstext>
if !HaveAArch32EL(EL1) then
    UNDEFINED;
elsif PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; HCR_EL2.NV == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    else
        UNDEFINED;
elsif PSTATE.EL == EL2 then
    X[t, 64] = DACR32_EL2;
elsif PSTATE.EL == EL3 then
    X[t, 64] = DACR32_EL2;
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>
        
        <access_mechanism accessor="MSRregister DACR32_EL2" type="SystemAccessor">
            <encoding>
            <access_instruction>MSR DACR32_EL2, &lt;Xt&gt;</access_instruction>
                
                <enc n="op0" v="0b11"/>
                
                <enc n="op1" v="0b100"/>
                
                <enc n="CRn" v="0b0011"/>
                
                <enc n="CRm" v="0b0000"/>
                
                <enc n="op2" v="0b000"/>
            </encoding>
            <access_permission>
                <ps name="MSRregister" sections="1" secttype="access_permission">
                <pstext>
if !HaveAArch32EL(EL1) then
    UNDEFINED;
elsif PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; HCR_EL2.NV == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    else
        UNDEFINED;
elsif PSTATE.EL == EL2 then
    DACR32_EL2 = X[t, 64];
elsif PSTATE.EL == EL3 then
    DACR32_EL2 = X[t, 64];
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>

      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>30/03/2023 19:07; 997dd0cf3258cacf72aa7cf7a885f19a4758c3af</timestamp>
</register_page>