<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register is_register="True" is_internal="False" is_banked="False" is_stub_entry="False">
      <reg_short_name>DBGWVR&lt;n&gt;_EL1</reg_short_name>
        
        <reg_long_name>Debug Watchpoint Value Registers</reg_long_name>

        <power_domain_text>DBGWVR&lt;n&gt;_EL1 is in the Core power domain</power_domain_text>


      
          <reg_array>
              <reg_array_start>0</reg_array_start>
              <reg_array_end>15</reg_array_end>
         </reg_array>
      
  <reg_address
      external_access="True"
    mem_map_access="True"
      power_domain="None"
      register_startbit="63"
      register_endbit="0"
  >
    <reg_component>Debug</reg_component>
    <reg_offset><hexnumber>0x800</hexnumber> + (16 * n)</reg_offset>
    <reg_instance>DBGWVR&lt;n&gt;_EL1</reg_instance>
    <reg_access>
      
        
      <reg_access_state>
          <reg_access_level>When IsCorePowered(), !DoubleLockStatus(), !OSLockStatus(), AllowExternalDebugAccess() and SoftwareLockStatus()</reg_access_level>
          <reg_access_type>RO</reg_access_type>
      </reg_access_state>
        
      <reg_access_state>
          <reg_access_level>When IsCorePowered(), !DoubleLockStatus(), !OSLockStatus(), AllowExternalDebugAccess() and !SoftwareLockStatus()</reg_access_level>
          <reg_access_type>RW</reg_access_type>
      </reg_access_state>
        
      <reg_access_state>
          <reg_access_type>ERROR</reg_access_type>
      </reg_access_state>
    </reg_access>
</reg_address>



          <reg_reset_value></reg_reset_value>

      <reg_mappings>
        



      
      <reg_mapping>
        
  

    

    <mapped_name filename="AArch64-dbgwvrn_el1.xml">DBGWVR&lt;n&gt;_EL1</mapped_name>
  <mapped_type>Architectural</mapped_type>
      <mapped_execution_state>AArch64</mapped_execution_state>
    <mapped_from_startbit>63</mapped_from_startbit>
    <mapped_from_endbit>0</mapped_from_endbit>
    <mapped_to_startbit>63</mapped_to_startbit>
    <mapped_to_endbit>0</mapped_to_endbit>
    <mapped_from_rangeset output="63:0">
      <range>
        <msb>63</msb>
        <lsb>0</lsb>
      </range>
    </mapped_from_rangeset>
    <mapped_to_rangeset output="63:0">
      <range>
        <msb>63</msb>
        <lsb>0</lsb>
      </range>
    </mapped_to_rangeset>

      </reg_mapping>
      
      <reg_mapping>
        
  

    

    <mapped_name filename="AArch32-dbgwvrn.xml">DBGWVR&lt;n&gt;</mapped_name>
  <mapped_type>Architectural</mapped_type>
      <mapped_execution_state>AArch32</mapped_execution_state>
    <mapped_from_startbit>31</mapped_from_startbit>
    <mapped_from_endbit>0</mapped_from_endbit>
    <mapped_to_startbit>31</mapped_to_startbit>
    <mapped_to_endbit>0</mapped_to_endbit>
    <mapped_from_rangeset output="31:0">
      <range>
        <msb>31</msb>
        <lsb>0</lsb>
      </range>
    </mapped_from_rangeset>
    <mapped_to_rangeset output="31:0">
      <range>
        <msb>31</msb>
        <lsb>0</lsb>
      </range>
    </mapped_to_rangeset>

      </reg_mapping>

      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>Holds a data address value for use in watchpoint matching. Forms watchpoint n together with control register <register_link state="ext" id="ext-dbgwcrn_el1.xml">DBGWCR&lt;n&gt;_EL1</register_link>.</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
          <reg_group>Debug registers</reg_group>
      </reg_groups>
      <reg_configuration>
        
    
      <configuration_text>
        <para>If watchpoint n is not implemented then accesses to this register are:</para>

      </configuration_text>
      <configuration_text>
        <list type="unordered">
<listitem><content>When IsCorePowered() &amp;&amp; !DoubleLockStatus() &amp;&amp; !OSLockStatus() &amp;&amp; AllowExternalDebugAccess(), <arm-defined-word>RES0</arm-defined-word>.</content>
</listitem><listitem><content>Otherwise, a <arm-defined-word>CONSTRAINED UNPREDICTABLE</arm-defined-word> choice of <arm-defined-word>RES0</arm-defined-word> or ERROR.</content>
</listitem></list>
      </configuration_text>

      </reg_configuration>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>DBGWVR&lt;n&gt;_EL1 is a 64-bit register.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        






<fields id="fieldset_0" length="64">
  <text_before_fields/>
  <field id="fieldset_0-63_57" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>RESS[14:8]</field_name>
    <field_msb>63</field_msb>
    <field_lsb>57</field_lsb>
    <rel_range>63:57</rel_range>
    <field_description order="before"><para>Reserved, Sign extended. Hardware and software must treat this field as <arm-defined-word>RES0</arm-defined-word> if the most significant bit of VA is 0 or <arm-defined-word>RES0</arm-defined-word>, and as <arm-defined-word>RES1</arm-defined-word> if the most significant bit of VA is 1.</para>
<para>Hardware always ignores the value of these bits and it is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> whether:</para>
<list type="unordered">
<listitem><content>The bits are hardwired to a copy of the most significant bit of VA, meaning writes to these bits are ignored, and reads to the bits always return the hardwired value.</content>
</listitem><listitem><content>The value in those bits can be written, and reads will return the last value written. The value held in those bits is ignored by hardware.</content>
</listitem></list></field_description>
  </field>
  <field id="fieldset_0-56_53-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="True" reserved_type="RES0">
    <field_name>VA[56:53]</field_name>
    <field_msb>56</field_msb>
    <field_lsb>53</field_lsb>
    <rel_range>3:0</rel_range>
    <field_description order="before">
      <para>Extension to VA[48:2]. For more information, see VA[48:2].</para>
    </field_description>
    <field_resets>
      <field_reset reset_type="Cold">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
    <fields_condition>When FEAT_LVA3 is implemented</fields_condition>
  </field>
  <field id="fieldset_0-56_53-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="True" reserved_type="RES0">
    <field_name>RESS[7:4]</field_name>
    <field_msb>56</field_msb>
    <field_lsb>53</field_lsb>
    <rel_range>3:0</rel_range>
    <field_description order="before">
      <para>Extension to RESS[14:8]. For more information, see RESS[14:8].</para>
    </field_description>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-52_49-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="True" reserved_type="RES0">
    <field_name>VA[52:49]</field_name>
    <field_msb>52</field_msb>
    <field_lsb>49</field_lsb>
    <rel_range>3:0</rel_range>
    <field_description order="before">
      <para>Extension to VA[48:2]. For more information, see VA[48:2].</para>
    </field_description>
    <field_resets>
      <field_reset reset_type="Cold">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
    <fields_condition>When FEAT_LVA is implemented</fields_condition>
  </field>
  <field id="fieldset_0-52_49-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="True" reserved_type="RES0">
    <field_name>RESS[3:0]</field_name>
    <field_msb>52</field_msb>
    <field_lsb>49</field_lsb>
    <rel_range>3:0</rel_range>
    <field_description order="before">
      <para>Extension to RESS[14:8]. For more information, see RESS[14:8].</para>
    </field_description>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <field id="fieldset_0-48_2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>VA[48:2]</field_name>
    <field_msb>48</field_msb>
    <field_lsb>2</field_lsb>
    <rel_range>48:2</rel_range>
    <field_description order="before"><para>Bits[48:2] of the address value for comparison.</para>
<para>When <xref browsertext="FEAT_LVA3" filename="A_armv8_architecture_extensions.fm" linkend="FEAT_LVA3"/> is implemented, (VA[56:53]:VA[52:49]) forms the upper part of the address value. If FEAT_LVA3 is not implemented, bits VA[56:53] are part of the RESS field.</para>
<para>When <xref browsertext="FEAT_LVA" filename="A_armv8_architecture_extensions.fm" linkend="v8.2.LVA"/> is implemented, VA[52:49] forms the upper part of the address value. If FEAT_LVA is not implemented, bits [52:49] are part of the RESS field.</para>
<para>Arm deprecates setting <register_link state="ext" id="ext-dbgwvrn_el1.xml">DBGWVR&lt;n&gt;_EL1</register_link>[2] == 1.</para></field_description>
    <field_resets>
      <field_reset reset_type="Cold">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_0-1_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0">
    <field_msb>1</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>1:0</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
  </field>
  <text_after_fields/>
</fields>




    
<reg_fieldset length="64">
  <fieldat id="fieldset_0-63_57" msb="63" lsb="57"/>
  <fieldat id="fieldset_0-56_53-1" label="Bits[56:53]" msb="56" lsb="53"/>
  <fieldat id="fieldset_0-52_49-1" label="Bits[52:49]" msb="52" lsb="49"/>
  <fieldat id="fieldset_0-48_2" msb="48" lsb="2"/>
  <fieldat id="fieldset_0-1_0" msb="1" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>
        <reg_variables>
              <reg_variable variable="n" max="15"/>
        </reg_variables>

      <access_mechanisms>
          


  
    
      <access_permission_text>
        <note><para>SoftwareLockStatus() depends on the type of access attempted and AllowExternalDebugAccess() has a new definition from Armv8.4. Refer to the Pseudocode definitions for more information.</para></note>
      </access_permission_text>






      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>30/03/2023 19:06; 997dd0cf3258cacf72aa7cf7a885f19a4758c3af</timestamp>
</register_page>