<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register is_register="True" is_internal="False" is_banked="False" is_stub_entry="False">
      <reg_short_name>GICR_ISACTIVER0</reg_short_name>
        
        <reg_long_name>Interrupt Set-Active Register 0</reg_long_name>



      
      
  <reg_address
      external_access="False"
    mem_map_access="True"
      power_domain="None"
  >
    <reg_component>GIC Redistributor</reg_component>
    <reg_frame>SGI_base</reg_frame>
    <reg_offset><hexnumber>0x0300</hexnumber></reg_offset>
    <reg_instance>GICR_ISACTIVER0</reg_instance>
    <reg_access>
      
        
      <reg_access_state>
          <reg_access_type>RW</reg_access_type>
      </reg_access_state>
    </reg_access>
</reg_address>



          <reg_reset_value></reg_reset_value>

      <reg_mappings>
        




      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>Activates the corresponding SGI or PPI. These registers are used when saving and restoring GIC state.</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
            <reg_group>GIC Redistributor registers</reg_group>
      </reg_groups>
      <reg_configuration>
        
    
      <configuration_text>
        <para>A copy of this register is provided for each Redistributor.</para>
      </configuration_text>

      </reg_configuration>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>GICR_ISACTIVER0 is a 32-bit register.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        






<fields id="fieldset_0" length="32">
  <text_before_fields/>
  <field id="fieldset_0-31_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>Set_active_bit&lt;x&gt;</field_name>
    <field_msb>31</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>31:0</rel_range>
    <field_description order="before">
      <para>Adds the active state to interrupt number x. Reads and writes have the following behavior:</para>
    </field_description>
    <field_array_indexes index_variable="x" element_size="1" range_specifier="x">
      <field_array_index>
        <field_array_start>31</field_array_start>
        <field_array_end>0</field_array_end>
      </field_array_index>
    </field_array_indexes>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description><para>If read, indicates that the corresponding interrupt is not active, and is not active and pending.</para>
<para>If written, has no effect.</para></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description><para>If read, indicates that the corresponding interrupt is active, or is active and pending.</para>
<para>If written, activates the corresponding interrupt, if the interrupt is not already active. If the interrupt is already active, the write has no effect.</para>
<para>After a write of 1 to this bit, a subsequent read of this bit returns 1.</para></field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="GIC">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <text_after_fields/>
</fields>




    
<reg_fieldset length="32">
  <fieldat id="fieldset_0-31_0" label="Set_active_bit31" msb="31" lsb="31"/>
  <fieldat id="fieldset_0-31_0" label="Set_active_bit30" msb="30" lsb="30"/>
  <fieldat id="fieldset_0-31_0" label="Set_active_bit29" msb="29" lsb="29"/>
  <fieldat id="fieldset_0-31_0" label="Set_active_bit28" msb="28" lsb="28"/>
  <fieldat id="fieldset_0-31_0" label="Set_active_bit27" msb="27" lsb="27"/>
  <fieldat id="fieldset_0-31_0" label="Set_active_bit26" msb="26" lsb="26"/>
  <fieldat id="fieldset_0-31_0" label="Set_active_bit25" msb="25" lsb="25"/>
  <fieldat id="fieldset_0-31_0" label="Set_active_bit24" msb="24" lsb="24"/>
  <fieldat id="fieldset_0-31_0" label="Set_active_bit23" msb="23" lsb="23"/>
  <fieldat id="fieldset_0-31_0" label="Set_active_bit22" msb="22" lsb="22"/>
  <fieldat id="fieldset_0-31_0" label="Set_active_bit21" msb="21" lsb="21"/>
  <fieldat id="fieldset_0-31_0" label="Set_active_bit20" msb="20" lsb="20"/>
  <fieldat id="fieldset_0-31_0" label="Set_active_bit19" msb="19" lsb="19"/>
  <fieldat id="fieldset_0-31_0" label="Set_active_bit18" msb="18" lsb="18"/>
  <fieldat id="fieldset_0-31_0" label="Set_active_bit17" msb="17" lsb="17"/>
  <fieldat id="fieldset_0-31_0" label="Set_active_bit16" msb="16" lsb="16"/>
  <fieldat id="fieldset_0-31_0" label="Set_active_bit15" msb="15" lsb="15"/>
  <fieldat id="fieldset_0-31_0" label="Set_active_bit14" msb="14" lsb="14"/>
  <fieldat id="fieldset_0-31_0" label="Set_active_bit13" msb="13" lsb="13"/>
  <fieldat id="fieldset_0-31_0" label="Set_active_bit12" msb="12" lsb="12"/>
  <fieldat id="fieldset_0-31_0" label="Set_active_bit11" msb="11" lsb="11"/>
  <fieldat id="fieldset_0-31_0" label="Set_active_bit10" msb="10" lsb="10"/>
  <fieldat id="fieldset_0-31_0" label="Set_active_bit9" msb="9" lsb="9"/>
  <fieldat id="fieldset_0-31_0" label="Set_active_bit8" msb="8" lsb="8"/>
  <fieldat id="fieldset_0-31_0" label="Set_active_bit7" msb="7" lsb="7"/>
  <fieldat id="fieldset_0-31_0" label="Set_active_bit6" msb="6" lsb="6"/>
  <fieldat id="fieldset_0-31_0" label="Set_active_bit5" msb="5" lsb="5"/>
  <fieldat id="fieldset_0-31_0" label="Set_active_bit4" msb="4" lsb="4"/>
  <fieldat id="fieldset_0-31_0" label="Set_active_bit3" msb="3" lsb="3"/>
  <fieldat id="fieldset_0-31_0" label="Set_active_bit2" msb="2" lsb="2"/>
  <fieldat id="fieldset_0-31_0" label="Set_active_bit1" msb="1" lsb="1"/>
  <fieldat id="fieldset_0-31_0" label="Set_active_bit0" msb="0" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>

      <access_mechanisms>
          


  
    
      <access_permission_text>
        <para>When affinity routing is not enabled for the Security state of an interrupt in GICR_ISACTIVER0, the corresponding bit is RAZ/WI and equivalent functionality is provided by <register_link state="ext" id="ext-gicd_isactivern.xml">GICD_ISACTIVER&lt;n&gt;</register_link> with n=0.</para>

      </access_permission_text>
      <access_permission_text>
        <para>This register only applies to SGIs (bits [15:0]) and PPIs (bits [31:16]). For SPIs, this functionality is provided by <register_link state="ext" id="ext-gicd_isactivern.xml">GICD_ISACTIVER&lt;n&gt;</register_link>.</para>

      </access_permission_text>
      <access_permission_text>
        <para>When <register_link state="ext" id="ext-gicd_ctlr.xml">GICD_CTLR</register_link>.DS == 0, bits corresponding to Secure SGIs and PPIs are RAZ/WI to Non-secure accesses.</para>
      </access_permission_text>






      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>30/03/2023 19:07; 997dd0cf3258cacf72aa7cf7a885f19a4758c3af</timestamp>
</register_page>