<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register execution_state="AArch64" is_register="True" is_internal="True" is_banked="False" is_stub_entry="False">
      <reg_short_name>AMUSERENR_EL0</reg_short_name>
        
        <reg_long_name>Activity Monitors User Enable Register</reg_long_name>



      
        <reg_condition otherwise="UNDEFINED">when FEAT_AMUv1 is implemented</reg_condition>
      



          <reg_reset_value></reg_reset_value>

      <reg_mappings>
        



      
      <reg_mapping>
        
  

    

    <mapped_name filename="AArch32-amuserenr.xml">AMUSERENR</mapped_name>
  <mapped_type>Architectural</mapped_type>
      <mapped_execution_state>AArch32</mapped_execution_state>
    <mapped_from_startbit>31</mapped_from_startbit>
    <mapped_from_endbit>0</mapped_from_endbit>
    <mapped_to_startbit>31</mapped_to_startbit>
    <mapped_to_endbit>0</mapped_to_endbit>
    <mapped_from_rangeset output="31:0">
      <range>
        <msb>31</msb>
        <lsb>0</lsb>
      </range>
    </mapped_from_rangeset>
    <mapped_to_rangeset output="31:0">
      <range>
        <msb>31</msb>
        <lsb>0</lsb>
      </range>
    </mapped_to_rangeset>

      </reg_mapping>

      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>Global user enable register for the activity monitors. Enables or disables EL0 access to the activity monitors. AMUSERENR_EL0 is applicable to both the architected and the auxiliary counter groups.</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
          <reg_group>Activity Monitors registers</reg_group>
      </reg_groups>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>AMUSERENR_EL0 is a 64-bit register.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        






<fields id="fieldset_0" length="64">
  <text_before_fields/>
  <field id="fieldset_0-63_1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0">
    <field_msb>63</field_msb>
    <field_lsb>1</field_lsb>
    <rel_range>63:1</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
  </field>
  <field id="fieldset_0-0_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>EN</field_name>
    <field_msb>0</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before"><para>Traps EL0 accesses to the activity monitors registers to EL1, or to EL2 when it is implemented and enabled for the current Security state and <register_link state="AArch64" id="AArch64-hcr_el2.xml">HCR_EL2</register_link>.TGE is 1, as follows:</para>
<list type="unordered">
<listitem><content>
<para>In AArch64 state, accesses to the following registers are trapped, reported using EC syndrome value <hexnumber>0x18</hexnumber>:</para>
<list type="unordered">
<listitem><content><register_link state="AArch64" id="AArch64-amcfgr_el0.xml">AMCFGR_EL0</register_link>, <register_link state="AArch64" id="AArch64-amcgcr_el0.xml">AMCGCR_EL0</register_link>, <register_link state="AArch64" id="AArch64-amcntenclr0_el0.xml">AMCNTENCLR0_EL0</register_link>, <register_link state="AArch64" id="AArch64-amcntenclr1_el0.xml">AMCNTENCLR1_EL0</register_link>, <register_link state="AArch64" id="AArch64-amcntenset0_el0.xml">AMCNTENSET0_EL0</register_link>, <register_link state="AArch64" id="AArch64-amcntenset1_el0.xml">AMCNTENSET1_EL0</register_link>, <register_link state="AArch64" id="AArch64-amcr_el0.xml">AMCR_EL0</register_link>, <register_link state="AArch64" id="AArch64-amevcntr0n_el0.xml">AMEVCNTR0&lt;n&gt;_EL0</register_link>, <register_link state="AArch64" id="AArch64-amevcntr1n_el0.xml">AMEVCNTR1&lt;n&gt;_EL0</register_link>, <register_link state="AArch64" id="AArch64-amevtyper0n_el0.xml">AMEVTYPER0&lt;n&gt;_EL0</register_link>, and <register_link state="AArch64" id="AArch64-amevtyper1n_el0.xml">AMEVTYPER1&lt;n&gt;_EL0</register_link>.</content>
</listitem></list>
</content>
</listitem><listitem><content>
<para>In AArch32 state, MRC and MCR accesses to the following registers are trapped and reported using EC syndrome value <hexnumber>0x03</hexnumber>, MRRC and MCRR accesses are trapped and reported using EC syndrome value <hexnumber>0x04</hexnumber>:</para>
<list type="unordered">
<listitem><content><register_link state="AArch32" id="AArch32-amcfgr.xml">AMCFGR</register_link>, <register_link state="AArch32" id="AArch32-amcgcr.xml">AMCGCR</register_link>, <register_link state="AArch32" id="AArch32-amcntenclr0.xml">AMCNTENCLR0</register_link>, <register_link state="AArch32" id="AArch32-amcntenclr1.xml">AMCNTENCLR1</register_link>, <register_link state="AArch32" id="AArch32-amcntenset0.xml">AMCNTENSET0</register_link>, <register_link state="AArch32" id="AArch32-amcntenset1.xml">AMCNTENSET1</register_link>, <register_link state="AArch32" id="AArch32-amcr.xml">AMCR</register_link>, <register_link state="AArch32" id="AArch32-amevcntr0n.xml">AMEVCNTR0&lt;n&gt;</register_link>, <register_link state="AArch32" id="AArch32-amevcntr1n.xml">AMEVCNTR1&lt;n&gt;</register_link>, <register_link state="AArch32" id="AArch32-amevtyper0n.xml">AMEVTYPER0&lt;n&gt;</register_link>, and <register_link state="AArch32" id="AArch32-amevtyper1n.xml">AMEVTYPER1&lt;n&gt;</register_link>.</content>
</listitem></list>
</content>
</listitem></list></field_description>
    <field_description order="after">
      <note>
        <list type="unordered">
          <listitem>
            <content>AMUSERENR_EL0 can always be read at EL0 and is not governed by this bit.</content>
          </listitem>
        </list>
      </note>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>EL0 accesses to the activity monitors registers are trapped.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>This control does not cause any instructions to be trapped. Software can access all activity monitor registers at EL0.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <text_after_fields/>
</fields>




    
<reg_fieldset length="64">
  <fieldat id="fieldset_0-63_1" msb="63" lsb="1"/>
  <fieldat id="fieldset_0-0_0" msb="0" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>

      <access_mechanisms>
          






        
        <access_mechanism accessor="MRS AMUSERENR_EL0" type="SystemAccessor">
            <encoding>
            <access_instruction>MRS &lt;Xt&gt;, AMUSERENR_EL0</access_instruction>
                
                <enc n="op0" v="0b11"/>
                
                <enc n="op1" v="0b011"/>
                
                <enc n="CRn" v="0b1101"/>
                
                <enc n="CRm" v="0b0010"/>
                
                <enc n="op2" v="0b011"/>
            </encoding>
            <access_permission>
                <ps name="MRS" sections="1" secttype="access_permission">
                <pstext>
if PSTATE.EL == EL0 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; CPTR_EL3.TAM == '1' then
        UNDEFINED;
    elsif EL2Enabled() &amp;&amp; CPTR_EL2.TAM == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif HaveEL(EL3) &amp;&amp; CPTR_EL3.TAM == '1' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        X[t, 64] = AMUSERENR_EL0;
elsif PSTATE.EL == EL1 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; CPTR_EL3.TAM == '1' then
        UNDEFINED;
    elsif EL2Enabled() &amp;&amp; CPTR_EL2.TAM == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif HaveEL(EL3) &amp;&amp; CPTR_EL3.TAM == '1' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        X[t, 64] = AMUSERENR_EL0;
elsif PSTATE.EL == EL2 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; CPTR_EL3.TAM == '1' then
        UNDEFINED;
    elsif HaveEL(EL3) &amp;&amp; CPTR_EL3.TAM == '1' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        X[t, 64] = AMUSERENR_EL0;
elsif PSTATE.EL == EL3 then
    X[t, 64] = AMUSERENR_EL0;
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>
        
        <access_mechanism accessor="MSRregister AMUSERENR_EL0" type="SystemAccessor">
            <encoding>
            <access_instruction>MSR AMUSERENR_EL0, &lt;Xt&gt;</access_instruction>
                
                <enc n="op0" v="0b11"/>
                
                <enc n="op1" v="0b011"/>
                
                <enc n="CRn" v="0b1101"/>
                
                <enc n="CRm" v="0b0010"/>
                
                <enc n="op2" v="0b011"/>
            </encoding>
            <access_permission>
                <ps name="MSRregister" sections="1" secttype="access_permission">
                <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; CPTR_EL3.TAM == '1' then
        UNDEFINED;
    elsif EL2Enabled() &amp;&amp; CPTR_EL2.TAM == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif HaveEL(EL3) &amp;&amp; CPTR_EL3.TAM == '1' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        AMUSERENR_EL0 = X[t, 64];
elsif PSTATE.EL == EL2 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; CPTR_EL3.TAM == '1' then
        UNDEFINED;
    elsif HaveEL(EL3) &amp;&amp; CPTR_EL3.TAM == '1' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        AMUSERENR_EL0 = X[t, 64];
elsif PSTATE.EL == EL3 then
    AMUSERENR_EL0 = X[t, 64];
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>

      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>30/03/2023 19:07; 997dd0cf3258cacf72aa7cf7a885f19a4758c3af</timestamp>
</register_page>