<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register execution_state="AArch32" is_register="True" is_internal="True" is_banked="False" is_stub_entry="False">
      <reg_short_name>ICC_CTLR</reg_short_name>
        
        <reg_long_name>Interrupt Controller Control Register</reg_long_name>



      
        <reg_condition otherwise="UNDEFINED">when EL1 is capable of using AArch32 and FEAT_GICv3 is implemented</reg_condition>
      



          <reg_reset_value></reg_reset_value>

      <reg_mappings>
        



      
      <reg_mapping>
        
  

    

    <mapped_name filename="AArch64-icc_ctlr_el1.xml">ICC_CTLR_EL1</mapped_name>
  <mapped_type>Architectural</mapped_type>
      <mapped_execution_state>AArch64</mapped_execution_state>
    <mapped_from_startbit>31</mapped_from_startbit>
    <mapped_from_endbit>0</mapped_from_endbit>
    <mapped_from_sec_state>ICC_CTLR_S</mapped_from_sec_state>
    <mapped_to_startbit>31</mapped_to_startbit>
    <mapped_to_endbit>0</mapped_to_endbit>
    <mapped_to_sec_state>ICC_CTLR_EL1_S</mapped_to_sec_state>
    <mapped_from_rangeset output="31:0">
      <range>
        <msb>31</msb>
        <lsb>0</lsb>
      </range>
    </mapped_from_rangeset>
    <mapped_to_rangeset output="31:0">
      <range>
        <msb>31</msb>
        <lsb>0</lsb>
      </range>
    </mapped_to_rangeset>

      </reg_mapping>
      
      <reg_mapping>
        
  

    

    <mapped_name filename="AArch64-icc_ctlr_el1.xml">ICC_CTLR_EL1</mapped_name>
  <mapped_type>Architectural</mapped_type>
      <mapped_execution_state>AArch64</mapped_execution_state>
    <mapped_from_startbit>31</mapped_from_startbit>
    <mapped_from_endbit>0</mapped_from_endbit>
    <mapped_from_sec_state>ICC_CTLR_NS</mapped_from_sec_state>
    <mapped_to_startbit>31</mapped_to_startbit>
    <mapped_to_endbit>0</mapped_to_endbit>
    <mapped_to_sec_state>ICC_CTLR_EL1_NS</mapped_to_sec_state>
    <mapped_from_rangeset output="31:0">
      <range>
        <msb>31</msb>
        <lsb>0</lsb>
      </range>
    </mapped_from_rangeset>
    <mapped_to_rangeset output="31:0">
      <range>
        <msb>31</msb>
        <lsb>0</lsb>
      </range>
    </mapped_to_rangeset>

      </reg_mapping>

      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>Controls aspects of the behavior of the GIC CPU interface and provides information about the features implemented.</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
            <reg_group>GIC control registers</reg_group>
            <reg_group>GIC system registers</reg_group>
      </reg_groups>
      
      
        
        <reg_banking>
            <reg_bank>
                <bank_text>This register is banked between ICC_CTLR and ICC_CTLR_S and ICC_CTLR_NS.</bank_text>
            </reg_bank>
        </reg_banking>
      <reg_attributes>
          
    
      <attributes_text>
        <para>ICC_CTLR is a 32-bit register.</para>

      </attributes_text>
      <attributes_text>
        <para>This register has the following instances:</para>

      </attributes_text>
      <attributes_text>
        <list type="unordered">
<listitem><content>ICC_CTLR, when EL3 is not implemented</content>
</listitem><listitem><content>ICC_CTLR_S, when EL3 is implemented</content>
</listitem><listitem><content>ICC_CTLR_NS, when EL3 is implemented</content>
</listitem></list>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        






<fields id="fieldset_0" length="32">
  <text_before_fields/>
  <field id="fieldset_0-31_20" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0">
    <field_msb>31</field_msb>
    <field_lsb>20</field_lsb>
    <rel_range>31:20</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
  </field>
  <field id="fieldset_0-19_19" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>ExtRange</field_name>
    <field_msb>19</field_msb>
    <field_lsb>19</field_lsb>
    <rel_range>19</rel_range>
    <field_description order="before">
      <para>Extended INTID range (read-only).</para>
    </field_description>
    <field_description order="after">
      <para>If EL3 is implemented, ICC_CTLR_EL1.ExtRange is an alias of <register_link state="AArch64" id="AArch64-icc_ctlr_el3.xml">ICC_CTLR_EL3</register_link>.ExtRange.</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description><para>CPU interface does not support INTIDs in the range 1024..8191.</para>
<para>Behavior is <arm-defined-word>UNPREDICTABLE</arm-defined-word> if the IRI delivers an interrupt in the range 1024 to 8191 to the CPU interface.</para>
<note><para>Arm strongly recommends that the IRI is not configured to deliver interrupts in this range to a PE that does not support them.</para></note></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description><para>CPU interface supports INTIDs in the range 1024..8191.</para>
<para>All INTIDs in the range 1024..8191 are treated as requiring deactivation.</para></field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <field id="fieldset_0-18_18" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>RSS</field_name>
    <field_msb>18</field_msb>
    <field_lsb>18</field_lsb>
    <rel_range>18</rel_range>
    <field_description order="before">
      <para>Range Selector Support. Possible values are:</para>
    </field_description>
    <field_description order="after">
      <para>This bit is read-only.</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>Targeted SGIs with affinity level 0 values of 0 - 15 are supported.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>Targeted SGIs with affinity level 0 values of 0 - 255 are supported.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <field id="fieldset_0-17_16" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0">
    <field_msb>17</field_msb>
    <field_lsb>16</field_lsb>
    <rel_range>17:16</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
  </field>
  <field id="fieldset_0-15_15" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>A3V</field_name>
    <field_msb>15</field_msb>
    <field_lsb>15</field_lsb>
    <rel_range>15</rel_range>
    <field_description order="before">
      <para>Affinity 3 Valid. Read-only and writes are ignored. Possible values are:</para>
    </field_description>
    <field_description order="after"><para>If EL3 is implemented and using AArch32, this bit is an alias of <register_link state="AArch32" id="AArch32-icc_mctlr.xml">ICC_MCTLR</register_link>.A3V.</para>
<para>If EL3 is implemented and using AArch64, this bit is an alias of <register_link state="AArch64" id="AArch64-icc_ctlr_el3.xml">ICC_CTLR_EL3</register_link>.A3V.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>The CPU interface logic only supports zero values of Affinity 3 in SGI generation System registers.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>The CPU interface logic supports nonzero values of Affinity 3 in SGI generation System registers.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <field id="fieldset_0-14_14" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>SEIS</field_name>
    <field_msb>14</field_msb>
    <field_lsb>14</field_lsb>
    <rel_range>14</rel_range>
    <field_description order="before">
      <para>SEI Support. Read-only and writes are ignored. Indicates whether the CPU interface supports local generation of SEIs:</para>
    </field_description>
    <field_description order="after"><para>If EL3 is implemented and using AArch32, this bit is an alias of <register_link state="AArch32" id="AArch32-icc_mctlr.xml">ICC_MCTLR</register_link>.SEIS.</para>
<para>If EL3 is implemented and using AArch64, this bit is an alias of <register_link state="AArch64" id="AArch64-icc_ctlr_el3.xml">ICC_CTLR_EL3</register_link>.SEIS.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>The CPU interface logic does not support local generation of SEIs.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>The CPU interface logic supports local generation of SEIs.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <field id="fieldset_0-13_11" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>IDbits</field_name>
    <field_msb>13</field_msb>
    <field_lsb>11</field_lsb>
    <rel_range>13:11</rel_range>
    <field_description order="before">
      <para>Identifier bits. Read-only and writes are ignored. The number of physical interrupt identifier bits supported:</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para>If EL3 is implemented and using AArch32, this field is an alias of <register_link state="AArch32" id="AArch32-icc_mctlr.xml">ICC_MCTLR</register_link>.IDbits.</para>
<para>If EL3 is implemented and using AArch64, this field is an alias of <register_link state="AArch64" id="AArch64-icc_ctlr_el3.xml">ICC_CTLR_EL3</register_link>.IDbits.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b000</field_value>
        <field_value_description>
          <para>16 bits.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b001</field_value>
        <field_value_description>
          <para>24 bits.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <field id="fieldset_0-10_8" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>PRIbits</field_name>
    <field_msb>10</field_msb>
    <field_lsb>8</field_lsb>
    <rel_range>10:8</rel_range>
    <field_description order="before"><para>Priority bits. Read-only and writes are ignored. The number of priority bits implemented, minus one.</para>
<para>An implementation that supports two Security states must implement at least 32 levels of physical priority (5 priority bits).</para>
<para>An implementation that supports only a single Security state must implement at least 16 levels of physical priority (4 priority bits).</para>
<note><para>This field always returns the number of priority bits implemented, regardless of the Security state of the access or the value of <register_link state="ext" id="ext-gicd_ctlr.xml">GICD_CTLR</register_link>.DS.</para></note><para>The division between group priority and subpriority is defined in the binary point registers <register_link state="AArch32" id="AArch32-icc_bpr0.xml">ICC_BPR0</register_link> and <register_link state="AArch32" id="AArch32-icc_bpr1.xml">ICC_BPR1</register_link>.</para>
<para>If EL3 is implemented and using AArch32, physical accesses return the value from <register_link state="AArch32" id="AArch32-icc_mctlr.xml">ICC_MCTLR</register_link>.PRIbits.</para>
<para>If EL3 is implemented and using AArch64, physical accesses return the value from <register_link state="AArch64" id="AArch64-icc_ctlr_el3.xml">ICC_CTLR_EL3</register_link>.PRIbits.</para>
<para>If EL3 is not implemented, physical accesses return the value from this field.</para></field_description>
  </field>
  <field id="fieldset_0-7_7" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0">
    <field_msb>7</field_msb>
    <field_lsb>7</field_lsb>
    <rel_range>7</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
  </field>
  <field id="fieldset_0-6_6" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>PMHE</field_name>
    <field_msb>6</field_msb>
    <field_lsb>6</field_lsb>
    <rel_range>6</rel_range>
    <field_description order="before">
      <para>Priority Mask Hint Enable. Controls whether the priority mask register is used as a hint for interrupt distribution:</para>
    </field_description>
    <field_description order="after"><para>If EL3 is implemented:</para>
<list type="unordered">
<listitem><content>If EL3 is using AArch32, this bit is an alias of <register_link state="AArch32" id="AArch32-icc_mctlr.xml">ICC_MCTLR</register_link>.PMHE.</content>
</listitem><listitem><content>If EL3 is using AArch64, this bit is an alias of <register_link state="AArch64" id="AArch64-icc_ctlr_el3.xml">ICC_CTLR_EL3</register_link>.PMHE.</content>
</listitem><listitem><content>If <register_link state="ext" id="ext-gicd_ctlr.xml">GICD_CTLR</register_link>.DS == 0, this bit is read-only.</content>
</listitem><listitem><content>If <register_link state="ext" id="ext-gicd_ctlr.xml">GICD_CTLR</register_link>.DS == 1, this bit is read/write.</content>
</listitem></list>
<para>If EL3 is not implemented, it is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> whether this bit is read-only or read/write:</para>
<list type="unordered">
<listitem><content>If this bit is read-only, an implementation can choose to make this field RAZ/WI or RAO/WI.</content>
</listitem><listitem><content>If this bit is read/write, it resets to zero.</content>
</listitem></list></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>Disables use of <register_link state="AArch32" id="AArch32-icc_pmr.xml">ICC_PMR</register_link> as a hint for interrupt distribution.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>Enables use of <register_link state="AArch32" id="AArch32-icc_pmr.xml">ICC_PMR</register_link> as a hint for interrupt distribution.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <field id="fieldset_0-5_2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0">
    <field_msb>5</field_msb>
    <field_lsb>2</field_lsb>
    <rel_range>5:2</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
  </field>
  <field id="fieldset_0-1_1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>EOImode</field_name>
    <field_msb>1</field_msb>
    <field_lsb>1</field_lsb>
    <rel_range>1</rel_range>
    <field_description order="before">
      <para>EOI mode for the current Security state. Controls whether a write to an End of Interrupt register also deactivates the interrupt:</para>
    </field_description>
    <field_description order="after"><para>If EL3 is implemented:</para>
<list type="unordered">
<listitem><content>If EL3 is using AArch32, this bit is an alias of <register_link state="AArch32" id="AArch32-icc_mctlr.xml">ICC_MCTLR</register_link>.EOImode_EL1{S, NS} where S or NS corresponds to the current Security state.</content>
</listitem><listitem><content>If EL3 is using AArch64, this bit is an alias of <register_link state="AArch64" id="AArch64-icc_ctlr_el3.xml">ICC_CTLR_EL3</register_link>.EOImode_EL1{S, NS} where S or NS corresponds to the current Security state.</content>
</listitem></list>
<para>If EL3 is not implemented, it is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> whether this bit is read-only or read/write:</para>
<list type="unordered">
<listitem><content>If this bit is read-only, an implementation can choose to make this field RAZ/WI or RAO/WI.</content>
</listitem><listitem><content>If this bit is read/write, it resets to zero.</content>
</listitem></list></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para><register_link state="AArch32" id="AArch32-icc_eoir0.xml">ICC_EOIR0</register_link> and <register_link state="AArch32" id="AArch32-icc_eoir1.xml">ICC_EOIR1</register_link> provide both priority drop and interrupt deactivation functionality. Accesses to <register_link state="AArch32" id="AArch32-icc_dir.xml">ICC_DIR</register_link> are <arm-defined-word>UNPREDICTABLE</arm-defined-word>.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para><register_link state="AArch32" id="AArch32-icc_eoir0.xml">ICC_EOIR0</register_link> and <register_link state="AArch32" id="AArch32-icc_eoir1.xml">ICC_EOIR1</register_link> provide priority drop functionality only. <register_link state="AArch32" id="AArch32-icc_dir.xml">ICC_DIR</register_link> provides interrupt deactivation functionality.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <field id="fieldset_0-0_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>CBPR</field_name>
    <field_msb>0</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Common Binary Point Register. Controls whether the same register is used for interrupt preemption of both Group 0 and Group 1 interrupts:</para>
    </field_description>
    <field_description order="after"><para>If EL3 is implemented:</para>
<list type="unordered">
<listitem><content>If EL3 is using AArch32, this bit is an alias of <register_link state="AArch32" id="AArch32-icc_mctlr.xml">ICC_MCTLR</register_link>.CBPR_EL1{S,NS} where S or NS corresponds to the current Security state.</content>
</listitem><listitem><content>If EL3 is using AArch64, this bit is an alias of <register_link state="AArch64" id="AArch64-icc_ctlr_el3.xml">ICC_CTLR_EL3</register_link>.CBPR_EL1{S,NS} where S or NS corresponds to the current Security state.</content>
</listitem><listitem><content>If <register_link state="ext" id="ext-gicd_ctlr.xml">GICD_CTLR</register_link>.DS == 0, this bit is read-only.</content>
</listitem><listitem><content>If <register_link state="ext" id="ext-gicd_ctlr.xml">GICD_CTLR</register_link>.DS == 1, this bit is read/write.</content>
</listitem></list>
<para>If EL3 is not implemented, it is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> whether this bit is read-only or read/write:</para>
<list type="unordered">
<listitem><content>If this bit is read-only, an implementation can choose to make this field RAZ/WI or RAO/WI.</content>
</listitem><listitem><content>If this bit is read/write, it resets to zero.</content>
</listitem></list></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description><para><register_link state="AArch32" id="AArch32-icc_bpr0.xml">ICC_BPR0</register_link> determines the preemption group for Group 0 interrupts only.</para>
<para><register_link state="AArch32" id="AArch32-icc_bpr1.xml">ICC_BPR1</register_link> determines the preemption group for Group 1 interrupts.</para></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para><register_link state="AArch32" id="AArch32-icc_bpr0.xml">ICC_BPR0</register_link> determines the preemption group for both Group 0 and Group 1 interrupts.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <text_after_fields/>
</fields>




    
<reg_fieldset length="32">
  <fieldat id="fieldset_0-31_20" msb="31" lsb="20"/>
  <fieldat id="fieldset_0-19_19" msb="19" lsb="19"/>
  <fieldat id="fieldset_0-18_18" msb="18" lsb="18"/>
  <fieldat id="fieldset_0-17_16" msb="17" lsb="16"/>
  <fieldat id="fieldset_0-15_15" msb="15" lsb="15"/>
  <fieldat id="fieldset_0-14_14" msb="14" lsb="14"/>
  <fieldat id="fieldset_0-13_11" msb="13" lsb="11"/>
  <fieldat id="fieldset_0-10_8" msb="10" lsb="8"/>
  <fieldat id="fieldset_0-7_7" msb="7" lsb="7"/>
  <fieldat id="fieldset_0-6_6" msb="6" lsb="6"/>
  <fieldat id="fieldset_0-5_2" msb="5" lsb="2"/>
  <fieldat id="fieldset_0-1_1" msb="1" lsb="1"/>
  <fieldat id="fieldset_0-0_0" msb="0" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>

      <access_mechanisms>
          






        
        <access_mechanism accessor="MRC ICC_CTLR" type="SystemAccessor">
            <encoding>
            <access_instruction>MRC{&lt;c&gt;}{&lt;q&gt;} &lt;coproc&gt;, {#}&lt;opc1&gt;, &lt;Rt&gt;, &lt;CRn&gt;, &lt;CRm&gt;{, {#}&lt;opc2&gt;}</access_instruction>
                
                <enc n="coproc" v="0b1111"/>
                
                <enc n="opc1" v="0b000"/>
                
                <enc n="CRn" v="0b1100"/>
                
                <enc n="CRm" v="0b1100"/>
                
                <enc n="opc2" v="0b100"/>
            </encoding>
            <access_permission>
                <ps name="MRC" sections="1" secttype="access_permission">
                <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; !ELUsingAArch32(EL3) &amp;&amp; SCR_EL3.&lt;IRQ,FIQ&gt; == '11' then
        UNDEFINED;
    elsif Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; ELUsingAArch32(EL3) &amp;&amp; PSTATE.M != M32_Monitor &amp;&amp; SCR.&lt;IRQ,FIQ&gt; == '11' then
        UNDEFINED;
    elsif EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HSTR_EL2.T12 == '1' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x03);
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HSTR.T12 == '1' then
        AArch32.TakeHypTrapException(0x03);
    elsif EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; ICH_HCR_EL2.TC == '1' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x03);
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; ICH_HCR.TC == '1' then
        AArch32.TakeHypTrapException(0x03);
    elsif EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HCR_EL2.FMO == '1' then
        R[t] = ICV_CTLR;
    elsif EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HCR_EL2.IMO == '1' then
        R[t] = ICV_CTLR;
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HCR.FMO == '1' then
        R[t] = ICV_CTLR;
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HCR.IMO == '1' then
        R[t] = ICV_CTLR;
    elsif HaveEL(EL3) &amp;&amp; !ELUsingAArch32(EL3) &amp;&amp; SCR_EL3.&lt;IRQ,FIQ&gt; == '11' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.AArch32SystemAccessTrap(EL3, 0x03);
    elsif HaveEL(EL3) &amp;&amp; ELUsingAArch32(EL3) &amp;&amp; PSTATE.M != M32_Monitor &amp;&amp; SCR.&lt;IRQ,FIQ&gt; == '11' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch32.TakeMonitorTrapException();
    elsif HaveEL(EL3) then
        R[t] = ICC_CTLR_NS;
    else
        R[t] = ICC_CTLR;
elsif PSTATE.EL == EL2 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; !ELUsingAArch32(EL3) &amp;&amp; SCR_EL3.&lt;IRQ,FIQ&gt; == '11' then
        UNDEFINED;
    elsif Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; ELUsingAArch32(EL3) &amp;&amp; SCR.&lt;IRQ,FIQ&gt; == '11' then
        UNDEFINED;
    elsif ICC_HSRE.SRE == '0' then
        UNDEFINED;
    elsif HaveEL(EL3) &amp;&amp; !ELUsingAArch32(EL3) &amp;&amp; SCR_EL3.&lt;IRQ,FIQ&gt; == '11' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.AArch32SystemAccessTrap(EL3, 0x03);
    elsif HaveEL(EL3) &amp;&amp; ELUsingAArch32(EL3) &amp;&amp; SCR.&lt;IRQ,FIQ&gt; == '11' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch32.TakeMonitorTrapException();
    elsif HaveEL(EL3) then
        R[t] = ICC_CTLR_NS;
    else
        R[t] = ICC_CTLR;
elsif PSTATE.EL == EL3 then
    if ICC_MSRE.SRE == '0' then
        UNDEFINED;
    else
        if SCR.NS == '0' then
            R[t] = ICC_CTLR_S;
        else
            R[t] = ICC_CTLR_NS;
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>
        
        <access_mechanism accessor="MCR ICC_CTLR" type="SystemAccessor">
            <encoding>
            <access_instruction>MCR{&lt;c&gt;}{&lt;q&gt;} &lt;coproc&gt;, {#}&lt;opc1&gt;, &lt;Rt&gt;, &lt;CRn&gt;, &lt;CRm&gt;{, {#}&lt;opc2&gt;}</access_instruction>
                
                <enc n="coproc" v="0b1111"/>
                
                <enc n="opc1" v="0b000"/>
                
                <enc n="CRn" v="0b1100"/>
                
                <enc n="CRm" v="0b1100"/>
                
                <enc n="opc2" v="0b100"/>
            </encoding>
            <access_permission>
                <ps name="MCR" sections="1" secttype="access_permission">
                <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; !ELUsingAArch32(EL3) &amp;&amp; SCR_EL3.&lt;IRQ,FIQ&gt; == '11' then
        UNDEFINED;
    elsif Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; ELUsingAArch32(EL3) &amp;&amp; PSTATE.M != M32_Monitor &amp;&amp; SCR.&lt;IRQ,FIQ&gt; == '11' then
        UNDEFINED;
    elsif EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HSTR_EL2.T12 == '1' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x03);
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HSTR.T12 == '1' then
        AArch32.TakeHypTrapException(0x03);
    elsif EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; ICH_HCR_EL2.TC == '1' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x03);
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; ICH_HCR.TC == '1' then
        AArch32.TakeHypTrapException(0x03);
    elsif EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HCR_EL2.FMO == '1' then
        ICV_CTLR = R[t];
    elsif EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HCR_EL2.IMO == '1' then
        ICV_CTLR = R[t];
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HCR.FMO == '1' then
        ICV_CTLR = R[t];
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HCR.IMO == '1' then
        ICV_CTLR = R[t];
    elsif HaveEL(EL3) &amp;&amp; !ELUsingAArch32(EL3) &amp;&amp; SCR_EL3.&lt;IRQ,FIQ&gt; == '11' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.AArch32SystemAccessTrap(EL3, 0x03);
    elsif HaveEL(EL3) &amp;&amp; ELUsingAArch32(EL3) &amp;&amp; PSTATE.M != M32_Monitor &amp;&amp; SCR.&lt;IRQ,FIQ&gt; == '11' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch32.TakeMonitorTrapException();
    elsif HaveEL(EL3) then
        ICC_CTLR_NS = R[t];
    else
        ICC_CTLR = R[t];
elsif PSTATE.EL == EL2 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; !ELUsingAArch32(EL3) &amp;&amp; SCR_EL3.&lt;IRQ,FIQ&gt; == '11' then
        UNDEFINED;
    elsif Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; ELUsingAArch32(EL3) &amp;&amp; SCR.&lt;IRQ,FIQ&gt; == '11' then
        UNDEFINED;
    elsif ICC_HSRE.SRE == '0' then
        UNDEFINED;
    elsif HaveEL(EL3) &amp;&amp; !ELUsingAArch32(EL3) &amp;&amp; SCR_EL3.&lt;IRQ,FIQ&gt; == '11' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.AArch32SystemAccessTrap(EL3, 0x03);
    elsif HaveEL(EL3) &amp;&amp; ELUsingAArch32(EL3) &amp;&amp; SCR.&lt;IRQ,FIQ&gt; == '11' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch32.TakeMonitorTrapException();
    elsif HaveEL(EL3) then
        ICC_CTLR_NS = R[t];
    else
        ICC_CTLR = R[t];
elsif PSTATE.EL == EL3 then
    if ICC_MSRE.SRE == '0' then
        UNDEFINED;
    else
        if SCR.NS == '0' then
            ICC_CTLR_S = R[t];
        else
            ICC_CTLR_NS = R[t];
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>

      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>30/03/2023 19:06; 997dd0cf3258cacf72aa7cf7a885f19a4758c3af</timestamp>
</register_page>