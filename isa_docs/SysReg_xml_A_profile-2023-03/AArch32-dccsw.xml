<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register execution_state="AArch32" is_register="False" is_internal="True" is_banked="False" is_stub_entry="False">
      <reg_short_name>DCCSW</reg_short_name>
        
        <reg_long_name>Data Cache line Clean by Set/Way</reg_long_name>



      
        <reg_condition otherwise="UNDEFINED">when EL1 is capable of using AArch32</reg_condition>
      



          <reg_reset_value></reg_reset_value>

      <reg_mappings>
        



      
      <reg_mapping>
        
  

    

    <mapped_name filename="AArch64-dc-csw.xml">DC CSW</mapped_name>
  <mapped_type>Functional</mapped_type>
      <mapped_execution_state>AArch64</mapped_execution_state>

      </reg_mapping>

      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>Clean data or unified cache line by set/way.</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
            <reg_group>Cache maintenance instructions</reg_group>
      </reg_groups>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>DCCSW is a 32-bit System instruction.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        






<fields id="fieldset_0" length="32">
  <text_before_fields/>
  <field id="fieldset_0-31_4" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>SetWay</field_name>
    <field_msb>31</field_msb>
    <field_lsb>4</field_lsb>
    <rel_range>31:4</rel_range>
    <field_description order="before"><para>Contains two fields:</para>
<list type="unordered">
<listitem><content>Way, bits[31:32-A], the number of the way to operate on.</content>
</listitem><listitem><content>Set, bits[B-1:L], the number of the set to operate on.</content>
</listitem></list>
<para>Bits[L-1:4] are <arm-defined-word>RES0</arm-defined-word>.</para>
<para>A = Log<sub>2</sub>(ASSOCIATIVITY), L = Log<sub>2</sub>(LINELEN), B = (L + S), S = Log<sub>2</sub>(NSETS).</para>
<para>ASSOCIATIVITY, LINELEN (line length, in bytes), and NSETS (number of sets) have their usual meanings and are the values for the cache level being operated on. The values of A and S are rounded up to the next integer.</para></field_description>
  </field>
  <field id="fieldset_0-3_1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>Level</field_name>
    <field_msb>3</field_msb>
    <field_lsb>1</field_lsb>
    <rel_range>3:1</rel_range>
    <field_description order="before">
      <para>Cache level to operate on, minus 1. For example, this field is 0 for operations on L1 cache, or 1 for operations on L2 cache.</para>
    </field_description>
  </field>
  <field id="fieldset_0-0_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0">
    <field_msb>0</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>0</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
  </field>
  <text_after_fields/>
</fields>




    
<reg_fieldset length="32">
  <fieldat id="fieldset_0-31_4" msb="31" lsb="4"/>
  <fieldat id="fieldset_0-3_1" msb="3" lsb="1"/>
  <fieldat id="fieldset_0-0_0" msb="0" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>

      <access_mechanisms>
          


  
    
      <access_permission_text>
        <para>If this instruction is executed with a set, way or level argument that is larger than the value supported by the implementation then the behavior is <arm-defined-word>CONSTRAINED UNPREDICTABLE</arm-defined-word> and one of the following occurs:</para>

      </access_permission_text>
      <access_permission_text>
        <list type="unordered">
<listitem><content>The instruction is <arm-defined-word>UNDEFINED</arm-defined-word></content>
</listitem><listitem><content>The instruction performs cache maintenance on one of:<list type="unordered">
<listitem><content>No cache lines.</content>
</listitem><listitem><content>A single arbitrary cache line.</content>
</listitem><listitem><content>Multiple arbitrary cache lines.</content>
</listitem></list>
</content>
</listitem></list>
      </access_permission_text>





        
        <access_mechanism accessor="MCR DCCSW" type="SystemAccessor">
            <encoding>
            <access_instruction>MCR{&lt;c&gt;}{&lt;q&gt;} &lt;coproc&gt;, {#}&lt;opc1&gt;, &lt;Rt&gt;, &lt;CRn&gt;, &lt;CRm&gt;{, {#}&lt;opc2&gt;}</access_instruction>
                
                <enc n="coproc" v="0b1111"/>
                
                <enc n="opc1" v="0b000"/>
                
                <enc n="CRn" v="0b0111"/>
                
                <enc n="CRm" v="0b1010"/>
                
                <enc n="opc2" v="0b010"/>
            </encoding>
            <access_permission>
                <ps name="MCR" sections="1" secttype="access_permission">
                <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HSTR_EL2.T7 == '1' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x03);
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HSTR.T7 == '1' then
        AArch32.TakeHypTrapException(0x03);
    elsif EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HCR_EL2.TSW == '1' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x03);
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HCR.TSW == '1' then
        AArch32.TakeHypTrapException(0x03);
    else
        AArch32.DC(R[t], CacheOp_Clean, CacheOpScope_SetWay);
elsif PSTATE.EL == EL2 then
    AArch32.DC(R[t], CacheOp_Clean, CacheOpScope_SetWay);
elsif PSTATE.EL == EL3 then
    AArch32.DC(R[t], CacheOp_Clean, CacheOpScope_SetWay);
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>

      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>30/03/2023 19:06; 997dd0cf3258cacf72aa7cf7a885f19a4758c3af</timestamp>
</register_page>