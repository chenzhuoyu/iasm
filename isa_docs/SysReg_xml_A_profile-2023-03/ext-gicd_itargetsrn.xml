<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register is_register="True" is_internal="False" is_banked="False" is_stub_entry="False">
      <reg_short_name>GICD_ITARGETSR&lt;n&gt;</reg_short_name>
        
        <reg_long_name>Interrupt Processor Targets Registers</reg_long_name>



      
          <reg_array>
              <reg_array_start>0</reg_array_start>
              <reg_array_end>254</reg_array_end>
         </reg_array>
      
  <reg_address
      external_access="False"
    mem_map_access="True"
      power_domain="None"
  >
    <reg_component>GIC Distributor</reg_component>
    <reg_frame>Dist_base</reg_frame>
    <reg_offset><hexnumber>0x0800</hexnumber> + (4 * n)</reg_offset>
    <reg_instance>GICD_ITARGETSR&lt;n&gt;</reg_instance>
    <reg_access>
      
        
      <reg_access_state>
          <reg_access_type>RW</reg_access_type>
      </reg_access_state>
    </reg_access>
</reg_address>



          <reg_reset_value></reg_reset_value>

      <reg_mappings>
        




      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>When affinity routing is not enabled, holds the list of target PEs for the interrupt. That is, it holds the list of CPU interfaces to which the Distributor forwards the interrupt if it is asserted and has sufficient priority.</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
            <reg_group>GIC Distributor registers</reg_group>
      </reg_groups>
      <reg_configuration>
        
    
      <configuration_text>
        <para>These registers are available in all configurations of the GIC. When <register_link state="ext" id="ext-gicd_ctlr.xml">GICD_CTLR</register_link>.DS==0, these registers are Common.</para>

      </configuration_text>
      <configuration_text>
        <para>The number of implemented GICD_ITARGETSR&lt;n&gt; registers is 8*(<register_link state="ext" id="ext-gicd_typer.xml">GICD_TYPER</register_link>.ITLinesNumber+1). Registers are numbered from 0.</para>

      </configuration_text>
      <configuration_text>
        <para>GICD_ITARGETSR0 to GICD_ITARGETSR7 are Banked for each connected PEwith <register_link state="ext" id="ext-gicr_typer.xml">GICR_TYPER</register_link>.Processor_Number &lt; 8. </para>

      </configuration_text>
      <configuration_text>
        <para>Accessing GICD_ITARGETSR0 to GICD_ITARGETSR7 from a PE with <register_link state="ext" id="ext-gicr_typer.xml">GICR_TYPER</register_link>.Processor_Number &gt; 7 is <arm-defined-word>CONSTRAINED UNPREDICTABLE</arm-defined-word>:</para>

      </configuration_text>
      <configuration_text>
        <list type="unordered">
<listitem><content>Register is RAZ/WI.</content>
</listitem><listitem><content>An <arm-defined-word>UNKNOWN</arm-defined-word> banked copy of the register is accessed.</content>
</listitem></list>
      </configuration_text>

      </reg_configuration>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>GICD_ITARGETSR&lt;n&gt; is a 32-bit register.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        






<fields id="fieldset_0" length="32">
  <text_before_fields>
    <para>PEs in the system number from 0, and each bit in a PE targets field refers to the corresponding PE. For example, a value of <hexnumber>0x3</hexnumber> means that the Pending interrupt is sent to PEs 0 and 1. For GICD_ITARGETSR0-GICD_ITARGETSR7, a read of any targets field returns the number of the PE performing the read.</para>
  </text_before_fields>
  <field id="fieldset_0-31_24" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>CPU_targets_offset_3B</field_name>
    <field_msb>31</field_msb>
    <field_lsb>24</field_lsb>
    <rel_range>31:24</rel_range>
    <field_description order="before">
      <para>PE targets for an interrupt, at byte offset 3.</para>
    </field_description>
    <field_resets>
      <field_reset reset_type="GIC">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_0-23_16" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>CPU_targets_offset_2B</field_name>
    <field_msb>23</field_msb>
    <field_lsb>16</field_lsb>
    <rel_range>23:16</rel_range>
    <field_description order="before">
      <para>PE targets for an interrupt, at byte offset 2.</para>
    </field_description>
    <field_resets>
      <field_reset reset_type="GIC">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_0-15_8" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>CPU_targets_offset_1B</field_name>
    <field_msb>15</field_msb>
    <field_lsb>8</field_lsb>
    <rel_range>15:8</rel_range>
    <field_description order="before">
      <para>PE targets for an interrupt, at byte offset 1.</para>
    </field_description>
    <field_resets>
      <field_reset reset_type="GIC">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_0-7_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>CPU_targets_offset_0B</field_name>
    <field_msb>7</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>7:0</rel_range>
    <field_description order="before">
      <para>PE targets for an interrupt, at byte offset 0.</para>
    </field_description>
    <field_resets>
      <field_reset reset_type="GIC">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <text_after_fields><para>The bits that are set to 1 in the PE targets field determine which PEs are targeted:</para>
<table><tgroup cols="2"><thead><row><entry>Value of PE targets field</entry><entry>Interrupt targets</entry></row></thead><tbody><row><entry><binarynumber>0bxxxxxxx1</binarynumber></entry><entry>CPU interface 0</entry></row><row><entry><binarynumber>0bxxxxxx1x</binarynumber></entry><entry>CPU interface 1</entry></row><row><entry><binarynumber>0bxxxxx1xx</binarynumber></entry><entry>CPU interface 2</entry></row><row><entry><binarynumber>0bxxxx1xxx</binarynumber></entry><entry>CPU interface 3</entry></row><row><entry><binarynumber>0bxxx1xxxx</binarynumber></entry><entry>CPU interface 4</entry></row><row><entry><binarynumber>0bxx1xxxxx</binarynumber></entry><entry>CPU interface 5</entry></row><row><entry><binarynumber>0bx1xxxxxx</binarynumber></entry><entry>CPU interface 6</entry></row><row><entry><binarynumber>0b1xxxxxxx</binarynumber></entry><entry>CPU interface 7</entry></row></tbody></tgroup></table>
<para>For interrupt ID m, when DIV and MOD are the integer division and modulo operations:</para>
<list type="unordered">
<listitem><content>The corresponding GICD_ITARGETSR&lt;n&gt; number, n, is given by n = m DIV 4.</content>
</listitem><listitem><content>The offset of the required GICD_ITARGETSR&lt;n&gt; register is (<hexnumber>0x800</hexnumber> + (4*n)).</content>
</listitem><listitem><content>The byte offset of the required Priority field in this register is m MOD 4, where:<list type="unordered">
<listitem><content>Byte offset 0 refers to register bits [7:0].</content>
</listitem><listitem><content>Byte offset 1 refers to register bits [15:8].</content>
</listitem><listitem><content>Byte offset 2 refers to register bits [23:16].</content>
</listitem><listitem><content>Byte offset 3 refers to register bits [31:24].</content>
</listitem></list>
</content>
</listitem></list>
<para>Software can write to these registers at any time. Any change to a targets field value:</para>
<list type="unordered">
<listitem><content>Has no effect on any active interrupt. This means that removing a CPU interface from a targets list does not cancel an active state for interrupts on that CPU interface. There is no effect on interrupts that are active and pending until the active status is cleared, at which time it is treated as a pending interrupt.</content>
</listitem><listitem><content>Has an effect on any pending interrupts. This means:<list type="unordered">
<listitem><content>Enables the CPU interface to be chosen as a target for the pending interrupt using an <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> mechanism.</content>
</listitem><listitem><content>Removing a CPU interface from the target list of a pending interrupt removes the pending state of the interrupt on that CPU interface.</content>
</listitem></list>
</content>
</listitem></list></text_after_fields>
</fields>




    
<reg_fieldset length="32">
  <fieldat id="fieldset_0-31_24" msb="31" lsb="24"/>
  <fieldat id="fieldset_0-23_16" msb="23" lsb="16"/>
  <fieldat id="fieldset_0-15_8" msb="15" lsb="8"/>
  <fieldat id="fieldset_0-7_0" msb="7" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>
        <reg_variables>
              <reg_variable variable="n" max="254"/>
        </reg_variables>

      <access_mechanisms>
          


  
    
      <access_permission_text>
        <para>These registers are used when affinity routing is not enabled. When affinity routing is enabled for the Security state of an interrupt, the target PEs for an interrupt are defined by <register_link state="ext" id="ext-gicd_iroutern.xml">GICD_IROUTER&lt;n&gt;</register_link> and the associated byte in GICD_ITARGETSR&lt;n&gt; is <arm-defined-word>RES0</arm-defined-word>. An implementation is permitted to make the byte RAZ/WI in this case.</para>

      </access_permission_text>
      <access_permission_text>
        <list type="unordered">
<listitem><content>These registers are byte-accessible.</content>
</listitem><listitem><content>A register field corresponding to an unimplemented interrupt is RAZ/WI.</content>
</listitem><listitem><content>A field bit corresponding to an unimplemented CPU interface is RAZ/WI.</content>
</listitem><listitem><content>GICD_ITARGETSR0-GICD_ITARGETSR7 are read-only. Each field returns a value that corresponds only to the PE reading the register.</content>
</listitem><listitem><content>It is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> which, if any, SPIs are statically configured in hardware. The field for such an SPI is read-only, and returns a value that indicates the PE targets for the interrupt.</content>
</listitem><listitem><content>If <register_link state="ext" id="ext-gicd_ctlr.xml">GICD_CTLR</register_link>.DS==0, unless the <register_link state="ext" id="ext-gicd_nsacrn.xml">GICD_NSACR&lt;n&gt;</register_link> registers permit Non-secure software to control Group 0 and Secure Group 1 interrupts, any bits that correspond to Group 0 or Secure Group 1 interrupts are accessible only by Secure accesses and are RAZ/WI to Non-secure accesses.</content>
</listitem></list>

      </access_permission_text>
      <access_permission_text>
        <para>In a single connected PE implementation, all interrupts target one PE, and these registers are RAZ/WI.</para>

      </access_permission_text>
      <access_permission_text>
        <note><para>Implementations must ensure that an interrupt that is pending at the time of the write uses either the old value or the new value and must ensure that the interrupt is neither lost nor handled more than one time. The effect of the change must be visible in finite time.</para></note>
      </access_permission_text>






      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>30/03/2023 19:06; 997dd0cf3258cacf72aa7cf7a885f19a4758c3af</timestamp>
</register_page>