<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register is_register="True" is_internal="False" is_banked="False" is_stub_entry="False">
      <reg_short_name>ERR&lt;n&gt;MISC0</reg_short_name>
        
        <reg_long_name>Error Record &lt;n&gt; Miscellaneous Register 0</reg_long_name>



      
        <reg_condition otherwise="RES0">when error record n is implemented</reg_condition>
          <reg_array>
              <reg_array_start>0</reg_array_start>
              <reg_array_end>65534</reg_array_end>
         </reg_array>
      
  <reg_address
      external_access="False"
    mem_map_access="True"
      power_domain="None"
  >
    <reg_component>RAS</reg_component>
    <reg_offset><hexnumber>0x020</hexnumber> + (64 * n)</reg_offset>
    <reg_instance>ERR&lt;n&gt;MISC0</reg_instance>
    <reg_access>
      
        
      <reg_access_state>
          <reg_access_type>RW</reg_access_type>
      </reg_access_state>
    </reg_access>
</reg_address>



          <reg_reset_value>

      </reg_reset_value>

      <reg_mappings>
        




      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para><arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> error syndrome register. The miscellaneous syndrome registers might contain:</para>

      </purpose_text>
      <purpose_text>
        <list type="unordered">
<listitem><content>Information to locate where the error was detected.</content>
</listitem><listitem><content>If the error was detected within a FRU, the identity of the FRU.</content>
</listitem><listitem><content>A Corrected error counter or counters.</content>
</listitem><listitem><content>Other state information not present in the corresponding status and address registers.</content>
</listitem></list>

      </purpose_text>
      <purpose_text>
        <para>If the node that owns error record &lt;n&gt; implements a standard format Corrected error counter or counters (<register_link id="ext-errnfr.xml" state="ext">ERRFR[FirstRecordOfNode(n)]</register_link>.CEC != <binarynumber>0b000</binarynumber>), then it is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> whether error record &lt;n&gt; can record countable errors, and:</para>

      </purpose_text>
      <purpose_text>
        <list type="unordered">
<listitem><content>If error record &lt;n&gt; records countable errors, then ERR&lt;n&gt;MISC0 implements the standard format Corrected error counter or counters for error record &lt;n&gt;.</content>
</listitem><listitem><content>If error record &lt;n&gt; does not record countable errors, then it is recommended that the fields in ERR&lt;n&gt;MISC0 defined for the standard format counter or counters are <arm-defined-word>RES0</arm-defined-word>. That is, the fields behave like counters that never count.</content>
</listitem></list>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
          <reg_group>RAS registers</reg_group>
      </reg_groups>
      <reg_configuration>
        
    
      <configuration_text>
        <para><register_link id="ext-errnfr.xml" state="ext">ERRFR[FirstRecordOfNode(n)]</register_link> describes the features implemented by the node that owns error record &lt;n&gt;. FirstRecordOfNode(n) is the index of the first error record owned by the same node as error record &lt;n&gt;. If the node owns a single record then FirstRecordOfNode(n) = n.</para>

      </configuration_text>
      <configuration_text>
        <para>For <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> fields in ERR&lt;n&gt;MISC0, writing zero returns the error record to an initial quiescent state.</para>

      </configuration_text>
      <configuration_text>
        <para>In particular, if any <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> syndrome fields might generate a Fault Handling or Error Recovery Interrupt request, writing zero is sufficient to deactivate the Interrupt request.</para>

      </configuration_text>
      <configuration_text>
        <para>Fields that are read-only, nonzero, and ignore writes are compliant with this requirement.</para>

      </configuration_text>
      <configuration_text>
        <note><para>Arm recommends that any <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> syndrome field that can generate a Fault Handling, Error Recovery, Critical, or <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word>, interrupt request is disabled at Cold reset and is enabled by software writing an <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> nonzero value to an <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> field in <register_link id="ext-errnctlr.xml" state="ext">ERRCTLR[FirstRecordOfNode(n)]</register_link>.</para></note>
      </configuration_text>

      </reg_configuration>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>ERR&lt;n&gt;MISC0 is a 64-bit register.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        






<fields id="fieldset_0" length="64">
  <fields_condition>When ERRFR[FirstRecordOfNode(n)].CEC == 0b000 or error record n does not record countable errors</fields_condition>
  <text_before_fields/>
  <field id="fieldset_0-63_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>IMPLEMENTATION DEFINED</field_name>
    <field_msb>63</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>63:0</rel_range>
    <field_description order="before">
      <para><arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> syndrome.</para>
    </field_description>
  </field>
  <text_after_fields/>
</fields>



<fields id="fieldset_1" length="64">
  <fields_condition>When ERRFR[FirstRecordOfNode(n)].CEC == 0b100, ERRFR[FirstRecordOfNode(n)].RP == 0 and error record n records countable errors</fields_condition>
  <text_before_fields/>
  <field id="fieldset_1-63_48" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>IMPLEMENTATION DEFINED</field_name>
    <field_msb>63</field_msb>
    <field_lsb>48</field_lsb>
    <rel_range>63:48</rel_range>
    <field_description order="before">
      <para><arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> syndrome.</para>
    </field_description>
  </field>
  <field id="fieldset_1-47_47" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>OF</field_name>
    <field_msb>47</field_msb>
    <field_lsb>47</field_lsb>
    <rel_range>47</rel_range>
    <field_description order="before">
      <para>Sticky overflow bit. Set to 1 when ERR&lt;n&gt;MISC0.CEC is incremented and wraps through zero.</para>
    </field_description>
    <field_description order="after">
      <para>A direct write that modifies this field might indirectly set <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.OF to an <arm-defined-word>UNKNOWN</arm-defined-word> value and a direct write to <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.OF that clears it to zero might indirectly set this field to an <arm-defined-word>UNKNOWN</arm-defined-word> value.</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>Counter has not overflowed.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>Counter has overflowed.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Cold">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_1-46_32" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>CEC</field_name>
    <field_msb>46</field_msb>
    <field_lsb>32</field_lsb>
    <rel_range>46:32</rel_range>
    <field_description order="before">
      <para>Corrected error count. Incremented for each Corrected error. It is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> and might be <arm-defined-word>UNPREDICTABLE</arm-defined-word> whether Deferred and Uncorrected errors are counted.</para>
    </field_description>
    <field_resets>
      <field_reset reset_type="Cold">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_1-31_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>IMPLEMENTATION DEFINED</field_name>
    <field_msb>31</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>31:0</rel_range>
    <field_description order="before">
      <para><arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> syndrome.</para>
    </field_description>
  </field>
  <text_after_fields/>
</fields>



<fields id="fieldset_2" length="64">
  <fields_condition>When ERRFR[FirstRecordOfNode(n)].CEC == 0b010, ERRFR[FirstRecordOfNode(n)].RP == 0 and error record n records countable errors</fields_condition>
  <text_before_fields/>
  <field id="fieldset_2-63_40" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>IMPLEMENTATION DEFINED</field_name>
    <field_msb>63</field_msb>
    <field_lsb>40</field_lsb>
    <rel_range>63:40</rel_range>
    <field_description order="before">
      <para><arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> syndrome.</para>
    </field_description>
  </field>
  <field id="fieldset_2-39_39" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>OF</field_name>
    <field_msb>39</field_msb>
    <field_lsb>39</field_lsb>
    <rel_range>39</rel_range>
    <field_description order="before">
      <para>Sticky overflow bit. Set to 1 when ERR&lt;n&gt;MISC0.CEC is incremented and wraps through zero.</para>
    </field_description>
    <field_description order="after">
      <para>A direct write that modifies this field might indirectly set <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.OF to an <arm-defined-word>UNKNOWN</arm-defined-word> value and a direct write to <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.OF that clears it to zero might indirectly set this field to an <arm-defined-word>UNKNOWN</arm-defined-word> value.</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>Counter has not overflowed.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>Counter has overflowed.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Cold">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_2-38_32" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>CEC</field_name>
    <field_msb>38</field_msb>
    <field_lsb>32</field_lsb>
    <rel_range>38:32</rel_range>
    <field_description order="before">
      <para>Corrected error count. Incremented for each Corrected error. It is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> and might be <arm-defined-word>UNPREDICTABLE</arm-defined-word> whether Deferred and Uncorrected errors are counted.</para>
    </field_description>
    <field_resets>
      <field_reset reset_type="Cold">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_2-31_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>IMPLEMENTATION DEFINED</field_name>
    <field_msb>31</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>31:0</rel_range>
    <field_description order="before">
      <para><arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> syndrome.</para>
    </field_description>
  </field>
  <text_after_fields/>
</fields>



<fields id="fieldset_3" length="64">
  <fields_condition>When ERRFR[FirstRecordOfNode(n)].CEC == 0b100, ERRFR[FirstRecordOfNode(n)].RP == 1 and error record n records countable errors</fields_condition>
  <text_before_fields/>
  <field id="fieldset_3-63_63" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>OFO</field_name>
    <field_msb>63</field_msb>
    <field_lsb>63</field_lsb>
    <rel_range>63</rel_range>
    <field_description order="before">
      <para>Sticky overflow bit, other. Set to 1 when ERR&lt;n&gt;MISC0.CECO is incremented and wraps through zero.</para>
    </field_description>
    <field_description order="after">
      <para>A direct write that modifies this field might indirectly set <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.OF to an <arm-defined-word>UNKNOWN</arm-defined-word> value and a direct write to <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.OF that clears it to zero might indirectly set this field to an <arm-defined-word>UNKNOWN</arm-defined-word> value.</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>Other counter has not overflowed.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>Other counter has overflowed.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Cold">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_3-62_48" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>CECO</field_name>
    <field_msb>62</field_msb>
    <field_lsb>48</field_lsb>
    <rel_range>62:48</rel_range>
    <field_description order="before">
      <para>Corrected error count, other. Incremented for each countable error that is not accounted for by incrementing ERR&lt;n&gt;MISC0.CECR.</para>
    </field_description>
    <field_resets>
      <field_reset reset_type="Cold">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_3-47_47" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>OFR</field_name>
    <field_msb>47</field_msb>
    <field_lsb>47</field_lsb>
    <rel_range>47</rel_range>
    <field_description order="before">
      <para>Sticky overflow bit, repeat. Set to 1 when ERR&lt;n&gt;MISC0.CECR is incremented and wraps through zero.</para>
    </field_description>
    <field_description order="after">
      <para>A direct write that modifies this field might indirectly set <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.OF to an <arm-defined-word>UNKNOWN</arm-defined-word> value and a direct write to <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.OF that clears it to zero might indirectly set this field to an <arm-defined-word>UNKNOWN</arm-defined-word> value.</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>Repeat counter has not overflowed.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>Repeat counter has overflowed.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Cold">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_3-46_32" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>CECR</field_name>
    <field_msb>46</field_msb>
    <field_lsb>32</field_lsb>
    <rel_range>46:32</rel_range>
    <field_description order="before">
      <para>Corrected error count, repeat. Incremented for the first countable error, which also records other syndrome for the error, and subsequently for each countable error that matches the recorded other syndrome. Corrected errors are countable errors. It is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> and might be <arm-defined-word>UNPREDICTABLE</arm-defined-word> whether Deferred and Uncorrected errors are countable errors.</para>
    </field_description>
    <field_description order="after">
      <note>
        <para>For example, the other syndrome might include the set and way information for an error detected in a cache. This might be recorded in the <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> ERR&lt;n&gt;MISC&lt;m&gt; fields on a first Corrected error. ERR&lt;n&gt;MISC0.CECR is then incremented for each subsequent Corrected Error in the same set and way.</para>
      </note>
    </field_description>
    <field_resets>
      <field_reset reset_type="Cold">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_3-31_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>IMPLEMENTATION DEFINED</field_name>
    <field_msb>31</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>31:0</rel_range>
    <field_description order="before">
      <para><arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> syndrome.</para>
    </field_description>
  </field>
  <text_after_fields/>
</fields>



<fields id="fieldset_4" length="64">
  <fields_condition>When ERRFR[FirstRecordOfNode(n)].CEC == 0b010, ERRFR[FirstRecordOfNode(n)].RP == 1 and error record n records countable errors</fields_condition>
  <text_before_fields/>
  <field id="fieldset_4-63_48" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>IMPLEMENTATION DEFINED</field_name>
    <field_msb>63</field_msb>
    <field_lsb>48</field_lsb>
    <rel_range>63:48</rel_range>
    <field_description order="before">
      <para><arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> syndrome.</para>
    </field_description>
  </field>
  <field id="fieldset_4-47_47" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>OFO</field_name>
    <field_msb>47</field_msb>
    <field_lsb>47</field_lsb>
    <rel_range>47</rel_range>
    <field_description order="before">
      <para>Sticky overflow bit, other. Set to 1 when ERR&lt;n&gt;MISC0.CECO is incremented and wraps through zero.</para>
    </field_description>
    <field_description order="after">
      <para>A direct write that modifies this field might indirectly set <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.OF to an <arm-defined-word>UNKNOWN</arm-defined-word> value and a direct write to <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.OF that clears it to zero might indirectly set this field to an <arm-defined-word>UNKNOWN</arm-defined-word> value.</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>Other counter has not overflowed.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>Other counter has overflowed.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Cold">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_4-46_40" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>CECO</field_name>
    <field_msb>46</field_msb>
    <field_lsb>40</field_lsb>
    <rel_range>46:40</rel_range>
    <field_description order="before">
      <para>Corrected error count, other. Incremented for each countable error that is not accounted for by incrementing ERR&lt;n&gt;MISC0.CECR.</para>
    </field_description>
    <field_resets>
      <field_reset reset_type="Cold">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_4-39_39" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>OFR</field_name>
    <field_msb>39</field_msb>
    <field_lsb>39</field_lsb>
    <rel_range>39</rel_range>
    <field_description order="before">
      <para>Sticky overflow bit, repeat. Set to 1 when ERR&lt;n&gt;MISC0.CECR is incremented and wraps through zero.</para>
    </field_description>
    <field_description order="after">
      <para>A direct write that modifies this field might indirectly set <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.OF to an <arm-defined-word>UNKNOWN</arm-defined-word> value and a direct write to <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.OF that clears it to zero might indirectly set this field to an <arm-defined-word>UNKNOWN</arm-defined-word> value.</para>
    </field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>Repeat counter has not overflowed.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>Repeat counter has overflowed.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Cold">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_4-38_32" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>CECR</field_name>
    <field_msb>38</field_msb>
    <field_lsb>32</field_lsb>
    <rel_range>38:32</rel_range>
    <field_description order="before">
      <para>Corrected error count, repeat. Incremented for the first countable error, which also records other syndrome for the error, and subsequently for each countable error that matches the recorded other syndrome. Corrected errors are countable errors. It is <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> and might be <arm-defined-word>UNPREDICTABLE</arm-defined-word> whether Deferred and Uncorrected errors are countable errors.</para>
    </field_description>
    <field_description order="after">
      <note>
        <para>For example, the other syndrome might include the set and way information for an error detected in a cache. This might be recorded in the <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> ERR&lt;n&gt;MISC&lt;m&gt; fields on a first Corrected error. ERR&lt;n&gt;MISC0.CECR is then incremented for each subsequent Corrected Error in the same set and way.</para>
      </note>
    </field_description>
    <field_resets>
      <field_reset reset_type="Cold">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
  </field>
  <field id="fieldset_4-31_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>IMPLEMENTATION DEFINED</field_name>
    <field_msb>31</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>31:0</rel_range>
    <field_description order="before">
      <para><arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> syndrome.</para>
    </field_description>
  </field>
  <text_after_fields/>
</fields>








    
<reg_fieldset length="64">
  <fields_condition>When ERRFR[FirstRecordOfNode(n)].CEC == 0b000 or error record n does not record countable errors</fields_condition>
  <fieldat id="fieldset_0-63_0" msb="63" lsb="0"/>
</reg_fieldset>

    
<reg_fieldset length="64">
  <fields_condition>When ERRFR[FirstRecordOfNode(n)].CEC == 0b100, ERRFR[FirstRecordOfNode(n)].RP == 0 and error record n records countable errors</fields_condition>
  <fieldat id="fieldset_1-63_48" msb="63" lsb="48"/>
  <fieldat id="fieldset_1-47_47" msb="47" lsb="47"/>
  <fieldat id="fieldset_1-46_32" msb="46" lsb="32"/>
  <fieldat id="fieldset_1-31_0" msb="31" lsb="0"/>
</reg_fieldset>

    
<reg_fieldset length="64">
  <fields_condition>When ERRFR[FirstRecordOfNode(n)].CEC == 0b010, ERRFR[FirstRecordOfNode(n)].RP == 0 and error record n records countable errors</fields_condition>
  <fieldat id="fieldset_2-63_40" msb="63" lsb="40"/>
  <fieldat id="fieldset_2-39_39" msb="39" lsb="39"/>
  <fieldat id="fieldset_2-38_32" msb="38" lsb="32"/>
  <fieldat id="fieldset_2-31_0" msb="31" lsb="0"/>
</reg_fieldset>

    
<reg_fieldset length="64">
  <fields_condition>When ERRFR[FirstRecordOfNode(n)].CEC == 0b100, ERRFR[FirstRecordOfNode(n)].RP == 1 and error record n records countable errors</fields_condition>
  <fieldat id="fieldset_3-63_63" msb="63" lsb="63"/>
  <fieldat id="fieldset_3-62_48" msb="62" lsb="48"/>
  <fieldat id="fieldset_3-47_47" msb="47" lsb="47"/>
  <fieldat id="fieldset_3-46_32" msb="46" lsb="32"/>
  <fieldat id="fieldset_3-31_0" msb="31" lsb="0"/>
</reg_fieldset>

    
<reg_fieldset length="64">
  <fields_condition>When ERRFR[FirstRecordOfNode(n)].CEC == 0b010, ERRFR[FirstRecordOfNode(n)].RP == 1 and error record n records countable errors</fields_condition>
  <fieldat id="fieldset_4-63_48" msb="63" lsb="48"/>
  <fieldat id="fieldset_4-47_47" msb="47" lsb="47"/>
  <fieldat id="fieldset_4-46_40" msb="46" lsb="40"/>
  <fieldat id="fieldset_4-39_39" msb="39" lsb="39"/>
  <fieldat id="fieldset_4-38_32" msb="38" lsb="32"/>
  <fieldat id="fieldset_4-31_0" msb="31" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>
        <reg_variables>
              <reg_variable variable="n" max="65534"/>
        </reg_variables>

      <access_mechanisms>
          


  
    
      <access_permission_text>
        <para>Reads from ERR&lt;n&gt;MISC0 return an <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> value and writes have <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> behavior.</para>

      </access_permission_text>
      <access_permission_text>
        <para>If the Common Fault Injection Mechanism is implemented by the node that owns this error record, and <register_link id="ext-errnpfgf.xml" state="ext">ERRPFGF[FirstRecordOfNode(n)]</register_link>.MV is 1, then some parts of this register are read/write when <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.MV is 0. See <register_link state="ext" id="ext-errnpfgf.xml">ERR&lt;n&gt;PFGF</register_link>.MV for more information.</para>

      </access_permission_text>
      <access_permission_text>
        <para>For other parts of this register, or if the Common Fault Injection Mechanism is not implemented, then Arm recommends that:</para>

      </access_permission_text>
      <access_permission_text>
        <list type="unordered">
<listitem><content>Miscellaneous syndrome for multiple errors, such as a corrected error counter, is read/write.</content>
</listitem><listitem><content>When <register_link state="ext" id="ext-errnstatus.xml">ERR&lt;n&gt;STATUS</register_link>.MV is 1, the miscellaneous syndrome specific to the most recently recorded error ignores writes.</content>
</listitem></list>

      </access_permission_text>
      <access_permission_text>
        <note><para>These recommendations allow a counter to be reset in the presence of a persistent error, while preventing specific information, such as that identifying a FRU, from being lost if an error is detected while the previous error is being logged.</para></note>
      </access_permission_text>






      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>30/03/2023 19:07; 997dd0cf3258cacf72aa7cf7a885f19a4758c3af</timestamp>
</register_page>