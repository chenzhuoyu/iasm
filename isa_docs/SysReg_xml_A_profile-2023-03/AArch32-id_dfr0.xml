<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register execution_state="AArch32" is_register="True" is_internal="True" is_banked="False" is_stub_entry="False">
      <reg_short_name>ID_DFR0</reg_short_name>
        
        <reg_long_name>Debug Feature Register 0</reg_long_name>



      
        <reg_condition otherwise="UNDEFINED">when EL1 is capable of using AArch32</reg_condition>
      



          <reg_reset_value></reg_reset_value>

      <reg_mappings>
        



      
      <reg_mapping>
        
  

    

    <mapped_name filename="AArch64-id_dfr0_el1.xml">ID_DFR0_EL1</mapped_name>
  <mapped_type>Architectural</mapped_type>
      <mapped_execution_state>AArch64</mapped_execution_state>
    <mapped_from_startbit>31</mapped_from_startbit>
    <mapped_from_endbit>0</mapped_from_endbit>
    <mapped_to_startbit>31</mapped_to_startbit>
    <mapped_to_endbit>0</mapped_to_endbit>
    <mapped_from_rangeset output="31:0">
      <range>
        <msb>31</msb>
        <lsb>0</lsb>
      </range>
    </mapped_from_rangeset>
    <mapped_to_rangeset output="31:0">
      <range>
        <msb>31</msb>
        <lsb>0</lsb>
      </range>
    </mapped_to_rangeset>

      </reg_mapping>

      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>Provides top level information about the debug system in AArch32 state.</para>

      </purpose_text>
      <purpose_text>
        <para>Must be interpreted with the Main ID Register, <register_link state="AArch32" id="AArch32-midr.xml">MIDR</register_link>.</para>

      </purpose_text>
      <purpose_text>
        <para>For general information about the interpretation of the ID registers see <xref browsertext="'Principles of the ID scheme for fields in ID registers'" filename="G_aarch32_system_register_descriptions.fm" linkend="CHDIDAGF"/>.</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
          <reg_group>Identification registers</reg_group>
      </reg_groups>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>ID_DFR0 is a 32-bit register.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        






<fields id="fieldset_0" length="32">
  <text_before_fields/>
  <field id="fieldset_0-31_28" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>TraceFilt</field_name>
    <field_msb>31</field_msb>
    <field_lsb>28</field_lsb>
    <rel_range>31:28</rel_range>
    <field_description order="before">
      <para>Armv8.4 Self-hosted Trace Extension version. Defined values are:</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref browsertext="FEAT_TRF" filename="A_armv8_architecture_extensions.fm" linkend="v8.4.Trace"/> implements the functionality added by the value <binarynumber>0b0001</binarynumber>.</para>
<para>From Armv8.3, the permitted values are <binarynumber>0b0000</binarynumber> and <binarynumber>0b0001</binarynumber>.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>Armv8.4 Self-hosted Trace Extension not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>Armv8.4 Self-hosted Trace Extension implemented.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <field id="fieldset_0-27_24" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>PerfMon</field_name>
    <field_msb>27</field_msb>
    <field_lsb>24</field_lsb>
    <rel_range>27:24</rel_range>
    <field_description order="before"><para>Performance Monitors Extension version.</para>
<para>This field does not follow the standard ID scheme, but uses the alternative ID scheme described in <xref browsertext="'Alternative ID scheme used for the Performance Monitors Extension version'" filename="G_aarch32_system_register_descriptions.fm" linkend="BABIAJEA"/>.</para>
<para>Defined values are:</para></field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para><xref browsertext="FEAT_PMUv3" filename="A_armv8_architecture_extensions.fm" linkend="v8.0.PMUv3"/> implements the functionality identified by the value <binarynumber>0b0011</binarynumber>.</para>
<para><xref browsertext="FEAT_PMUv3p1" filename="A_armv8_architecture_extensions.fm" linkend="v8.1.PMU"/> implements the functionality identified by the value <binarynumber>0b0100</binarynumber>.</para>
<para><xref browsertext="FEAT_PMUv3p4" filename="A_armv8_architecture_extensions.fm" linkend="v8.4.PMU"/> implements the functionality identified by the value <binarynumber>0b0101</binarynumber>.</para>
<para><xref browsertext="FEAT_PMUv3p5" filename="A_armv8_architecture_extensions.fm" linkend="v8.5.PMU"/> implements the functionality identified by the value <binarynumber>0b0110</binarynumber>.</para>
<para><xref browsertext="FEAT_PMUv3p7" filename="A_armv8_architecture_extensions.fm" linkend="v8.7.PMU"/> implements the functionality identified by the value <binarynumber>0b0111</binarynumber>.</para>
<para><xref browsertext="FEAT_PMUv3p8" filename="A_armv8_architecture_extensions.fm" linkend="FEAT_PMUv3p8"/> implements the functionality identified by the value <binarynumber>0b1000</binarynumber>.</para>
<para><xref browsertext="FEAT_PMUv3p9" filename="A_armv8_architecture_extensions.fm" linkend="FEAT_PMUv3p9"/> implements the functionality identified by the value <binarynumber>0b1001</binarynumber>.</para>
<para>In any Armv8 implementation, the values <binarynumber>0b0001</binarynumber> and <binarynumber>0b0010</binarynumber> are not permitted.</para>
<para>From Armv8.1, if <xref browsertext="FEAT_PMUv3" filename="A_armv8_architecture_extensions.fm" linkend="v8.0.PMUv3"/> is implemented, the value <binarynumber>0b0011</binarynumber> is not permitted.</para>
<para>From Armv8.4, if <xref browsertext="FEAT_PMUv3" filename="A_armv8_architecture_extensions.fm" linkend="v8.0.PMUv3"/> is implemented, the value <binarynumber>0b0100</binarynumber> is not permitted.</para>
<para>From Armv8.5, if <xref browsertext="FEAT_PMUv3" filename="A_armv8_architecture_extensions.fm" linkend="v8.0.PMUv3"/> is implemented, the value <binarynumber>0b0101</binarynumber> is not permitted.</para>
<para>From Armv8.7, if <xref browsertext="FEAT_PMUv3" filename="A_armv8_architecture_extensions.fm" linkend="v8.0.PMUv3"/> is implemented, the value <binarynumber>0b0110</binarynumber> is not permitted.</para>
<para>From Armv8.8, if <xref browsertext="FEAT_PMUv3" filename="A_armv8_architecture_extensions.fm" linkend="v8.0.PMUv3"/> is implemented, the value <binarynumber>0b0111</binarynumber> is not permitted.</para>
<para>From Armv8.9, if <xref browsertext="FEAT_PMUv3" filename="A_armv8_architecture_extensions.fm" linkend="v8.0.PMUv3"/> is implemented, the value <binarynumber>0b1000</binarynumber> is not permitted.</para>
<note><para>In Armv7, the value <binarynumber>0b0000</binarynumber> can mean that PMUv1 is implemented. PMUv1 and PMUv2 are not permitted in an Armv8 implementation.</para></note></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>Performance Monitors Extension not implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>Performance Monitors Extension, PMUv1 implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
          <para>Performance Monitors Extension, PMUv2 implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0011</field_value>
        <field_value_description>
          <para>Performance Monitors Extension, PMUv3 implemented.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0100</field_value>
        <field_value_description><para>PMUv3 for Armv8.1. As <binarynumber>0b0011</binarynumber>, and adds support for:</para>
<list type="unordered">
<listitem><content>Extended 16-bit <register_link state="AArch32" id="AArch32-pmevtypern.xml">PMEVTYPER&lt;n&gt;</register_link>.evtCount field.</content>
</listitem><listitem><content>If EL2 is implemented, the <register_link state="AArch32" id="AArch32-hdcr.xml">HDCR</register_link>.HPMD control.</content>
</listitem></list></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0101</field_value>
        <field_value_description>
          <para>PMUv3 for Armv8.4. As <binarynumber>0b0100</binarynumber>, and adds support for the <register_link state="AArch32" id="AArch32-pmmir.xml">PMMIR</register_link> register.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0110</field_value>
        <field_value_description><para>PMUv3 for Armv8.5. As <binarynumber>0b0101</binarynumber>, and adds support for:</para>
<list type="unordered">
<listitem><content>64-bit event counters.</content>
</listitem><listitem><content>If EL2 is implemented, the <register_link state="AArch32" id="AArch32-hdcr.xml">HDCR</register_link>.HCCD control.</content>
</listitem><listitem><content>If EL3 is implemented, the <register_link state="AArch32" id="AArch32-sdcr.xml">SDCR</register_link>.SCCD control.</content>
</listitem></list></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0111</field_value>
        <field_value_description><para>PMUv3 for Armv8.7. As <binarynumber>0b0110</binarynumber>, and adds support for:</para>
<list type="unordered">
<listitem><content>The <register_link state="AArch32" id="AArch32-pmcr.xml">PMCR</register_link>.FZO and, if EL2 is implemented, <register_link state="AArch32" id="AArch32-hdcr.xml">HDCR</register_link>.HPMFZO controls.</content>
</listitem><listitem><content>If EL3 is implemented and using AArch64, the <register_link state="AArch64" id="AArch64-mdcr_el3.xml">MDCR_EL3</register_link>.{MPMX,MCCD} controls.</content>
</listitem></list></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1000</field_value>
        <field_value_description><para>PMUv3 for Armv8.8. As <binarynumber>0b0111</binarynumber>, and:</para>
<list type="unordered">
<listitem><content>Extends the Common event number space to include <hexnumber>0x0040</hexnumber> to <hexnumber>0x00BF</hexnumber> and <hexnumber>0x4040</hexnumber> to <hexnumber>0x40BF</hexnumber>.</content>
</listitem><listitem><content>Removes the <arm-defined-word>CONSTRAINED UNPREDICTABLE</arm-defined-word> behaviors if a reserved or unimplemented PMU event number is selected.</content>
</listitem></list></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1001</field_value>
        <field_value_description><para>PMUv3 for Armv8.9. As <binarynumber>0b1000</binarynumber>, and:</para>
<list type="unordered">
<listitem><content>Updates the definitions of existing PMU events.</content>
</listitem><listitem><content>Adds support for the <register_link state="ext" id="ext-edecr.xml">EDECR</register_link>.PME control.</content>
</listitem></list></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1111</field_value>
        <field_value_description>
          <para><arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> form of performance monitors supported, PMUv3 not supported. Arm does not recommend this value for new implementations.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <field id="fieldset_0-23_20" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>MProfDbg</field_name>
    <field_msb>23</field_msb>
    <field_lsb>20</field_lsb>
    <rel_range>23:20</rel_range>
    <field_description order="before">
      <para>M-profile Debug. Support for memory-mapped debug model for M-profile processors. Defined values are:</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para>In Armv8-A, the only permitted value is <binarynumber>0b0000</binarynumber>.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>Not supported.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>Support for M-profile Debug architecture, with memory-mapped access.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <field id="fieldset_0-19_16" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>MMapTrc</field_name>
    <field_msb>19</field_msb>
    <field_lsb>16</field_lsb>
    <rel_range>19:16</rel_range>
    <field_description order="before">
      <para>Memory-mapped Trace. Support for memory-mapped trace model. Defined values are:</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para>In Armv8-A, the permitted values are <binarynumber>0b0000</binarynumber> and <binarynumber>0b0001</binarynumber>.</para>
<para>For more information, see the Arm® Embedded Trace Macrocell Architecture Specification, ETMv4 (ARM IHI 0064).</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>Not supported.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>Support for Arm trace architecture, with memory-mapped access.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <field id="fieldset_0-15_12" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>CopTrc</field_name>
    <field_msb>15</field_msb>
    <field_lsb>12</field_lsb>
    <rel_range>15:12</rel_range>
    <field_description order="before">
      <para>Support for System registers-based trace model, using registers in the coproc == <binarynumber>0b1110</binarynumber> encoding space. Defined values are:</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para>In Armv8-A, the permitted values are <binarynumber>0b0000</binarynumber> and <binarynumber>0b0001</binarynumber>.</para>
<para>For more information, see the Arm® Embedded Trace Macrocell Architecture Specification, ETMv4 (ARM IHI 0064).</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>Not supported.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0001</field_value>
        <field_value_description>
          <para>Support for Arm trace architecture, with System registers access.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <field id="fieldset_0-11_8" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>MMapDbg</field_name>
    <field_msb>11</field_msb>
    <field_lsb>8</field_lsb>
    <rel_range>11:8</rel_range>
    <field_description order="before">
      <para>Memory-mapped Debug. Support for Armv7 memory-mapped debug model for A and R-profile processors. Defined values are:</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para>In Armv8-A, the only permitted value is <binarynumber>0b0000</binarynumber>.</para>
<para>The optional memory map defined by Armv8 is not compatible with Armv7.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>Not supported.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0100</field_value>
        <field_value_description>
          <para>Support for Armv7, v7 Debug architecture, with memory-mapped access.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0101</field_value>
        <field_value_description>
          <para>Support for Armv7, v7.1 Debug architecture, with memory-mapped access.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <field id="fieldset_0-7_4" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>CopSDbg</field_name>
    <field_msb>7</field_msb>
    <field_lsb>4</field_lsb>
    <rel_range>7:4</rel_range>
    <field_description order="before"><para>Support for a System registers-based Secure debug model, using registers in the coproc = <binarynumber>0b1110</binarynumber> encoding space, for an A-profile processor that includes EL3.</para>
<para>If EL3 is not implemented and the implemented Security state is Non-secure state, this field is <arm-defined-word>RES0</arm-defined-word>. Otherwise, this field reads the same as bits [3:0].</para></field_description>
  </field>
  <field id="fieldset_0-3_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>CopDbg</field_name>
    <field_msb>3</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>3:0</rel_range>
    <field_description order="before">
      <para>Debug architecture version. Indicates presence of Armv8 debug architecture. Defined values are:</para>
    </field_description>
    <field_description order="after"><para>All other values are reserved.</para>
<para>The values <binarynumber>0b0000</binarynumber>, <binarynumber>0b0010</binarynumber>, <binarynumber>0b0011</binarynumber>, <binarynumber>0b0100</binarynumber>, and <binarynumber>0b0101</binarynumber> are not permitted in Armv8.</para>
<para><xref browsertext="FEAT_VHE" filename="A_armv8_architecture_extensions.fm" linkend="v8.1.VHE"/> implements the functionality identified by the value <binarynumber>0b0111</binarynumber>.</para>
<para><xref browsertext="FEAT_Debugv8p2" filename="A_armv8_architecture_extensions.fm" linkend="v8.2.Debug"/> implements the functionality identified by the value <binarynumber>0b1000</binarynumber>.</para>
<para><xref browsertext="FEAT_Debugv8p4" filename="A_armv8_architecture_extensions.fm" linkend="v8.4.Debug"/> implements the functionality identified by the value <binarynumber>0b1001</binarynumber>.</para>
<para><xref browsertext="FEAT_Debugv8p8" filename="A_armv8_architecture_extensions.fm" linkend="FEAT_Debugv8p8"/> implements the functionality identified by the value <binarynumber>0b1010</binarynumber>.</para>
<para><xref browsertext="FEAT_Debugv8p9" filename="A_armv8_architecture_extensions.fm" linkend="FEAT_Debugv8p9"/> implements the functionality identified by the value <binarynumber>0b1011</binarynumber>.</para>
<para>From Armv8.1, when <xref browsertext="FEAT_VHE" filename="A_armv8_architecture_extensions.fm" linkend="v8.1.VHE"/> is implemented the value <binarynumber>0b0110</binarynumber> is not permitted.</para>
<para>From Armv8.2, the values <binarynumber>0b0110</binarynumber> and <binarynumber>0b0111</binarynumber> are not permitted.</para>
<para>From Armv8.4, the value <binarynumber>0b1000</binarynumber> is not permitted.</para>
<para>From Armv8.8, the value <binarynumber>0b1001</binarynumber> is not permitted.</para>
<para>From Armv8.9, the value <binarynumber>0b1010</binarynumber> is not permitted.</para></field_description>
    <field_values>
      <field_value_instance>
        <field_value>0b0000</field_value>
        <field_value_description>
          <para>Not supported.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0010</field_value>
        <field_value_description>
          <para>Armv6, v6 Debug architecture, with System registers access.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0011</field_value>
        <field_value_description>
          <para>Armv6, v6.1 Debug architecture, with System registers access.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0100</field_value>
        <field_value_description>
          <para>Armv7, v7 Debug architecture, with System registers access.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0101</field_value>
        <field_value_description>
          <para>Armv7, v7.1 Debug architecture, with System registers access.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0110</field_value>
        <field_value_description>
          <para>Armv8 debug architecture.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b0111</field_value>
        <field_value_description>
          <para>Armv8 debug architecture with Virtualization Host Extensions.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1000</field_value>
        <field_value_description>
          <para>Armv8.2 debug architecture, <xref browsertext="FEAT_Debugv8p2" filename="A_armv8_architecture_extensions.fm" linkend="v8.2.Debug"/>.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1001</field_value>
        <field_value_description>
          <para>Armv8.4 debug architecture, <xref browsertext="FEAT_Debugv8p4" filename="A_armv8_architecture_extensions.fm" linkend="v8.4.Debug"/>.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1010</field_value>
        <field_value_description>
          <para>Armv8.8 debug architecture, <xref browsertext="FEAT_Debugv8p8" filename="A_armv8_architecture_extensions.fm" linkend="FEAT_Debugv8p8"/>.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1011</field_value>
        <field_value_description>
          <para>Armv8.9 debug architecture, <xref browsertext="FEAT_Debugv8p9" filename="A_armv8_architecture_extensions.fm" linkend="FEAT_Debugv8p9"/>.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <text_after_fields/>
</fields>




    
<reg_fieldset length="32">
  <fieldat id="fieldset_0-31_28" msb="31" lsb="28"/>
  <fieldat id="fieldset_0-27_24" msb="27" lsb="24"/>
  <fieldat id="fieldset_0-23_20" msb="23" lsb="20"/>
  <fieldat id="fieldset_0-19_16" msb="19" lsb="16"/>
  <fieldat id="fieldset_0-15_12" msb="15" lsb="12"/>
  <fieldat id="fieldset_0-11_8" msb="11" lsb="8"/>
  <fieldat id="fieldset_0-7_4" msb="7" lsb="4"/>
  <fieldat id="fieldset_0-3_0" msb="3" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>

      <access_mechanisms>
          






        
        <access_mechanism accessor="MRC ID_DFR0" type="SystemAccessor">
            <encoding>
            <access_instruction>MRC{&lt;c&gt;}{&lt;q&gt;} &lt;coproc&gt;, {#}&lt;opc1&gt;, &lt;Rt&gt;, &lt;CRn&gt;, &lt;CRm&gt;{, {#}&lt;opc2&gt;}</access_instruction>
                
                <enc n="coproc" v="0b1111"/>
                
                <enc n="opc1" v="0b000"/>
                
                <enc n="CRn" v="0b0000"/>
                
                <enc n="CRm" v="0b0001"/>
                
                <enc n="opc2" v="0b010"/>
            </encoding>
            <access_permission>
                <ps name="MRC" sections="1" secttype="access_permission">
                <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HSTR_EL2.T0 == '1' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x03);
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HSTR.T0 == '1' then
        AArch32.TakeHypTrapException(0x03);
    elsif EL2Enabled() &amp;&amp; !ELUsingAArch32(EL2) &amp;&amp; HCR_EL2.TID3 == '1' then
        AArch64.AArch32SystemAccessTrap(EL2, 0x03);
    elsif EL2Enabled() &amp;&amp; ELUsingAArch32(EL2) &amp;&amp; HCR.TID3 == '1' then
        AArch32.TakeHypTrapException(0x03);
    else
        R[t] = ID_DFR0;
elsif PSTATE.EL == EL2 then
    R[t] = ID_DFR0;
elsif PSTATE.EL == EL3 then
    R[t] = ID_DFR0;
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>

      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>30/03/2023 19:06; 997dd0cf3258cacf72aa7cf7a885f19a4758c3af</timestamp>
</register_page>