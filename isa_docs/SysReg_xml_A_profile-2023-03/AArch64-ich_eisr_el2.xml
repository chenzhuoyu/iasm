<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register execution_state="AArch64" is_register="True" is_internal="True" is_banked="False" is_stub_entry="False">
      <reg_short_name>ICH_EISR_EL2</reg_short_name>
        
        <reg_long_name>Interrupt Controller End of Interrupt Status Register</reg_long_name>



      
        <reg_condition otherwise="UNDEFINED">when FEAT_GICv3 is implemented and (EL2 is implemented or EL3 is implemented)</reg_condition>
      



          <reg_reset_value></reg_reset_value>

      <reg_mappings>
        



      
      <reg_mapping>
        
  

    

    <mapped_name filename="AArch32-ich_eisr.xml">ICH_EISR</mapped_name>
  <mapped_type>Architectural</mapped_type>
      <mapped_execution_state>AArch32</mapped_execution_state>
    <mapped_from_startbit>31</mapped_from_startbit>
    <mapped_from_endbit>0</mapped_from_endbit>
    <mapped_to_startbit>31</mapped_to_startbit>
    <mapped_to_endbit>0</mapped_to_endbit>
    <mapped_from_rangeset output="31:0">
      <range>
        <msb>31</msb>
        <lsb>0</lsb>
      </range>
    </mapped_from_rangeset>
    <mapped_to_rangeset output="31:0">
      <range>
        <msb>31</msb>
        <lsb>0</lsb>
      </range>
    </mapped_to_rangeset>

      </reg_mapping>

      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>Indicates which List registers have outstanding EOI maintenance interrupts.</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
            <reg_group>GIC system registers</reg_group>
            <reg_group>GIC host interface control registers</reg_group>
            <reg_group>Virtualization registers</reg_group>
      </reg_groups>
      <reg_configuration>
        
    
      <configuration_text>
        <para>If EL2 is not implemented, this register is <arm-defined-word>RES0</arm-defined-word> from EL3.</para>

      </configuration_text>
      <configuration_text>
        <para>This register has no effect if EL2 is not enabled in the current Security state.</para>
      </configuration_text>

      </reg_configuration>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>ICH_EISR_EL2 is a 64-bit register.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        






<fields id="fieldset_0" length="64">
  <text_before_fields/>
  <field id="fieldset_0-63_16" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0">
    <field_msb>63</field_msb>
    <field_lsb>16</field_lsb>
    <rel_range>63:16</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
  </field>
  <field id="fieldset_0-15_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>Status&lt;n&gt;</field_name>
    <field_msb>15</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>15:0</rel_range>
    <field_description order="before">
      <para>EOI maintenance interrupt status bit for List register &lt;n&gt;:</para>
    </field_description>
    <field_description order="after"><para>For any <register_link state="AArch64" id="AArch64-ich_lrn_el2.xml">ICH_LR&lt;n&gt;_EL2</register_link>, the corresponding status bit is set to 1 if all of the following are true:</para>
<list type="unordered">
<listitem><content><register_link state="AArch64" id="AArch64-ich_lrn_el2.xml">ICH_LR&lt;n&gt;_EL2</register_link>.State is <binarynumber>0b00</binarynumber>.</content>
</listitem><listitem><content><register_link state="AArch64" id="AArch64-ich_lrn_el2.xml">ICH_LR&lt;n&gt;_EL2</register_link>.HW is 0.</content>
</listitem><listitem><content><register_link state="AArch64" id="AArch64-ich_lrn_el2.xml">ICH_LR&lt;n&gt;_EL2</register_link>.EOI (bit [41]) is 1, indicating that when the interrupt corresponding to that List register is deactivated, a maintenance interrupt is asserted.</content>
</listitem></list>
<para>Otherwise the status bit takes the value 0.</para></field_description>
    <field_array_indexes index_variable="n" element_size="1" range_specifier="n">
      <field_array_index>
        <field_array_start>15</field_array_start>
        <field_array_end>0</field_array_end>
      </field_array_index>
    </field_array_indexes>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>List register &lt;n&gt;, <register_link state="AArch64" id="AArch64-ich_lrn_el2.xml">ICH_LR&lt;n&gt;_EL2</register_link>, does not have an EOI maintenance interrupt.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>List register &lt;n&gt;, <register_link state="AArch64" id="AArch64-ich_lrn_el2.xml">ICH_LR&lt;n&gt;_EL2</register_link>, has an EOI maintenance interrupt that has not been handled.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
  </field>
  <text_after_fields/>
</fields>




    
<reg_fieldset length="64">
  <fieldat id="fieldset_0-63_16" msb="63" lsb="16"/>
  <fieldat id="fieldset_0-15_0" label="Status15" msb="15" lsb="15"/>
  <fieldat id="fieldset_0-15_0" label="Status14" msb="14" lsb="14"/>
  <fieldat id="fieldset_0-15_0" label="Status13" msb="13" lsb="13"/>
  <fieldat id="fieldset_0-15_0" label="Status12" msb="12" lsb="12"/>
  <fieldat id="fieldset_0-15_0" label="Status11" msb="11" lsb="11"/>
  <fieldat id="fieldset_0-15_0" label="Status10" msb="10" lsb="10"/>
  <fieldat id="fieldset_0-15_0" label="Status9" msb="9" lsb="9"/>
  <fieldat id="fieldset_0-15_0" label="Status8" msb="8" lsb="8"/>
  <fieldat id="fieldset_0-15_0" label="Status7" msb="7" lsb="7"/>
  <fieldat id="fieldset_0-15_0" label="Status6" msb="6" lsb="6"/>
  <fieldat id="fieldset_0-15_0" label="Status5" msb="5" lsb="5"/>
  <fieldat id="fieldset_0-15_0" label="Status4" msb="4" lsb="4"/>
  <fieldat id="fieldset_0-15_0" label="Status3" msb="3" lsb="3"/>
  <fieldat id="fieldset_0-15_0" label="Status2" msb="2" lsb="2"/>
  <fieldat id="fieldset_0-15_0" label="Status1" msb="1" lsb="1"/>
  <fieldat id="fieldset_0-15_0" label="Status0" msb="0" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>

      <access_mechanisms>
          






        
        <access_mechanism accessor="MRS ICH_EISR_EL2" type="SystemAccessor">
            <encoding>
            <access_instruction>MRS &lt;Xt&gt;, ICH_EISR_EL2</access_instruction>
                
                <enc n="op0" v="0b11"/>
                
                <enc n="op1" v="0b100"/>
                
                <enc n="CRn" v="0b1100"/>
                
                <enc n="CRm" v="0b1011"/>
                
                <enc n="op2" v="0b011"/>
            </encoding>
            <access_permission>
                <ps name="MRS" sections="1" secttype="access_permission">
                <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if EL2Enabled() &amp;&amp; HCR_EL2.NV == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    else
        UNDEFINED;
elsif PSTATE.EL == EL2 then
    if ICC_SRE_EL2.SRE == '0' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    else
        X[t, 64] = ICH_EISR_EL2;
elsif PSTATE.EL == EL3 then
    if ICC_SRE_EL3.SRE == '0' then
        AArch64.SystemAccessTrap(EL3, 0x18);
    else
        X[t, 64] = ICH_EISR_EL2;
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>

      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>30/03/2023 19:06; 997dd0cf3258cacf72aa7cf7a885f19a4758c3af</timestamp>
</register_page>