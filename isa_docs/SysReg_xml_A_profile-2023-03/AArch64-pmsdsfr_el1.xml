<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register execution_state="AArch64" is_register="True" is_internal="True" is_banked="False" is_stub_entry="False">
      <reg_short_name>PMSDSFR_EL1</reg_short_name>
        
        <reg_long_name>Sampling Data Source Filter Register</reg_long_name>



      
        <reg_condition otherwise="UNDEFINED">when FEAT_SPE_FDS is implemented</reg_condition>
      



          <reg_reset_value>

      </reg_reset_value>

      <reg_mappings>
        




      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>Controls sample filtering by Data Source.</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
          <reg_group>Statistical Profiling Extension registers</reg_group>
      </reg_groups>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>PMSDSFR_EL1 is a 64-bit register.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        






<fields id="fieldset_0" length="64">
  <fields_instance>PMSDSFR_EL1</fields_instance>
  <text_before_fields/>
  <field id="fieldset_0-63_0-1" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="True" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" reserved_type="RAZ/WI">
    <field_name>S&lt;m&gt;</field_name>
    <field_msb>63</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>63:0</rel_range>
    <field_description order="before">
      <para>S[&lt;m&gt;] is the Data Source filter for <arm-defined-word>IMPLEMENTATION DEFINED</arm-defined-word> Data Source &lt;m&gt;.</para>
    </field_description>
    <field_array_indexes index_variable="m" element_size="1" range_specifier="m">
      <field_array_index>
        <field_array_start>63</field_array_start>
        <field_array_end>0</field_array_end>
      </field_array_index>
    </field_array_indexes>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description>
          <para>If <register_link state="AArch64" id="AArch64-pmsfcr_el1.xml">PMSFCR_EL1</register_link>.FDS is 1, do not record load operations that have bits [5:0] of the Data Source packet set to &lt;m&gt;.</para>
        </field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description>
          <para>Load operations with Data Source &lt;m&gt; are unaffected by <register_link state="AArch64" id="AArch64-pmsfcr_el1.xml">PMSFCR_EL1</register_link>.FDS.</para>
        </field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="Warm">
        <field_reset_standard_text>AU</field_reset_standard_text>
      </field_reset>
    </field_resets>
    <fields_condition>When filtering on Data Source &lt;m&gt; is supported</fields_condition>
  </field>
  <field id="fieldset_0-63_0-2" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RAZ/WI" reserved_type="RAZ/WI">
    <field_msb>63</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>63:0</rel_range>
    <field_description order="before">
      <para>Reserved, RAZ/WI.</para>
    </field_description>
    <fields_condition>Otherwise</fields_condition>
  </field>
  <text_after_fields/>
</fields>




    
<reg_fieldset length="64">
  <fieldat id="fieldset_0-63_0-1" label="S63" msb="63" lsb="63"/>
  <fieldat id="fieldset_0-63_0-1" label="S62" msb="62" lsb="62"/>
  <fieldat id="fieldset_0-63_0-1" label="S61" msb="61" lsb="61"/>
  <fieldat id="fieldset_0-63_0-1" label="S60" msb="60" lsb="60"/>
  <fieldat id="fieldset_0-63_0-1" label="S59" msb="59" lsb="59"/>
  <fieldat id="fieldset_0-63_0-1" label="S58" msb="58" lsb="58"/>
  <fieldat id="fieldset_0-63_0-1" label="S57" msb="57" lsb="57"/>
  <fieldat id="fieldset_0-63_0-1" label="S56" msb="56" lsb="56"/>
  <fieldat id="fieldset_0-63_0-1" label="S55" msb="55" lsb="55"/>
  <fieldat id="fieldset_0-63_0-1" label="S54" msb="54" lsb="54"/>
  <fieldat id="fieldset_0-63_0-1" label="S53" msb="53" lsb="53"/>
  <fieldat id="fieldset_0-63_0-1" label="S52" msb="52" lsb="52"/>
  <fieldat id="fieldset_0-63_0-1" label="S51" msb="51" lsb="51"/>
  <fieldat id="fieldset_0-63_0-1" label="S50" msb="50" lsb="50"/>
  <fieldat id="fieldset_0-63_0-1" label="S49" msb="49" lsb="49"/>
  <fieldat id="fieldset_0-63_0-1" label="S48" msb="48" lsb="48"/>
  <fieldat id="fieldset_0-63_0-1" label="S47" msb="47" lsb="47"/>
  <fieldat id="fieldset_0-63_0-1" label="S46" msb="46" lsb="46"/>
  <fieldat id="fieldset_0-63_0-1" label="S45" msb="45" lsb="45"/>
  <fieldat id="fieldset_0-63_0-1" label="S44" msb="44" lsb="44"/>
  <fieldat id="fieldset_0-63_0-1" label="S43" msb="43" lsb="43"/>
  <fieldat id="fieldset_0-63_0-1" label="S42" msb="42" lsb="42"/>
  <fieldat id="fieldset_0-63_0-1" label="S41" msb="41" lsb="41"/>
  <fieldat id="fieldset_0-63_0-1" label="S40" msb="40" lsb="40"/>
  <fieldat id="fieldset_0-63_0-1" label="S39" msb="39" lsb="39"/>
  <fieldat id="fieldset_0-63_0-1" label="S38" msb="38" lsb="38"/>
  <fieldat id="fieldset_0-63_0-1" label="S37" msb="37" lsb="37"/>
  <fieldat id="fieldset_0-63_0-1" label="S36" msb="36" lsb="36"/>
  <fieldat id="fieldset_0-63_0-1" label="S35" msb="35" lsb="35"/>
  <fieldat id="fieldset_0-63_0-1" label="S34" msb="34" lsb="34"/>
  <fieldat id="fieldset_0-63_0-1" label="S33" msb="33" lsb="33"/>
  <fieldat id="fieldset_0-63_0-1" label="S32" msb="32" lsb="32"/>
  <fieldat id="fieldset_0-63_0-1" label="S31" msb="31" lsb="31"/>
  <fieldat id="fieldset_0-63_0-1" label="S30" msb="30" lsb="30"/>
  <fieldat id="fieldset_0-63_0-1" label="S29" msb="29" lsb="29"/>
  <fieldat id="fieldset_0-63_0-1" label="S28" msb="28" lsb="28"/>
  <fieldat id="fieldset_0-63_0-1" label="S27" msb="27" lsb="27"/>
  <fieldat id="fieldset_0-63_0-1" label="S26" msb="26" lsb="26"/>
  <fieldat id="fieldset_0-63_0-1" label="S25" msb="25" lsb="25"/>
  <fieldat id="fieldset_0-63_0-1" label="S24" msb="24" lsb="24"/>
  <fieldat id="fieldset_0-63_0-1" label="S23" msb="23" lsb="23"/>
  <fieldat id="fieldset_0-63_0-1" label="S22" msb="22" lsb="22"/>
  <fieldat id="fieldset_0-63_0-1" label="S21" msb="21" lsb="21"/>
  <fieldat id="fieldset_0-63_0-1" label="S20" msb="20" lsb="20"/>
  <fieldat id="fieldset_0-63_0-1" label="S19" msb="19" lsb="19"/>
  <fieldat id="fieldset_0-63_0-1" label="S18" msb="18" lsb="18"/>
  <fieldat id="fieldset_0-63_0-1" label="S17" msb="17" lsb="17"/>
  <fieldat id="fieldset_0-63_0-1" label="S16" msb="16" lsb="16"/>
  <fieldat id="fieldset_0-63_0-1" label="S15" msb="15" lsb="15"/>
  <fieldat id="fieldset_0-63_0-1" label="S14" msb="14" lsb="14"/>
  <fieldat id="fieldset_0-63_0-1" label="S13" msb="13" lsb="13"/>
  <fieldat id="fieldset_0-63_0-1" label="S12" msb="12" lsb="12"/>
  <fieldat id="fieldset_0-63_0-1" label="S11" msb="11" lsb="11"/>
  <fieldat id="fieldset_0-63_0-1" label="S10" msb="10" lsb="10"/>
  <fieldat id="fieldset_0-63_0-1" label="S9" msb="9" lsb="9"/>
  <fieldat id="fieldset_0-63_0-1" label="S8" msb="8" lsb="8"/>
  <fieldat id="fieldset_0-63_0-1" label="S7" msb="7" lsb="7"/>
  <fieldat id="fieldset_0-63_0-1" label="S6" msb="6" lsb="6"/>
  <fieldat id="fieldset_0-63_0-1" label="S5" msb="5" lsb="5"/>
  <fieldat id="fieldset_0-63_0-1" label="S4" msb="4" lsb="4"/>
  <fieldat id="fieldset_0-63_0-1" label="S3" msb="3" lsb="3"/>
  <fieldat id="fieldset_0-63_0-1" label="S2" msb="2" lsb="2"/>
  <fieldat id="fieldset_0-63_0-1" label="S1" msb="1" lsb="1"/>
  <fieldat id="fieldset_0-63_0-1" label="S0" msb="0" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>

      <access_mechanisms>
          






        
        <access_mechanism accessor="MRS PMSDSFR_EL1" type="SystemAccessor">
            <encoding>
            <access_instruction>MRS &lt;Xt&gt;, PMSDSFR_EL1</access_instruction>
                
                <enc n="op0" v="0b11"/>
                
                <enc n="op1" v="0b000"/>
                
                <enc n="CRn" v="0b1001"/>
                
                <enc n="CRm" v="0b1010"/>
                
                <enc n="op2" v="0b100"/>
            </encoding>
            <access_permission>
                <ps name="MRS" sections="1" secttype="access_permission">
                <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; MDCR_EL3.EnPMS3 == '0' then
        UNDEFINED;
    elsif Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; (MDCR_EL3.NSPB[0] == '0' || MDCR_EL3.NSPB[1] != SCR_EL3.NS || (IsFeatureImplemented(FEAT_RME) &amp;&amp; MDCR_EL3.NSPBE != SCR_EL3.NSE)) then
        UNDEFINED;
    elsif EL2Enabled() &amp;&amp; IsFeatureImplemented(FEAT_FGT2) &amp;&amp; HaveEL(EL3) &amp;&amp; SCR_EL3.FGTEn2 == '0' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; IsFeatureImplemented(FEAT_FGT2) &amp;&amp; HDFGRTR2_EL2.nPMSDSFR_EL1 == '0' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; MDCR_EL2.TPMS == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif HaveEL(EL3) &amp;&amp; MDCR_EL3.EnPMS3 == '0' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    elsif HaveEL(EL3) &amp;&amp; (MDCR_EL3.NSPB[0] == '0' || MDCR_EL3.NSPB[1] != SCR_EL3.NS || (IsFeatureImplemented(FEAT_RME) &amp;&amp; MDCR_EL3.NSPBE != SCR_EL3.NSE)) then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    elsif EL2Enabled() &amp;&amp; HCR_EL2.&lt;NV2,NV&gt; == '11' then
        X[t, 64] = NVMem[0x858];
    else
        X[t, 64] = PMSDSFR_EL1;
elsif PSTATE.EL == EL2 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; (MDCR_EL3.NSPB[0] == '0' || MDCR_EL3.NSPB[1] != SCR_EL3.NS || (IsFeatureImplemented(FEAT_RME) &amp;&amp; MDCR_EL3.NSPBE != SCR_EL3.NSE)) then
        UNDEFINED;
    elsif Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; MDCR_EL3.EnPMS3 == '0' then
        UNDEFINED;
    elsif HaveEL(EL3) &amp;&amp; (MDCR_EL3.NSPB[0] == '0' || MDCR_EL3.NSPB[1] != SCR_EL3.NS || (IsFeatureImplemented(FEAT_RME) &amp;&amp; MDCR_EL3.NSPBE != SCR_EL3.NSE)) then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    elsif HaveEL(EL3) &amp;&amp; MDCR_EL3.EnPMS3 == '0' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        X[t, 64] = PMSDSFR_EL1;
elsif PSTATE.EL == EL3 then
    X[t, 64] = PMSDSFR_EL1;
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>
        
        <access_mechanism accessor="MSRregister PMSDSFR_EL1" type="SystemAccessor">
            <encoding>
            <access_instruction>MSR PMSDSFR_EL1, &lt;Xt&gt;</access_instruction>
                
                <enc n="op0" v="0b11"/>
                
                <enc n="op1" v="0b000"/>
                
                <enc n="CRn" v="0b1001"/>
                
                <enc n="CRm" v="0b1010"/>
                
                <enc n="op2" v="0b100"/>
            </encoding>
            <access_permission>
                <ps name="MSRregister" sections="1" secttype="access_permission">
                <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; MDCR_EL3.EnPMS3 == '0' then
        UNDEFINED;
    elsif Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; (MDCR_EL3.NSPB[0] == '0' || MDCR_EL3.NSPB[1] != SCR_EL3.NS || (IsFeatureImplemented(FEAT_RME) &amp;&amp; MDCR_EL3.NSPBE != SCR_EL3.NSE)) then
        UNDEFINED;
    elsif EL2Enabled() &amp;&amp; IsFeatureImplemented(FEAT_FGT2) &amp;&amp; HaveEL(EL3) &amp;&amp; SCR_EL3.FGTEn2 == '0' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; IsFeatureImplemented(FEAT_FGT2) &amp;&amp; HDFGWTR2_EL2.nPMSDSFR_EL1 == '0' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; MDCR_EL2.TPMS == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif HaveEL(EL3) &amp;&amp; MDCR_EL3.EnPMS3 == '0' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    elsif HaveEL(EL3) &amp;&amp; (MDCR_EL3.NSPB[0] == '0' || MDCR_EL3.NSPB[1] != SCR_EL3.NS || (IsFeatureImplemented(FEAT_RME) &amp;&amp; MDCR_EL3.NSPBE != SCR_EL3.NSE)) then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    elsif EL2Enabled() &amp;&amp; HCR_EL2.&lt;NV2,NV&gt; == '11' then
        NVMem[0x858] = X[t, 64];
    else
        PMSDSFR_EL1 = X[t, 64];
elsif PSTATE.EL == EL2 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; (MDCR_EL3.NSPB[0] == '0' || MDCR_EL3.NSPB[1] != SCR_EL3.NS || (IsFeatureImplemented(FEAT_RME) &amp;&amp; MDCR_EL3.NSPBE != SCR_EL3.NSE)) then
        UNDEFINED;
    elsif Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; MDCR_EL3.EnPMS3 == '0' then
        UNDEFINED;
    elsif HaveEL(EL3) &amp;&amp; (MDCR_EL3.NSPB[0] == '0' || MDCR_EL3.NSPB[1] != SCR_EL3.NS || (IsFeatureImplemented(FEAT_RME) &amp;&amp; MDCR_EL3.NSPBE != SCR_EL3.NSE)) then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    elsif HaveEL(EL3) &amp;&amp; MDCR_EL3.EnPMS3 == '0' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        PMSDSFR_EL1 = X[t, 64];
elsif PSTATE.EL == EL3 then
    PMSDSFR_EL1 = X[t, 64];
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>

      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>30/03/2023 19:07; 997dd0cf3258cacf72aa7cf7a885f19a4758c3af</timestamp>
</register_page>