<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register is_register="True" is_internal="False" is_banked="False" is_stub_entry="False">
      <reg_short_name>GICD_ICPENDR&lt;n&gt;E</reg_short_name>
        
        <reg_long_name>Interrupt Clear-Pending Registers (extended SPI range)</reg_long_name>



      
        <reg_condition otherwise="RES0">when FEAT_GICv3p1 is implemented</reg_condition>
          <reg_array>
              <reg_array_start>0</reg_array_start>
              <reg_array_end>31</reg_array_end>
         </reg_array>
      
  <reg_address
      external_access="False"
    mem_map_access="True"
      power_domain="None"
  >
    <reg_component>GIC Distributor</reg_component>
    <reg_frame>Dist_base</reg_frame>
    <reg_offset><hexnumber>0x1800</hexnumber> + (4 * n)</reg_offset>
    <reg_instance>GICD_ICPENDR&lt;n&gt;E</reg_instance>
    <reg_access>
      
        
      <reg_access_state>
          <reg_access_type>RW</reg_access_type>
      </reg_access_state>
    </reg_access>
</reg_address>



          <reg_reset_value></reg_reset_value>

      <reg_mappings>
        




      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>Removes the pending state to the corresponding SPI in the extended SPI range.</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
            <reg_group>GIC Distributor registers</reg_group>
      </reg_groups>
      <reg_configuration>
        
    
      <configuration_text>
        <para>When <register_link state="ext" id="ext-gicd_typer.xml">GICD_TYPER</register_link>.ESPI==0, these registers are <arm-defined-word>RES0</arm-defined-word>.</para>

      </configuration_text>
      <configuration_text>
        <para>When <register_link state="ext" id="ext-gicd_typer.xml">GICD_TYPER</register_link>.ESPI==1, the number of implemented GICD_ICPENDR&lt;n&gt;E registers is (<register_link state="ext" id="ext-gicd_typer.xml">GICD_TYPER</register_link>.ESPI_range+1). Registers are numbered from 0.</para>
      </configuration_text>

      </reg_configuration>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>GICD_ICPENDR&lt;n&gt;E is a 32-bit register.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        






<fields id="fieldset_0" length="32">
  <text_before_fields/>
  <field id="fieldset_0-31_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>Clear_pending_bit&lt;x&gt;</field_name>
    <field_msb>31</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>31:0</rel_range>
    <field_description order="before">
      <para>For the extended PPIs, removes the pending state to interrupt number x. Reads and writes have the following behavior:</para>
    </field_description>
    <field_array_indexes index_variable="x" element_size="1" range_specifier="x">
      <field_array_index>
        <field_array_start>31</field_array_start>
        <field_array_end>0</field_array_end>
      </field_array_index>
    </field_array_indexes>
    <field_values>
      <field_value_instance>
        <field_value>0b0</field_value>
        <field_value_description><para>If read, indicates that the corresponding interrupt is not pending.</para>
<para>If written, has no effect.</para></field_value_description>
      </field_value_instance>
      <field_value_instance>
        <field_value>0b1</field_value>
        <field_value_description><para>If read, indicates that the corresponding interrupt is pending, or active and pending.</para>
<para>If written, changes the state of the corresponding interrupt from pending to inactive, or from active and pending to active. </para>
<para>This has no effect in the following cases:</para>
<list type="unordered">
<listitem><content>
<para>If the interrupt is not pending and is not active and pending.</para>
</content>
</listitem><listitem><content>
<para>If the interrupt is a level-sensitive interrupt that is pending or active and pending for a reason other than a write to GICD_ISPENDR&lt;n&gt;E. In this case, if the interrupt signal continues to be asserted, the interrupt remains pending or active and pending.</para>
</content>
</listitem></list></field_value_description>
      </field_value_instance>
    </field_values>
    <field_resets>
      <field_reset reset_type="GIC">
        <field_reset_number>0</field_reset_number>
      </field_reset>
    </field_resets>
  </field>
  <text_after_fields><para>For INTID m, when DIV and MOD are the integer division and modulo operations:</para>
<list type="unordered">
<listitem><content>The corresponding GICD_ICPENDR&lt;n&gt;E number, n, is given by n = (m-4096) DIV 32.</content>
</listitem><listitem><content>The offset of the required GICD_ICPENDR&lt;n&gt;E is (<hexnumber>0x1800</hexnumber> + (4*n)).</content>
</listitem><listitem><content>The bit number of the required group modifier bit in this register is (m-4096) MOD 32.</content>
</listitem></list></text_after_fields>
</fields>




    
<reg_fieldset length="32">
  <fieldat id="fieldset_0-31_0" label="Clear_pending_bit31" msb="31" lsb="31"/>
  <fieldat id="fieldset_0-31_0" label="Clear_pending_bit30" msb="30" lsb="30"/>
  <fieldat id="fieldset_0-31_0" label="Clear_pending_bit29" msb="29" lsb="29"/>
  <fieldat id="fieldset_0-31_0" label="Clear_pending_bit28" msb="28" lsb="28"/>
  <fieldat id="fieldset_0-31_0" label="Clear_pending_bit27" msb="27" lsb="27"/>
  <fieldat id="fieldset_0-31_0" label="Clear_pending_bit26" msb="26" lsb="26"/>
  <fieldat id="fieldset_0-31_0" label="Clear_pending_bit25" msb="25" lsb="25"/>
  <fieldat id="fieldset_0-31_0" label="Clear_pending_bit24" msb="24" lsb="24"/>
  <fieldat id="fieldset_0-31_0" label="Clear_pending_bit23" msb="23" lsb="23"/>
  <fieldat id="fieldset_0-31_0" label="Clear_pending_bit22" msb="22" lsb="22"/>
  <fieldat id="fieldset_0-31_0" label="Clear_pending_bit21" msb="21" lsb="21"/>
  <fieldat id="fieldset_0-31_0" label="Clear_pending_bit20" msb="20" lsb="20"/>
  <fieldat id="fieldset_0-31_0" label="Clear_pending_bit19" msb="19" lsb="19"/>
  <fieldat id="fieldset_0-31_0" label="Clear_pending_bit18" msb="18" lsb="18"/>
  <fieldat id="fieldset_0-31_0" label="Clear_pending_bit17" msb="17" lsb="17"/>
  <fieldat id="fieldset_0-31_0" label="Clear_pending_bit16" msb="16" lsb="16"/>
  <fieldat id="fieldset_0-31_0" label="Clear_pending_bit15" msb="15" lsb="15"/>
  <fieldat id="fieldset_0-31_0" label="Clear_pending_bit14" msb="14" lsb="14"/>
  <fieldat id="fieldset_0-31_0" label="Clear_pending_bit13" msb="13" lsb="13"/>
  <fieldat id="fieldset_0-31_0" label="Clear_pending_bit12" msb="12" lsb="12"/>
  <fieldat id="fieldset_0-31_0" label="Clear_pending_bit11" msb="11" lsb="11"/>
  <fieldat id="fieldset_0-31_0" label="Clear_pending_bit10" msb="10" lsb="10"/>
  <fieldat id="fieldset_0-31_0" label="Clear_pending_bit9" msb="9" lsb="9"/>
  <fieldat id="fieldset_0-31_0" label="Clear_pending_bit8" msb="8" lsb="8"/>
  <fieldat id="fieldset_0-31_0" label="Clear_pending_bit7" msb="7" lsb="7"/>
  <fieldat id="fieldset_0-31_0" label="Clear_pending_bit6" msb="6" lsb="6"/>
  <fieldat id="fieldset_0-31_0" label="Clear_pending_bit5" msb="5" lsb="5"/>
  <fieldat id="fieldset_0-31_0" label="Clear_pending_bit4" msb="4" lsb="4"/>
  <fieldat id="fieldset_0-31_0" label="Clear_pending_bit3" msb="3" lsb="3"/>
  <fieldat id="fieldset_0-31_0" label="Clear_pending_bit2" msb="2" lsb="2"/>
  <fieldat id="fieldset_0-31_0" label="Clear_pending_bit1" msb="1" lsb="1"/>
  <fieldat id="fieldset_0-31_0" label="Clear_pending_bit0" msb="0" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>
        <reg_variables>
              <reg_variable variable="n" max="31"/>
        </reg_variables>

      <access_mechanisms>
          


  
    
      <access_permission_text>
        <para>When affinity routing is not enabled for the Security state of an interrupt in GICD_ICPENDR&lt;n&gt;E, the corresponding bit is <arm-defined-word>RES0</arm-defined-word>.</para>

      </access_permission_text>
      <access_permission_text>
        <para>When <register_link state="ext" id="ext-gicd_ctlr.xml">GICD_CTLR</register_link>.DS==0, bits corresponding to Secure SPIs are RAZ/WI to Non-secure accesses.</para>

      </access_permission_text>
      <access_permission_text>
        <para>Bits corresponding to unimplemented interrupts are RAZ/WI.</para>
      </access_permission_text>






      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>30/03/2023 19:07; 997dd0cf3258cacf72aa7cf7a885f19a4758c3af</timestamp>
</register_page>