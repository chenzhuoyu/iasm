<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE register_page SYSTEM "registers.dtd">
<!-- Copyright (c) 2010-2023 Arm Limited or its affiliates. All rights reserved. -->
<!-- This document is Non-Confidential. This document may only be used and distributed in accordance with the terms of the agreement entered into by Arm and the party that Arm delivered this document to. -->
<!--The data contained in this document is preliminary and subject to change or correction following further review. -->
<?xml-stylesheet href="one_register.xsl" type="text/xsl" ?>







<register_page>
  <registers>
  
    <register execution_state="AArch64" is_register="True" is_internal="True" is_banked="False" is_stub_entry="False">
      <reg_short_name>ICC_EOIR1_EL1</reg_short_name>
        
        <reg_long_name>Interrupt Controller End Of Interrupt Register 1</reg_long_name>



      
        <reg_condition otherwise="UNDEFINED">when FEAT_GICv3 is implemented</reg_condition>
      



          <reg_reset_value></reg_reset_value>

      <reg_mappings>
        



      
      <reg_mapping>
        
  

    

    <mapped_name filename="AArch32-icc_eoir1.xml">ICC_EOIR1</mapped_name>
  <mapped_type>Functional</mapped_type>
      <mapped_execution_state>AArch32</mapped_execution_state>

      </reg_mapping>

      </reg_mappings>

        <reg_purpose>
          
    
      <purpose_text>
        <para>A PE writes to this register to inform the CPU interface that it has completed the processing of the specified Group 1 interrupt.</para>
      </purpose_text>

        </reg_purpose>

      <reg_groups>
            <reg_group>GIC control registers</reg_group>
            <reg_group>GIC system registers</reg_group>
      </reg_groups>
      
      
        
      <reg_attributes>
          
    
      <attributes_text>
        <para>ICC_EOIR1_EL1 is a 64-bit register.</para>
      </attributes_text>

      </reg_attributes>
      <reg_fieldsets>
        






<fields id="fieldset_0" length="64">
  <text_before_fields/>
  <field id="fieldset_0-63_24" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False" rwtype="RES0">
    <field_msb>63</field_msb>
    <field_lsb>24</field_lsb>
    <rel_range>63:24</rel_range>
    <field_description order="before">
      <para>Reserved, <arm-defined-word>RES0</arm-defined-word>.</para>
    </field_description>
  </field>
  <field id="fieldset_0-23_0" has_partial_fieldset="False" is_linked_to_partial_fieldset="False" is_access_restriction_possible="False" is_variable_length="False" is_constant_value="False" is_partial_field="False" is_conditional_field_name="False">
    <field_name>INTID</field_name>
    <field_msb>23</field_msb>
    <field_lsb>0</field_lsb>
    <rel_range>23:0</rel_range>
    <field_description order="before"><para>The INTID from the corresponding <register_link state="AArch64" id="AArch64-icc_iar1_el1.xml">ICC_IAR1_EL1</register_link> access.</para>
<para>This field has either 16 or 24 bits implemented. The number of implemented bits can be found in <register_link state="AArch64" id="AArch64-icc_ctlr_el1.xml">ICC_CTLR_EL1</register_link>.IDbits and <register_link state="AArch64" id="AArch64-icc_ctlr_el3.xml">ICC_CTLR_EL3</register_link>.IDbits. If only 16 bits are implemented, bits [23:16] of this register are <arm-defined-word>RES0</arm-defined-word>.</para>
<para>If the EOImode bit for the current Exception level and Security state is 0, a write to this register drops the priority for the interrupt, and also deactivates the interrupt.</para>
<para>If the EOImode bit for the current Exception level and Security state is 1, a write to this register only drops the priority for the interrupt. Software must write to <register_link state="AArch64" id="AArch64-icc_dir_el1.xml">ICC_DIR_EL1</register_link> to deactivate the interrupt.</para>
<para>The EOImode bit for the current Exception level and Security state is determined as follows:</para>
<list type="unordered">
<listitem><content>If EL3 is not implemented, the appropriate bit is <register_link state="AArch64" id="AArch64-icc_ctlr_el1.xml">ICC_CTLR_EL1</register_link>.EOIMode.</content>
</listitem><listitem><content>If EL3 is implemented and the software is executing at EL3, the appropriate bit is <register_link state="AArch64" id="AArch64-icc_ctlr_el3.xml">ICC_CTLR_EL3</register_link>.EOImode_EL3.</content>
</listitem><listitem><content>If EL3 is implemented and the software is not executing at EL3, the bit depends on the current Security state:<list type="unordered">
<listitem><content>If the software is executing in Secure state, the bit is <register_link state="AArch64" id="AArch64-icc_ctlr_el3.xml">ICC_CTLR_EL3</register_link>.EOImode_EL1S.</content>
</listitem><listitem><content>If the software is executing in Non-secure state, the bit is <register_link state="AArch64" id="AArch64-icc_ctlr_el3.xml">ICC_CTLR_EL3</register_link>.EOImode_EL1NS.</content>
</listitem></list>
</content>
</listitem></list></field_description>
  </field>
  <text_after_fields/>
</fields>




    
<reg_fieldset length="64">
  <fieldat id="fieldset_0-63_24" msb="63" lsb="24"/>
  <fieldat id="fieldset_0-23_0" msb="23" lsb="0"/>
</reg_fieldset>


      </reg_fieldsets>

      <access_mechanisms>
          


  
    
      <access_permission_text>
        <para>A write to this register must correspond to the most recent valid read by this PE from an Interrupt Acknowledge Register, and must correspond to the INTID that was read from <register_link state="AArch64" id="AArch64-icc_iar1_el1.xml">ICC_IAR1_EL1</register_link>, otherwise the system behavior is <arm-defined-word>UNPREDICTABLE</arm-defined-word>. A valid read is a read that returns a valid INTID that is not a special INTID.</para>

      </access_permission_text>
      <access_permission_text>
        <para>A write of a Special INTID is ignored. For more information, see <xref browsertext="'Special INTIDs' in ARM&#174; Generic Interrupt Controller Architecture Specification, GIC architecture version 3.0 and version 4.0 (ARM IHI 0069)" filename="AS_distributing_interrupts_within_the_gic.fm" linkend="CHDIFEAF"/>.</para>
      </access_permission_text>





        
        <access_mechanism accessor="MSRregister ICC_EOIR1_EL1" type="SystemAccessor">
            <encoding>
            <access_instruction>MSR ICC_EOIR1_EL1, &lt;Xt&gt;</access_instruction>
                
                <enc n="op0" v="0b11"/>
                
                <enc n="op1" v="0b000"/>
                
                <enc n="CRn" v="0b1100"/>
                
                <enc n="CRm" v="0b1100"/>
                
                <enc n="op2" v="0b001"/>
            </encoding>
            <access_permission>
                <ps name="MSRregister" sections="1" secttype="access_permission">
                <pstext>
if PSTATE.EL == EL0 then
    UNDEFINED;
elsif PSTATE.EL == EL1 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; SCR_EL3.IRQ == '1' then
        UNDEFINED;
    elsif ICC_SRE_EL1.SRE == '0' then
        AArch64.SystemAccessTrap(EL1, 0x18);
    elsif EL2Enabled() &amp;&amp; ICH_HCR_EL2.TALL1 == '1' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif EL2Enabled() &amp;&amp; HCR_EL2.IMO == '1' then
        ICV_EOIR1_EL1 = X[t, 64];
    elsif HaveEL(EL3) &amp;&amp; SCR_EL3.IRQ == '1' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        ICC_EOIR1_EL1 = X[t, 64];
elsif PSTATE.EL == EL2 then
    if Halted() &amp;&amp; HaveEL(EL3) &amp;&amp; EDSCR.SDD == '1' &amp;&amp; boolean IMPLEMENTATION_DEFINED "EL3 trap priority when SDD == '1'" &amp;&amp; SCR_EL3.IRQ == '1' then
        UNDEFINED;
    elsif ICC_SRE_EL2.SRE == '0' then
        AArch64.SystemAccessTrap(EL2, 0x18);
    elsif HaveEL(EL3) &amp;&amp; SCR_EL3.IRQ == '1' then
        if Halted() &amp;&amp; EDSCR.SDD == '1' then
            UNDEFINED;
        else
            AArch64.SystemAccessTrap(EL3, 0x18);
    else
        ICC_EOIR1_EL1 = X[t, 64];
elsif PSTATE.EL == EL3 then
    if ICC_SRE_EL3.SRE == '0' then
        AArch64.SystemAccessTrap(EL3, 0x18);
    else
        ICC_EOIR1_EL1 = X[t, 64];
                </pstext>
                </ps>
            </access_permission>
        </access_mechanism>

      </access_mechanisms>

      <arch_variants>
      </arch_variants>
  </register>
</registers>

    <timestamp>30/03/2023 19:06; 997dd0cf3258cacf72aa7cf7a885f19a4758c3af</timestamp>
</register_page>