// Code generated by "mkasm_aarch64.py", DO NOT EDIT.

package aarch64

import (
    `github.com/chenzhuoyu/iasm/asm`
)

const (
    _N_args = 3
)

// STILP instruction have 4 forms:
//
//   * STILP  <Wt1>, <Wt2>, [<Xn|SP>, #-8]!
//   * STILP  <Wt1>, <Wt2>, [<Xn|SP>]
//   * STILP  <Xt1>, <Xt2>, [<Xn|SP>, #-16]!
//   * STILP  <Xt1>, <Xt2>, [<Xn|SP>]
//
func (self *Program) STILP(v0, v1, v2 interface{}) *Instruction {
    p := self.alloc("STILP", 3, Operands { v0, v1, v2 })
    // STILP  <Wt1>, <Wt2>, [<Xn|SP>, #-8]!
    if isWr(v0) &&
       isWr(v1) &&
       isMem(v2) &&
       isXrOrSP(mbase(v2)) &&
       midx(v2) == nil &&
       moffs(v2) == -8 &&
       mext(v2) == PreIndex {
        sa_wt1 := uint32(v0.(asm.Register).ID())
        sa_wt2 := uint32(v1.(asm.Register).ID())
        sa_xn_sp := uint32(mbase(v2).ID())
        return p.setins(ldiappstilp(2, 0, sa_wt2, 0, sa_xn_sp, sa_wt1))
    }
    // STILP  <Wt1>, <Wt2>, [<Xn|SP>]
    if isWr(v0) &&
       isWr(v1) &&
       isMem(v2) &&
       isXrOrSP(mbase(v2)) &&
       midx(v2) == nil &&
       moffs(v2) == 0 &&
       mext(v2) == nil {
        sa_wt1 := uint32(v0.(asm.Register).ID())
        sa_wt2 := uint32(v1.(asm.Register).ID())
        sa_xn_sp := uint32(mbase(v2).ID())
        return p.setins(ldiappstilp(2, 0, sa_wt2, 1, sa_xn_sp, sa_wt1))
    }
    // STILP  <Xt1>, <Xt2>, [<Xn|SP>, #-16]!
    if isXr(v0) &&
       isXr(v1) &&
       isMem(v2) &&
       isXrOrSP(mbase(v2)) &&
       midx(v2) == nil &&
       moffs(v2) == -16 &&
       mext(v2) == PreIndex {
        sa_xt1 := uint32(v0.(asm.Register).ID())
        sa_xt2 := uint32(v1.(asm.Register).ID())
        sa_xn_sp := uint32(mbase(v2).ID())
        return p.setins(ldiappstilp(3, 0, sa_xt2, 0, sa_xn_sp, sa_xt1))
    }
    // STILP  <Xt1>, <Xt2>, [<Xn|SP>]
    if isXr(v0) &&
       isXr(v1) &&
       isMem(v2) &&
       isXrOrSP(mbase(v2)) &&
       midx(v2) == nil &&
       moffs(v2) == 0 &&
       mext(v2) == nil {
        sa_xt1 := uint32(v0.(asm.Register).ID())
        sa_xt2 := uint32(v1.(asm.Register).ID())
        sa_xn_sp := uint32(mbase(v2).ID())
        return p.setins(ldiappstilp(3, 0, sa_xt2, 1, sa_xn_sp, sa_xt1))
    }
    // none of above
    p.Free()
    panic("aarch64: invalid combination of operands for STILP")
}
